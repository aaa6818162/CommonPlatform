//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.19.1.0 (NJsonSchema v9.10.72.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Project.OpenApiSDK
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.19.1.0 (NJsonSchema v9.10.72.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class AuthorClient 
    {
        private string _baseUrl = "http://localhost:8133";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public AuthorClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JsonResultOfWebAPIResponseOfLoginResponse> LoginAsync(LoginRequest request)
        {
            return LoginAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<JsonResultOfWebAPIResponseOfLoginResponse> LoginAsync(LoginRequest request, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Author/Login");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(JsonResultOfWebAPIResponseOfLoginResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<JsonResultOfWebAPIResponseOfLoginResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(JsonResultOfWebAPIResponseOfLoginResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.19.1.0 (NJsonSchema v9.10.72.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CallingClient 
    {
        private string _baseUrl = "http://localhost:8133";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public CallingClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JsonResultOfProcessResult> IndexAsync(ProcessRequest request)
        {
            return IndexAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<JsonResultOfProcessResult> IndexAsync(ProcessRequest request, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Calling/Index");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(JsonResultOfProcessResult); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<JsonResultOfProcessResult>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(JsonResultOfProcessResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.19.1.0 (NJsonSchema v9.10.72.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class DefaultClient 
    {
        private string _baseUrl = "http://localhost:8133";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public DefaultClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JsonResultOfGetResponse> PostWithOutTokenAsync(GetRequest request)
        {
            return PostWithOutTokenAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<JsonResultOfGetResponse> PostWithOutTokenAsync(GetRequest request, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Default/PostWithOutToken");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(JsonResultOfGetResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<JsonResultOfGetResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(JsonResultOfGetResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetResponse> Tttttt1Async(GetRequest request)
        {
            return Tttttt1Async(request, System.Threading.CancellationToken.None);
        }
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetResponse> Tttttt1Async(GetRequest request, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Default/tttttt1");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(GetResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GetResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WebAPIResponseOfGetResponse> Tttttt2Async(GetRequest request)
        {
            return Tttttt2Async(request, System.Threading.CancellationToken.None);
        }
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<WebAPIResponseOfGetResponse> Tttttt2Async(GetRequest request, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Default/tttttt2");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(WebAPIResponseOfGetResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<WebAPIResponseOfGetResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(WebAPIResponseOfGetResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class LoginRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _loginName;
        private string _password;
    
        [Newtonsoft.Json.JsonProperty("LoginName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoginName
        {
            get { return _loginName; }
            set 
            {
                if (_loginName != value)
                {
                    _loginName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password
        {
            get { return _password; }
            set 
            {
                if (_password != value)
                {
                    _password = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LoginRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoginRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class JsonResultOfWebAPIResponseOfLoginResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private WebAPIResponseOfLoginResponse _content;
        private JsonSerializerSettings _serializerSettings;
        private Encoding _encoding;
        private object _request;
    
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WebAPIResponseOfLoginResponse Content
        {
            get { return _content; }
            set 
            {
                if (_content != value)
                {
                    _content = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("SerializerSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonSerializerSettings SerializerSettings
        {
            get { return _serializerSettings; }
            set 
            {
                if (_serializerSettings != value)
                {
                    _serializerSettings = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Encoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Encoding Encoding
        {
            get { return _encoding; }
            set 
            {
                if (_encoding != value)
                {
                    _encoding = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Request
        {
            get { return _request; }
            set 
            {
                if (_request != value)
                {
                    _request = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static JsonResultOfWebAPIResponseOfLoginResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<JsonResultOfWebAPIResponseOfLoginResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class WebAPIResponseOfLoginResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _success;
        private LoginResponse _result;
        private ErrorInfo _error;
    
        /// <summary>是否成功</summary>
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success
        {
            get { return _success; }
            set 
            {
                if (_success != value)
                {
                    _success = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>返回结果</summary>
        [Newtonsoft.Json.JsonProperty("Result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoginResponse Result
        {
            get { return _result; }
            set 
            {
                if (_result != value)
                {
                    _result = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorInfo Error
        {
            get { return _error; }
            set 
            {
                if (_error != value)
                {
                    _error = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WebAPIResponseOfLoginResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WebAPIResponseOfLoginResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class JsonSerializerSettings : System.ComponentModel.INotifyPropertyChanged
    {
        private JsonSerializerSettingsReferenceLoopHandling? _referenceLoopHandling;
        private JsonSerializerSettingsMissingMemberHandling? _missingMemberHandling;
        private JsonSerializerSettingsObjectCreationHandling? _objectCreationHandling;
        private JsonSerializerSettingsNullValueHandling? _nullValueHandling;
        private JsonSerializerSettingsDefaultValueHandling? _defaultValueHandling;
        private System.Collections.ObjectModel.ObservableCollection<JsonConverter> _converters;
        private JsonSerializerSettingsPreserveReferencesHandling? _preserveReferencesHandling;
        private JsonSerializerSettingsTypeNameHandling? _typeNameHandling;
        private JsonSerializerSettingsMetadataPropertyHandling? _metadataPropertyHandling;
        private JsonSerializerSettingsTypeNameAssemblyFormat? _typeNameAssemblyFormat;
        private JsonSerializerSettingsTypeNameAssemblyFormatHandling? _typeNameAssemblyFormatHandling;
        private JsonSerializerSettingsConstructorHandling? _constructorHandling;
        private object _contractResolver;
        private object _equalityComparer;
        private object _referenceResolver;
        private FuncOfIReferenceResolver _referenceResolverProvider;
        private ITraceWriter _traceWriter;
        private object _binder;
        private object _serializationBinder;
        private object _error;
        private StreamingContext _context;
        private string _dateFormatString;
        private int? _maxDepth;
        private JsonSerializerSettingsFormatting? _formatting;
        private JsonSerializerSettingsDateFormatHandling? _dateFormatHandling;
        private JsonSerializerSettingsDateTimeZoneHandling? _dateTimeZoneHandling;
        private JsonSerializerSettingsDateParseHandling? _dateParseHandling;
        private JsonSerializerSettingsFloatFormatHandling? _floatFormatHandling;
        private JsonSerializerSettingsFloatParseHandling? _floatParseHandling;
        private JsonSerializerSettingsStringEscapeHandling? _stringEscapeHandling;
        private string _culture;
        private bool? _checkAdditionalContent;
    
        [Newtonsoft.Json.JsonProperty("ReferenceLoopHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonSerializerSettingsReferenceLoopHandling? ReferenceLoopHandling
        {
            get { return _referenceLoopHandling; }
            set 
            {
                if (_referenceLoopHandling != value)
                {
                    _referenceLoopHandling = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MissingMemberHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonSerializerSettingsMissingMemberHandling? MissingMemberHandling
        {
            get { return _missingMemberHandling; }
            set 
            {
                if (_missingMemberHandling != value)
                {
                    _missingMemberHandling = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ObjectCreationHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonSerializerSettingsObjectCreationHandling? ObjectCreationHandling
        {
            get { return _objectCreationHandling; }
            set 
            {
                if (_objectCreationHandling != value)
                {
                    _objectCreationHandling = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("NullValueHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonSerializerSettingsNullValueHandling? NullValueHandling
        {
            get { return _nullValueHandling; }
            set 
            {
                if (_nullValueHandling != value)
                {
                    _nullValueHandling = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("DefaultValueHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonSerializerSettingsDefaultValueHandling? DefaultValueHandling
        {
            get { return _defaultValueHandling; }
            set 
            {
                if (_defaultValueHandling != value)
                {
                    _defaultValueHandling = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Converters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<JsonConverter> Converters
        {
            get { return _converters; }
            set 
            {
                if (_converters != value)
                {
                    _converters = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("PreserveReferencesHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonSerializerSettingsPreserveReferencesHandling? PreserveReferencesHandling
        {
            get { return _preserveReferencesHandling; }
            set 
            {
                if (_preserveReferencesHandling != value)
                {
                    _preserveReferencesHandling = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("TypeNameHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonSerializerSettingsTypeNameHandling? TypeNameHandling
        {
            get { return _typeNameHandling; }
            set 
            {
                if (_typeNameHandling != value)
                {
                    _typeNameHandling = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MetadataPropertyHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonSerializerSettingsMetadataPropertyHandling? MetadataPropertyHandling
        {
            get { return _metadataPropertyHandling; }
            set 
            {
                if (_metadataPropertyHandling != value)
                {
                    _metadataPropertyHandling = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("TypeNameAssemblyFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonSerializerSettingsTypeNameAssemblyFormat? TypeNameAssemblyFormat
        {
            get { return _typeNameAssemblyFormat; }
            set 
            {
                if (_typeNameAssemblyFormat != value)
                {
                    _typeNameAssemblyFormat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("TypeNameAssemblyFormatHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonSerializerSettingsTypeNameAssemblyFormatHandling? TypeNameAssemblyFormatHandling
        {
            get { return _typeNameAssemblyFormatHandling; }
            set 
            {
                if (_typeNameAssemblyFormatHandling != value)
                {
                    _typeNameAssemblyFormatHandling = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ConstructorHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonSerializerSettingsConstructorHandling? ConstructorHandling
        {
            get { return _constructorHandling; }
            set 
            {
                if (_constructorHandling != value)
                {
                    _constructorHandling = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ContractResolver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ContractResolver
        {
            get { return _contractResolver; }
            set 
            {
                if (_contractResolver != value)
                {
                    _contractResolver = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("EqualityComparer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object EqualityComparer
        {
            get { return _equalityComparer; }
            set 
            {
                if (_equalityComparer != value)
                {
                    _equalityComparer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ReferenceResolver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ReferenceResolver
        {
            get { return _referenceResolver; }
            set 
            {
                if (_referenceResolver != value)
                {
                    _referenceResolver = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ReferenceResolverProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FuncOfIReferenceResolver ReferenceResolverProvider
        {
            get { return _referenceResolverProvider; }
            set 
            {
                if (_referenceResolverProvider != value)
                {
                    _referenceResolverProvider = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("TraceWriter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ITraceWriter TraceWriter
        {
            get { return _traceWriter; }
            set 
            {
                if (_traceWriter != value)
                {
                    _traceWriter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Binder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Binder
        {
            get { return _binder; }
            set 
            {
                if (_binder != value)
                {
                    _binder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("SerializationBinder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object SerializationBinder
        {
            get { return _serializationBinder; }
            set 
            {
                if (_serializationBinder != value)
                {
                    _serializationBinder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Error
        {
            get { return _error; }
            set 
            {
                if (_error != value)
                {
                    _error = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Context", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StreamingContext Context
        {
            get { return _context; }
            set 
            {
                if (_context != value)
                {
                    _context = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("DateFormatString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateFormatString
        {
            get { return _dateFormatString; }
            set 
            {
                if (_dateFormatString != value)
                {
                    _dateFormatString = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MaxDepth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxDepth
        {
            get { return _maxDepth; }
            set 
            {
                if (_maxDepth != value)
                {
                    _maxDepth = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Formatting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonSerializerSettingsFormatting? Formatting
        {
            get { return _formatting; }
            set 
            {
                if (_formatting != value)
                {
                    _formatting = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("DateFormatHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonSerializerSettingsDateFormatHandling? DateFormatHandling
        {
            get { return _dateFormatHandling; }
            set 
            {
                if (_dateFormatHandling != value)
                {
                    _dateFormatHandling = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("DateTimeZoneHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonSerializerSettingsDateTimeZoneHandling? DateTimeZoneHandling
        {
            get { return _dateTimeZoneHandling; }
            set 
            {
                if (_dateTimeZoneHandling != value)
                {
                    _dateTimeZoneHandling = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("DateParseHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonSerializerSettingsDateParseHandling? DateParseHandling
        {
            get { return _dateParseHandling; }
            set 
            {
                if (_dateParseHandling != value)
                {
                    _dateParseHandling = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("FloatFormatHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonSerializerSettingsFloatFormatHandling? FloatFormatHandling
        {
            get { return _floatFormatHandling; }
            set 
            {
                if (_floatFormatHandling != value)
                {
                    _floatFormatHandling = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("FloatParseHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonSerializerSettingsFloatParseHandling? FloatParseHandling
        {
            get { return _floatParseHandling; }
            set 
            {
                if (_floatParseHandling != value)
                {
                    _floatParseHandling = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("StringEscapeHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonSerializerSettingsStringEscapeHandling? StringEscapeHandling
        {
            get { return _stringEscapeHandling; }
            set 
            {
                if (_stringEscapeHandling != value)
                {
                    _stringEscapeHandling = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Culture", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Culture
        {
            get { return _culture; }
            set 
            {
                if (_culture != value)
                {
                    _culture = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("CheckAdditionalContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CheckAdditionalContent
        {
            get { return _checkAdditionalContent; }
            set 
            {
                if (_checkAdditionalContent != value)
                {
                    _checkAdditionalContent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static JsonSerializerSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<JsonSerializerSettings>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Encoding : System.ComponentModel.INotifyPropertyChanged
    {
        private string _bodyName;
        private string _encodingName;
        private string _headerName;
        private string _webName;
        private int? _windowsCodePage;
        private bool? _isBrowserDisplay;
        private bool? _isBrowserSave;
        private bool? _isMailNewsDisplay;
        private bool? _isMailNewsSave;
        private bool? _isSingleByte;
        private EncoderFallback _encoderFallback;
        private DecoderFallback _decoderFallback;
        private bool? _isReadOnly;
        private int? _codePage;
    
        [Newtonsoft.Json.JsonProperty("BodyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BodyName
        {
            get { return _bodyName; }
            set 
            {
                if (_bodyName != value)
                {
                    _bodyName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("EncodingName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EncodingName
        {
            get { return _encodingName; }
            set 
            {
                if (_encodingName != value)
                {
                    _encodingName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("HeaderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HeaderName
        {
            get { return _headerName; }
            set 
            {
                if (_headerName != value)
                {
                    _headerName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("WebName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebName
        {
            get { return _webName; }
            set 
            {
                if (_webName != value)
                {
                    _webName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("WindowsCodePage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WindowsCodePage
        {
            get { return _windowsCodePage; }
            set 
            {
                if (_windowsCodePage != value)
                {
                    _windowsCodePage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsBrowserDisplay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsBrowserDisplay
        {
            get { return _isBrowserDisplay; }
            set 
            {
                if (_isBrowserDisplay != value)
                {
                    _isBrowserDisplay = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsBrowserSave", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsBrowserSave
        {
            get { return _isBrowserSave; }
            set 
            {
                if (_isBrowserSave != value)
                {
                    _isBrowserSave = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsMailNewsDisplay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsMailNewsDisplay
        {
            get { return _isMailNewsDisplay; }
            set 
            {
                if (_isMailNewsDisplay != value)
                {
                    _isMailNewsDisplay = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsMailNewsSave", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsMailNewsSave
        {
            get { return _isMailNewsSave; }
            set 
            {
                if (_isMailNewsSave != value)
                {
                    _isMailNewsSave = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsSingleByte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSingleByte
        {
            get { return _isSingleByte; }
            set 
            {
                if (_isSingleByte != value)
                {
                    _isSingleByte = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("EncoderFallback", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EncoderFallback EncoderFallback
        {
            get { return _encoderFallback; }
            set 
            {
                if (_encoderFallback != value)
                {
                    _encoderFallback = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("DecoderFallback", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DecoderFallback DecoderFallback
        {
            get { return _decoderFallback; }
            set 
            {
                if (_decoderFallback != value)
                {
                    _decoderFallback = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly
        {
            get { return _isReadOnly; }
            set 
            {
                if (_isReadOnly != value)
                {
                    _isReadOnly = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("CodePage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CodePage
        {
            get { return _codePage; }
            set 
            {
                if (_codePage != value)
                {
                    _codePage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Encoding FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Encoding>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class LoginResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private string _message;
        private bool? _isLoginSuccess;
        private string _nickName;
        private string _mobilePhone;
        private string _token;
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsLoginSuccess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsLoginSuccess
        {
            get { return _isLoginSuccess; }
            set 
            {
                if (_isLoginSuccess != value)
                {
                    _isLoginSuccess = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("NickName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NickName
        {
            get { return _nickName; }
            set 
            {
                if (_nickName != value)
                {
                    _nickName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MobilePhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MobilePhone
        {
            get { return _mobilePhone; }
            set 
            {
                if (_mobilePhone != value)
                {
                    _mobilePhone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token
        {
            get { return _token; }
            set 
            {
                if (_token != value)
                {
                    _token = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LoginResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoginResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ErrorInfo : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _code;
        private string _message;
        private string _details;
    
        /// <summary>错误代码</summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code
        {
            get { return _code; }
            set 
            {
                if (_code != value)
                {
                    _code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Error message</summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Error Details</summary>
        [Newtonsoft.Json.JsonProperty("Details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details
        {
            get { return _details; }
            set 
            {
                if (_details != value)
                {
                    _details = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ErrorInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorInfo>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class JsonConverter : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _canRead;
        private bool? _canWrite;
    
        [Newtonsoft.Json.JsonProperty("CanRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanRead
        {
            get { return _canRead; }
            set 
            {
                if (_canRead != value)
                {
                    _canRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("CanWrite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanWrite
        {
            get { return _canWrite; }
            set 
            {
                if (_canWrite != value)
                {
                    _canWrite = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static JsonConverter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<JsonConverter>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FuncOfIReferenceResolver : System.ComponentModel.INotifyPropertyChanged
    {
        private MethodInfo _method;
        private object _target;
    
        [Newtonsoft.Json.JsonProperty("Method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MethodInfo Method
        {
            get { return _method; }
            set 
            {
                if (_method != value)
                {
                    _method = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Target
        {
            get { return _target; }
            set 
            {
                if (_target != value)
                {
                    _target = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FuncOfIReferenceResolver FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FuncOfIReferenceResolver>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ITraceWriter : System.ComponentModel.INotifyPropertyChanged
    {
        private ITraceWriterLevelFilter? _levelFilter;
    
        [Newtonsoft.Json.JsonProperty("LevelFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ITraceWriterLevelFilter? LevelFilter
        {
            get { return _levelFilter; }
            set 
            {
                if (_levelFilter != value)
                {
                    _levelFilter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ITraceWriter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ITraceWriter>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StreamingContext : System.ComponentModel.INotifyPropertyChanged
    {
        private object _context;
        private StreamingContextState? _state;
    
        [Newtonsoft.Json.JsonProperty("Context", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Context
        {
            get { return _context; }
            set 
            {
                if (_context != value)
                {
                    _context = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StreamingContextState? State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StreamingContext FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StreamingContext>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EncoderFallback : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _maxCharCount;
    
        [Newtonsoft.Json.JsonProperty("MaxCharCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxCharCount
        {
            get { return _maxCharCount; }
            set 
            {
                if (_maxCharCount != value)
                {
                    _maxCharCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EncoderFallback FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EncoderFallback>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DecoderFallback : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _maxCharCount;
    
        [Newtonsoft.Json.JsonProperty("MaxCharCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxCharCount
        {
            get { return _maxCharCount; }
            set 
            {
                if (_maxCharCount != value)
                {
                    _maxCharCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DecoderFallback FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DecoderFallback>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MethodInfo : System.ComponentModel.INotifyPropertyChanged
    {
        private MethodInfoMemberType? _memberType;
        private string _returnType;
        private ParameterInfo _returnParameter;
        private object _returnTypeCustomAttributes;
        private MethodInfoMethodImplementationFlags? _methodImplementationFlags;
        private object _methodHandle;
        private MethodInfoAttributes? _attributes;
        private MethodInfoCallingConvention? _callingConvention;
        private bool? _isGenericMethodDefinition;
        private bool? _containsGenericParameters;
        private bool? _isGenericMethod;
        private bool? _isSecurityCritical;
        private bool? _isSecuritySafeCritical;
        private bool? _isSecurityTransparent;
        private bool? _isPublic;
        private bool? _isPrivate;
        private bool? _isFamily;
        private bool? _isAssembly;
        private bool? _isFamilyAndAssembly;
        private bool? _isFamilyOrAssembly;
        private bool? _isStatic;
        private bool? _isFinal;
        private bool? _isVirtual;
        private bool? _isHideBySig;
        private bool? _isAbstract;
        private bool? _isSpecialName;
        private bool? _isConstructor;
        private string _name;
        private string _declaringType;
        private string _reflectedType;
        private System.Collections.ObjectModel.ObservableCollection<CustomAttributeData> _customAttributes;
        private int? _metadataToken;
        private object _module;
    
        [Newtonsoft.Json.JsonProperty("MemberType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MethodInfoMemberType? MemberType
        {
            get { return _memberType; }
            set 
            {
                if (_memberType != value)
                {
                    _memberType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ReturnType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnType
        {
            get { return _returnType; }
            set 
            {
                if (_returnType != value)
                {
                    _returnType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ReturnParameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParameterInfo ReturnParameter
        {
            get { return _returnParameter; }
            set 
            {
                if (_returnParameter != value)
                {
                    _returnParameter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ReturnTypeCustomAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ReturnTypeCustomAttributes
        {
            get { return _returnTypeCustomAttributes; }
            set 
            {
                if (_returnTypeCustomAttributes != value)
                {
                    _returnTypeCustomAttributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MethodImplementationFlags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MethodInfoMethodImplementationFlags? MethodImplementationFlags
        {
            get { return _methodImplementationFlags; }
            set 
            {
                if (_methodImplementationFlags != value)
                {
                    _methodImplementationFlags = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MethodHandle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object MethodHandle
        {
            get { return _methodHandle; }
            set 
            {
                if (_methodHandle != value)
                {
                    _methodHandle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MethodInfoAttributes? Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("CallingConvention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MethodInfoCallingConvention? CallingConvention
        {
            get { return _callingConvention; }
            set 
            {
                if (_callingConvention != value)
                {
                    _callingConvention = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsGenericMethodDefinition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsGenericMethodDefinition
        {
            get { return _isGenericMethodDefinition; }
            set 
            {
                if (_isGenericMethodDefinition != value)
                {
                    _isGenericMethodDefinition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ContainsGenericParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ContainsGenericParameters
        {
            get { return _containsGenericParameters; }
            set 
            {
                if (_containsGenericParameters != value)
                {
                    _containsGenericParameters = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsGenericMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsGenericMethod
        {
            get { return _isGenericMethod; }
            set 
            {
                if (_isGenericMethod != value)
                {
                    _isGenericMethod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsSecurityCritical", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSecurityCritical
        {
            get { return _isSecurityCritical; }
            set 
            {
                if (_isSecurityCritical != value)
                {
                    _isSecurityCritical = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsSecuritySafeCritical", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSecuritySafeCritical
        {
            get { return _isSecuritySafeCritical; }
            set 
            {
                if (_isSecuritySafeCritical != value)
                {
                    _isSecuritySafeCritical = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsSecurityTransparent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSecurityTransparent
        {
            get { return _isSecurityTransparent; }
            set 
            {
                if (_isSecurityTransparent != value)
                {
                    _isSecurityTransparent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsPublic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPublic
        {
            get { return _isPublic; }
            set 
            {
                if (_isPublic != value)
                {
                    _isPublic = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsPrivate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPrivate
        {
            get { return _isPrivate; }
            set 
            {
                if (_isPrivate != value)
                {
                    _isPrivate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsFamily", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFamily
        {
            get { return _isFamily; }
            set 
            {
                if (_isFamily != value)
                {
                    _isFamily = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsAssembly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAssembly
        {
            get { return _isAssembly; }
            set 
            {
                if (_isAssembly != value)
                {
                    _isAssembly = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsFamilyAndAssembly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFamilyAndAssembly
        {
            get { return _isFamilyAndAssembly; }
            set 
            {
                if (_isFamilyAndAssembly != value)
                {
                    _isFamilyAndAssembly = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsFamilyOrAssembly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFamilyOrAssembly
        {
            get { return _isFamilyOrAssembly; }
            set 
            {
                if (_isFamilyOrAssembly != value)
                {
                    _isFamilyOrAssembly = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsStatic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsStatic
        {
            get { return _isStatic; }
            set 
            {
                if (_isStatic != value)
                {
                    _isStatic = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsFinal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFinal
        {
            get { return _isFinal; }
            set 
            {
                if (_isFinal != value)
                {
                    _isFinal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsVirtual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVirtual
        {
            get { return _isVirtual; }
            set 
            {
                if (_isVirtual != value)
                {
                    _isVirtual = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsHideBySig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHideBySig
        {
            get { return _isHideBySig; }
            set 
            {
                if (_isHideBySig != value)
                {
                    _isHideBySig = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsAbstract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAbstract
        {
            get { return _isAbstract; }
            set 
            {
                if (_isAbstract != value)
                {
                    _isAbstract = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsSpecialName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSpecialName
        {
            get { return _isSpecialName; }
            set 
            {
                if (_isSpecialName != value)
                {
                    _isSpecialName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsConstructor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsConstructor
        {
            get { return _isConstructor; }
            set 
            {
                if (_isConstructor != value)
                {
                    _isConstructor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("DeclaringType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeclaringType
        {
            get { return _declaringType; }
            set 
            {
                if (_declaringType != value)
                {
                    _declaringType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ReflectedType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReflectedType
        {
            get { return _reflectedType; }
            set 
            {
                if (_reflectedType != value)
                {
                    _reflectedType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("CustomAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CustomAttributeData> CustomAttributes
        {
            get { return _customAttributes; }
            set 
            {
                if (_customAttributes != value)
                {
                    _customAttributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MetadataToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MetadataToken
        {
            get { return _metadataToken; }
            set 
            {
                if (_metadataToken != value)
                {
                    _metadataToken = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Module", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Module
        {
            get { return _module; }
            set 
            {
                if (_module != value)
                {
                    _module = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MethodInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MethodInfo>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParameterInfo : System.ComponentModel.INotifyPropertyChanged
    {
        private string _parameterType;
        private string _name;
        private bool? _hasDefaultValue;
        private object _defaultValue;
        private object _rawDefaultValue;
        private int? _position;
        private ParameterInfoAttributes? _attributes;
        private MemberInfo _member;
        private bool? _isIn;
        private bool? _isOut;
        private bool? _isLcid;
        private bool? _isRetval;
        private bool? _isOptional;
        private int? _metadataToken;
        private System.Collections.ObjectModel.ObservableCollection<CustomAttributeData> _customAttributes;
    
        [Newtonsoft.Json.JsonProperty("ParameterType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParameterType
        {
            get { return _parameterType; }
            set 
            {
                if (_parameterType != value)
                {
                    _parameterType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("HasDefaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasDefaultValue
        {
            get { return _hasDefaultValue; }
            set 
            {
                if (_hasDefaultValue != value)
                {
                    _hasDefaultValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object DefaultValue
        {
            get { return _defaultValue; }
            set 
            {
                if (_defaultValue != value)
                {
                    _defaultValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("RawDefaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object RawDefaultValue
        {
            get { return _rawDefaultValue; }
            set 
            {
                if (_rawDefaultValue != value)
                {
                    _rawDefaultValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Position
        {
            get { return _position; }
            set 
            {
                if (_position != value)
                {
                    _position = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParameterInfoAttributes? Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Member", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MemberInfo Member
        {
            get { return _member; }
            set 
            {
                if (_member != value)
                {
                    _member = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsIn
        {
            get { return _isIn; }
            set 
            {
                if (_isIn != value)
                {
                    _isIn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsOut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOut
        {
            get { return _isOut; }
            set 
            {
                if (_isOut != value)
                {
                    _isOut = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsLcid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsLcid
        {
            get { return _isLcid; }
            set 
            {
                if (_isLcid != value)
                {
                    _isLcid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsRetval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRetval
        {
            get { return _isRetval; }
            set 
            {
                if (_isRetval != value)
                {
                    _isRetval = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsOptional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOptional
        {
            get { return _isOptional; }
            set 
            {
                if (_isOptional != value)
                {
                    _isOptional = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MetadataToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MetadataToken
        {
            get { return _metadataToken; }
            set 
            {
                if (_metadataToken != value)
                {
                    _metadataToken = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("CustomAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CustomAttributeData> CustomAttributes
        {
            get { return _customAttributes; }
            set 
            {
                if (_customAttributes != value)
                {
                    _customAttributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParameterInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParameterInfo>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CustomAttributeData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _attributeType;
        private ConstructorInfo _constructor;
        private System.Collections.ObjectModel.ObservableCollection<CustomAttributeTypedArgument> _constructorArguments;
        private System.Collections.ObjectModel.ObservableCollection<CustomAttributeNamedArgument> _namedArguments;
    
        [Newtonsoft.Json.JsonProperty("AttributeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributeType
        {
            get { return _attributeType; }
            set 
            {
                if (_attributeType != value)
                {
                    _attributeType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Constructor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConstructorInfo Constructor
        {
            get { return _constructor; }
            set 
            {
                if (_constructor != value)
                {
                    _constructor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ConstructorArguments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CustomAttributeTypedArgument> ConstructorArguments
        {
            get { return _constructorArguments; }
            set 
            {
                if (_constructorArguments != value)
                {
                    _constructorArguments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("NamedArguments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CustomAttributeNamedArgument> NamedArguments
        {
            get { return _namedArguments; }
            set 
            {
                if (_namedArguments != value)
                {
                    _namedArguments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomAttributeData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomAttributeData>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MemberInfo : System.ComponentModel.INotifyPropertyChanged
    {
        private MemberInfoMemberType? _memberType;
        private string _name;
        private string _declaringType;
        private string _reflectedType;
        private System.Collections.ObjectModel.ObservableCollection<CustomAttributeData> _customAttributes;
        private int? _metadataToken;
        private object _module;
    
        [Newtonsoft.Json.JsonProperty("MemberType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MemberInfoMemberType? MemberType
        {
            get { return _memberType; }
            set 
            {
                if (_memberType != value)
                {
                    _memberType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("DeclaringType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeclaringType
        {
            get { return _declaringType; }
            set 
            {
                if (_declaringType != value)
                {
                    _declaringType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ReflectedType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReflectedType
        {
            get { return _reflectedType; }
            set 
            {
                if (_reflectedType != value)
                {
                    _reflectedType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("CustomAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CustomAttributeData> CustomAttributes
        {
            get { return _customAttributes; }
            set 
            {
                if (_customAttributes != value)
                {
                    _customAttributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MetadataToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MetadataToken
        {
            get { return _metadataToken; }
            set 
            {
                if (_metadataToken != value)
                {
                    _metadataToken = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Module", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Module
        {
            get { return _module; }
            set 
            {
                if (_module != value)
                {
                    _module = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MemberInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MemberInfo>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ConstructorInfo : System.ComponentModel.INotifyPropertyChanged
    {
        private ConstructorInfoMemberType? _memberType;
        private ConstructorInfoMethodImplementationFlags? _methodImplementationFlags;
        private object _methodHandle;
        private ConstructorInfoAttributes? _attributes;
        private ConstructorInfoCallingConvention? _callingConvention;
        private bool? _isGenericMethodDefinition;
        private bool? _containsGenericParameters;
        private bool? _isGenericMethod;
        private bool? _isSecurityCritical;
        private bool? _isSecuritySafeCritical;
        private bool? _isSecurityTransparent;
        private bool? _isPublic;
        private bool? _isPrivate;
        private bool? _isFamily;
        private bool? _isAssembly;
        private bool? _isFamilyAndAssembly;
        private bool? _isFamilyOrAssembly;
        private bool? _isStatic;
        private bool? _isFinal;
        private bool? _isVirtual;
        private bool? _isHideBySig;
        private bool? _isAbstract;
        private bool? _isSpecialName;
        private bool? _isConstructor;
        private string _name;
        private string _declaringType;
        private string _reflectedType;
        private System.Collections.ObjectModel.ObservableCollection<CustomAttributeData> _customAttributes;
        private int? _metadataToken;
        private object _module;
    
        [Newtonsoft.Json.JsonProperty("MemberType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConstructorInfoMemberType? MemberType
        {
            get { return _memberType; }
            set 
            {
                if (_memberType != value)
                {
                    _memberType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MethodImplementationFlags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConstructorInfoMethodImplementationFlags? MethodImplementationFlags
        {
            get { return _methodImplementationFlags; }
            set 
            {
                if (_methodImplementationFlags != value)
                {
                    _methodImplementationFlags = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MethodHandle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object MethodHandle
        {
            get { return _methodHandle; }
            set 
            {
                if (_methodHandle != value)
                {
                    _methodHandle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConstructorInfoAttributes? Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("CallingConvention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConstructorInfoCallingConvention? CallingConvention
        {
            get { return _callingConvention; }
            set 
            {
                if (_callingConvention != value)
                {
                    _callingConvention = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsGenericMethodDefinition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsGenericMethodDefinition
        {
            get { return _isGenericMethodDefinition; }
            set 
            {
                if (_isGenericMethodDefinition != value)
                {
                    _isGenericMethodDefinition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ContainsGenericParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ContainsGenericParameters
        {
            get { return _containsGenericParameters; }
            set 
            {
                if (_containsGenericParameters != value)
                {
                    _containsGenericParameters = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsGenericMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsGenericMethod
        {
            get { return _isGenericMethod; }
            set 
            {
                if (_isGenericMethod != value)
                {
                    _isGenericMethod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsSecurityCritical", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSecurityCritical
        {
            get { return _isSecurityCritical; }
            set 
            {
                if (_isSecurityCritical != value)
                {
                    _isSecurityCritical = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsSecuritySafeCritical", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSecuritySafeCritical
        {
            get { return _isSecuritySafeCritical; }
            set 
            {
                if (_isSecuritySafeCritical != value)
                {
                    _isSecuritySafeCritical = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsSecurityTransparent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSecurityTransparent
        {
            get { return _isSecurityTransparent; }
            set 
            {
                if (_isSecurityTransparent != value)
                {
                    _isSecurityTransparent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsPublic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPublic
        {
            get { return _isPublic; }
            set 
            {
                if (_isPublic != value)
                {
                    _isPublic = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsPrivate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPrivate
        {
            get { return _isPrivate; }
            set 
            {
                if (_isPrivate != value)
                {
                    _isPrivate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsFamily", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFamily
        {
            get { return _isFamily; }
            set 
            {
                if (_isFamily != value)
                {
                    _isFamily = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsAssembly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAssembly
        {
            get { return _isAssembly; }
            set 
            {
                if (_isAssembly != value)
                {
                    _isAssembly = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsFamilyAndAssembly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFamilyAndAssembly
        {
            get { return _isFamilyAndAssembly; }
            set 
            {
                if (_isFamilyAndAssembly != value)
                {
                    _isFamilyAndAssembly = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsFamilyOrAssembly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFamilyOrAssembly
        {
            get { return _isFamilyOrAssembly; }
            set 
            {
                if (_isFamilyOrAssembly != value)
                {
                    _isFamilyOrAssembly = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsStatic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsStatic
        {
            get { return _isStatic; }
            set 
            {
                if (_isStatic != value)
                {
                    _isStatic = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsFinal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFinal
        {
            get { return _isFinal; }
            set 
            {
                if (_isFinal != value)
                {
                    _isFinal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsVirtual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVirtual
        {
            get { return _isVirtual; }
            set 
            {
                if (_isVirtual != value)
                {
                    _isVirtual = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsHideBySig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHideBySig
        {
            get { return _isHideBySig; }
            set 
            {
                if (_isHideBySig != value)
                {
                    _isHideBySig = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsAbstract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAbstract
        {
            get { return _isAbstract; }
            set 
            {
                if (_isAbstract != value)
                {
                    _isAbstract = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsSpecialName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSpecialName
        {
            get { return _isSpecialName; }
            set 
            {
                if (_isSpecialName != value)
                {
                    _isSpecialName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsConstructor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsConstructor
        {
            get { return _isConstructor; }
            set 
            {
                if (_isConstructor != value)
                {
                    _isConstructor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("DeclaringType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeclaringType
        {
            get { return _declaringType; }
            set 
            {
                if (_declaringType != value)
                {
                    _declaringType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ReflectedType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReflectedType
        {
            get { return _reflectedType; }
            set 
            {
                if (_reflectedType != value)
                {
                    _reflectedType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("CustomAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CustomAttributeData> CustomAttributes
        {
            get { return _customAttributes; }
            set 
            {
                if (_customAttributes != value)
                {
                    _customAttributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MetadataToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MetadataToken
        {
            get { return _metadataToken; }
            set 
            {
                if (_metadataToken != value)
                {
                    _metadataToken = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Module", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Module
        {
            get { return _module; }
            set 
            {
                if (_module != value)
                {
                    _module = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ConstructorInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConstructorInfo>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CustomAttributeTypedArgument : System.ComponentModel.INotifyPropertyChanged
    {
        private string _argumentType;
        private object _value;
    
        [Newtonsoft.Json.JsonProperty("ArgumentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArgumentType
        {
            get { return _argumentType; }
            set 
            {
                if (_argumentType != value)
                {
                    _argumentType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomAttributeTypedArgument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomAttributeTypedArgument>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CustomAttributeNamedArgument : System.ComponentModel.INotifyPropertyChanged
    {
        private MemberInfo _memberInfo;
        private CustomAttributeTypedArgument _typedValue;
        private string _memberName;
        private bool? _isField;
    
        [Newtonsoft.Json.JsonProperty("MemberInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MemberInfo MemberInfo
        {
            get { return _memberInfo; }
            set 
            {
                if (_memberInfo != value)
                {
                    _memberInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("TypedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomAttributeTypedArgument TypedValue
        {
            get { return _typedValue; }
            set 
            {
                if (_typedValue != value)
                {
                    _typedValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MemberName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MemberName
        {
            get { return _memberName; }
            set 
            {
                if (_memberName != value)
                {
                    _memberName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsField
        {
            get { return _isField; }
            set 
            {
                if (_isField != value)
                {
                    _isField = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomAttributeNamedArgument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomAttributeNamedArgument>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProcessRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _service;
        private string _method;
        private string _paramter1;
        private string _paramter2;
        private string _paramter3;
        private string _paramter4;
        private string _paramter5;
    
        [Newtonsoft.Json.JsonProperty("Service", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Service
        {
            get { return _service; }
            set 
            {
                if (_service != value)
                {
                    _service = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Method
        {
            get { return _method; }
            set 
            {
                if (_method != value)
                {
                    _method = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Paramter1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Paramter1
        {
            get { return _paramter1; }
            set 
            {
                if (_paramter1 != value)
                {
                    _paramter1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Paramter2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Paramter2
        {
            get { return _paramter2; }
            set 
            {
                if (_paramter2 != value)
                {
                    _paramter2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Paramter3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Paramter3
        {
            get { return _paramter3; }
            set 
            {
                if (_paramter3 != value)
                {
                    _paramter3 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Paramter4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Paramter4
        {
            get { return _paramter4; }
            set 
            {
                if (_paramter4 != value)
                {
                    _paramter4 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Paramter5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Paramter5
        {
            get { return _paramter5; }
            set 
            {
                if (_paramter5 != value)
                {
                    _paramter5 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProcessRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProcessRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class JsonResultOfProcessResult : System.ComponentModel.INotifyPropertyChanged
    {
        private ProcessResult _content;
        private JsonSerializerSettings _serializerSettings;
        private Encoding _encoding;
        private object _request;
    
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcessResult Content
        {
            get { return _content; }
            set 
            {
                if (_content != value)
                {
                    _content = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("SerializerSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonSerializerSettings SerializerSettings
        {
            get { return _serializerSettings; }
            set 
            {
                if (_serializerSettings != value)
                {
                    _serializerSettings = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Encoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Encoding Encoding
        {
            get { return _encoding; }
            set 
            {
                if (_encoding != value)
                {
                    _encoding = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Request
        {
            get { return _request; }
            set 
            {
                if (_request != value)
                {
                    _request = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static JsonResultOfProcessResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<JsonResultOfProcessResult>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProcessResult : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _isSuccess;
        private int? _code;
        private string _message;
        private object _result;
    
        [Newtonsoft.Json.JsonProperty("IsSuccess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSuccess
        {
            get { return _isSuccess; }
            set 
            {
                if (_isSuccess != value)
                {
                    _isSuccess = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code
        {
            get { return _code; }
            set 
            {
                if (_code != value)
                {
                    _code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Result
        {
            get { return _result; }
            set 
            {
                if (_result != value)
                {
                    _result = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProcessResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProcessResult>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _value1;
        private string _value2;
        private string _token;
    
        [Newtonsoft.Json.JsonProperty("Value1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value1
        {
            get { return _value1; }
            set 
            {
                if (_value1 != value)
                {
                    _value1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Value2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value2
        {
            get { return _value2; }
            set 
            {
                if (_value2 != value)
                {
                    _value2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token
        {
            get { return _token; }
            set 
            {
                if (_token != value)
                {
                    _token = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GetRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class JsonResultOfGetResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private GetResponse _content;
        private JsonSerializerSettings _serializerSettings;
        private Encoding _encoding;
        private object _request;
    
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetResponse Content
        {
            get { return _content; }
            set 
            {
                if (_content != value)
                {
                    _content = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("SerializerSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonSerializerSettings SerializerSettings
        {
            get { return _serializerSettings; }
            set 
            {
                if (_serializerSettings != value)
                {
                    _serializerSettings = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Encoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Encoding Encoding
        {
            get { return _encoding; }
            set 
            {
                if (_encoding != value)
                {
                    _encoding = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Request
        {
            get { return _request; }
            set 
            {
                if (_request != value)
                {
                    _request = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static JsonResultOfGetResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<JsonResultOfGetResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private string _value1;
        private string _value2;
    
        [Newtonsoft.Json.JsonProperty("Value1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value1
        {
            get { return _value1; }
            set 
            {
                if (_value1 != value)
                {
                    _value1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Value2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value2
        {
            get { return _value2; }
            set 
            {
                if (_value2 != value)
                {
                    _value2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GetResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class WebAPIResponseOfGetResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _success;
        private GetResponse _result;
        private ErrorInfo _error;
    
        /// <summary>是否成功</summary>
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success
        {
            get { return _success; }
            set 
            {
                if (_success != value)
                {
                    _success = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>返回结果</summary>
        [Newtonsoft.Json.JsonProperty("Result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetResponse Result
        {
            get { return _result; }
            set 
            {
                if (_result != value)
                {
                    _result = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorInfo Error
        {
            get { return _error; }
            set 
            {
                if (_error != value)
                {
                    _error = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WebAPIResponseOfGetResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WebAPIResponseOfGetResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JsonSerializerSettingsReferenceLoopHandling
    {
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Ignore")]
        Ignore = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Serialize")]
        Serialize = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JsonSerializerSettingsMissingMemberHandling
    {
        [System.Runtime.Serialization.EnumMember(Value = "Ignore")]
        Ignore = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JsonSerializerSettingsObjectCreationHandling
    {
        [System.Runtime.Serialization.EnumMember(Value = "Auto")]
        Auto = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Reuse")]
        Reuse = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Replace")]
        Replace = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JsonSerializerSettingsNullValueHandling
    {
        [System.Runtime.Serialization.EnumMember(Value = "Include")]
        Include = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Ignore")]
        Ignore = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JsonSerializerSettingsDefaultValueHandling
    {
        [System.Runtime.Serialization.EnumMember(Value = "Include")]
        Include = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Ignore")]
        Ignore = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Populate")]
        Populate = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "IgnoreAndPopulate")]
        IgnoreAndPopulate = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JsonSerializerSettingsPreserveReferencesHandling
    {
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Objects")]
        Objects = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Arrays")]
        Arrays = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "All")]
        All = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JsonSerializerSettingsTypeNameHandling
    {
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Objects")]
        Objects = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Arrays")]
        Arrays = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "All")]
        All = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Auto")]
        Auto = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JsonSerializerSettingsMetadataPropertyHandling
    {
        [System.Runtime.Serialization.EnumMember(Value = "Default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ReadAhead")]
        ReadAhead = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Ignore")]
        Ignore = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JsonSerializerSettingsTypeNameAssemblyFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = "Simple")]
        Simple = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Full")]
        Full = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JsonSerializerSettingsTypeNameAssemblyFormatHandling
    {
        [System.Runtime.Serialization.EnumMember(Value = "Simple")]
        Simple = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Full")]
        Full = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JsonSerializerSettingsConstructorHandling
    {
        [System.Runtime.Serialization.EnumMember(Value = "Default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "AllowNonPublicDefaultConstructor")]
        AllowNonPublicDefaultConstructor = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JsonSerializerSettingsFormatting
    {
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Indented")]
        Indented = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JsonSerializerSettingsDateFormatHandling
    {
        [System.Runtime.Serialization.EnumMember(Value = "IsoDateFormat")]
        IsoDateFormat = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MicrosoftDateFormat")]
        MicrosoftDateFormat = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JsonSerializerSettingsDateTimeZoneHandling
    {
        [System.Runtime.Serialization.EnumMember(Value = "Local")]
        Local = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Utc")]
        Utc = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Unspecified")]
        Unspecified = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "RoundtripKind")]
        RoundtripKind = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JsonSerializerSettingsDateParseHandling
    {
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DateTime")]
        DateTime = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DateTimeOffset")]
        DateTimeOffset = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JsonSerializerSettingsFloatFormatHandling
    {
        [System.Runtime.Serialization.EnumMember(Value = "String")]
        String = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Symbol")]
        Symbol = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DefaultValue")]
        DefaultValue = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JsonSerializerSettingsFloatParseHandling
    {
        [System.Runtime.Serialization.EnumMember(Value = "Double")]
        Double = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Decimal")]
        Decimal = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JsonSerializerSettingsStringEscapeHandling
    {
        [System.Runtime.Serialization.EnumMember(Value = "Default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "EscapeNonAscii")]
        EscapeNonAscii = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "EscapeHtml")]
        EscapeHtml = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ITraceWriterLevelFilter
    {
        [System.Runtime.Serialization.EnumMember(Value = "Off")]
        Off = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Warning")]
        Warning = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Info")]
        Info = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Verbose")]
        Verbose = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StreamingContextState
    {
        [System.Runtime.Serialization.EnumMember(Value = "CrossProcess")]
        CrossProcess = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CrossMachine")]
        CrossMachine = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "File")]
        File = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Persistence")]
        Persistence = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Remoting")]
        Remoting = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Other")]
        Other = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Clone")]
        Clone = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "CrossAppDomain")]
        CrossAppDomain = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "All")]
        All = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MethodInfoMemberType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Constructor")]
        Constructor = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Event")]
        Event = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Field")]
        Field = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Method")]
        Method = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Property")]
        Property = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "TypeInfo")]
        TypeInfo = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Custom")]
        Custom = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "NestedType")]
        NestedType = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "All")]
        All = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MethodInfoMethodImplementationFlags
    {
        [System.Runtime.Serialization.EnumMember(Value = "CodeTypeMask")]
        CodeTypeMask = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "IL")]
        IL = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Native")]
        Native = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "OPTIL")]
        OPTIL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Runtime")]
        Runtime = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManagedMask")]
        ManagedMask = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Unmanaged")]
        Unmanaged = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Managed")]
        Managed = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "ForwardRef")]
        ForwardRef = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "PreserveSig")]
        PreserveSig = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "InternalCall")]
        InternalCall = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "Synchronized")]
        Synchronized = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoInlining")]
        NoInlining = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "AggressiveInlining")]
        AggressiveInlining = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoOptimization")]
        NoOptimization = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "MaxMethodImplVal")]
        MaxMethodImplVal = 15,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MethodInfoAttributes
    {
        [System.Runtime.Serialization.EnumMember(Value = "MemberAccessMask")]
        MemberAccessMask = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PrivateScope")]
        PrivateScope = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Private")]
        Private = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "FamANDAssem")]
        FamANDAssem = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Assembly")]
        Assembly = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Family")]
        Family = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "FamORAssem")]
        FamORAssem = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Public")]
        Public = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Static")]
        Static = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Final")]
        Final = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "Virtual")]
        Virtual = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "HideBySig")]
        HideBySig = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "CheckAccessOnOverride")]
        CheckAccessOnOverride = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "VtableLayoutMask")]
        VtableLayoutMask = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "ReuseSlot")]
        ReuseSlot = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "NewSlot")]
        NewSlot = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "Abstract")]
        Abstract = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "SpecialName")]
        SpecialName = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = "PinvokeImpl")]
        PinvokeImpl = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = "UnmanagedExport")]
        UnmanagedExport = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = "RTSpecialName")]
        RTSpecialName = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = "ReservedMask")]
        ReservedMask = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = "HasSecurity")]
        HasSecurity = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = "RequireSecObject")]
        RequireSecObject = 23,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MethodInfoCallingConvention
    {
        [System.Runtime.Serialization.EnumMember(Value = "Standard")]
        Standard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "VarArgs")]
        VarArgs = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Any")]
        Any = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "HasThis")]
        HasThis = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ExplicitThis")]
        ExplicitThis = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ParameterInfoAttributes
    {
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "In")]
        In = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Out")]
        Out = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Lcid")]
        Lcid = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Retval")]
        Retval = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Optional")]
        Optional = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ReservedMask")]
        ReservedMask = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "HasDefault")]
        HasDefault = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "HasFieldMarshal")]
        HasFieldMarshal = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Reserved3")]
        Reserved3 = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "Reserved4")]
        Reserved4 = 10,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MemberInfoMemberType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Constructor")]
        Constructor = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Event")]
        Event = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Field")]
        Field = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Method")]
        Method = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Property")]
        Property = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "TypeInfo")]
        TypeInfo = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Custom")]
        Custom = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "NestedType")]
        NestedType = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "All")]
        All = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ConstructorInfoMemberType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Constructor")]
        Constructor = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Event")]
        Event = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Field")]
        Field = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Method")]
        Method = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Property")]
        Property = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "TypeInfo")]
        TypeInfo = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Custom")]
        Custom = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "NestedType")]
        NestedType = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "All")]
        All = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ConstructorInfoMethodImplementationFlags
    {
        [System.Runtime.Serialization.EnumMember(Value = "CodeTypeMask")]
        CodeTypeMask = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "IL")]
        IL = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Native")]
        Native = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "OPTIL")]
        OPTIL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Runtime")]
        Runtime = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManagedMask")]
        ManagedMask = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Unmanaged")]
        Unmanaged = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Managed")]
        Managed = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "ForwardRef")]
        ForwardRef = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "PreserveSig")]
        PreserveSig = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "InternalCall")]
        InternalCall = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "Synchronized")]
        Synchronized = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoInlining")]
        NoInlining = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "AggressiveInlining")]
        AggressiveInlining = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "NoOptimization")]
        NoOptimization = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "MaxMethodImplVal")]
        MaxMethodImplVal = 15,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ConstructorInfoAttributes
    {
        [System.Runtime.Serialization.EnumMember(Value = "MemberAccessMask")]
        MemberAccessMask = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PrivateScope")]
        PrivateScope = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Private")]
        Private = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "FamANDAssem")]
        FamANDAssem = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Assembly")]
        Assembly = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Family")]
        Family = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "FamORAssem")]
        FamORAssem = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Public")]
        Public = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Static")]
        Static = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Final")]
        Final = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "Virtual")]
        Virtual = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "HideBySig")]
        HideBySig = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "CheckAccessOnOverride")]
        CheckAccessOnOverride = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "VtableLayoutMask")]
        VtableLayoutMask = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "ReuseSlot")]
        ReuseSlot = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "NewSlot")]
        NewSlot = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "Abstract")]
        Abstract = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "SpecialName")]
        SpecialName = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = "PinvokeImpl")]
        PinvokeImpl = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = "UnmanagedExport")]
        UnmanagedExport = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = "RTSpecialName")]
        RTSpecialName = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = "ReservedMask")]
        ReservedMask = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = "HasSecurity")]
        HasSecurity = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = "RequireSecObject")]
        RequireSecObject = 23,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.72.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ConstructorInfoCallingConvention
    {
        [System.Runtime.Serialization.EnumMember(Value = "Standard")]
        Standard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "VarArgs")]
        VarArgs = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Any")]
        Any = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "HasThis")]
        HasThis = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ExplicitThis")]
        ExplicitThis = 4,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.19.1.0 (NJsonSchema v9.10.72.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.19.1.0 (NJsonSchema v9.10.72.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}