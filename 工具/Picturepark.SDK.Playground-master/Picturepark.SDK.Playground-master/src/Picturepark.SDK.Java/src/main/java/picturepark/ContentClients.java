/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.InputStream;
import java.io.IOException;
import java.util.List;
import picturepark.models.BusinessProcess;
import picturepark.models.ContentAggregationRequest;
import picturepark.models.ContentCreateManyRequest;
import picturepark.models.ContentCreateRequest;
import picturepark.models.ContentDeactivateRequest;
import picturepark.models.ContentDetail;
import picturepark.models.ContentDownloadLinkCreateRequest;
import picturepark.models.ContentFieldsFilterUpdateRequest;
import picturepark.models.ContentFieldsUpdateRequest;
import picturepark.models.ContentFileUpdateRequest;
import picturepark.models.ContentMetadataUpdateManyRequest;
import picturepark.models.ContentMetadataUpdateRequest;
import picturepark.models.ContentOwnershipTransferRequest;
import picturepark.models.ContentPermissionsUpdateRequest;
import picturepark.models.ContentReactivateRequest;
import picturepark.models.ContentSearchRequest;
import picturepark.models.ContentSearchResult;
import picturepark.models.ContentsOwnershipTransferRequest;
import picturepark.models.DownloadLink;
import picturepark.models.ObjectAggregationResult;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ContentClients.
 */
public interface ContentClients {
    /**
     * Get detail - single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    ContentDetail get(String contentId, String resolve);

    /**
     * Get detail - single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ContentDetail> getAsync(String contentId, String resolve, final ServiceCallback<ContentDetail> serviceCallback);

    /**
     * Get detail - single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ContentDetail> getAsync(String contentId, String resolve);

    /**
     * Get detail - single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ServiceResponse<ContentDetail>> getWithServiceResponseAsync(String contentId, String resolve);
    /**
     * Get detail - single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    ContentDetail get(String contentId, String resolve, String patterns);

    /**
     * Get detail - single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ContentDetail> getAsync(String contentId, String resolve, String patterns, final ServiceCallback<ContentDetail> serviceCallback);

    /**
     * Get detail - single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ContentDetail> getAsync(String contentId, String resolve, String patterns);

    /**
     * Get detail - single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ServiceResponse<ContentDetail>> getWithServiceResponseAsync(String contentId, String resolve, String patterns);

    /**
     * Get detail - many.
     * Gets multiple content documents by ids.
     *
     * @param ids List of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ContentDetail&gt; object if successful.
     */
    List<ContentDetail> getMany(String ids, String resolve);

    /**
     * Get detail - many.
     * Gets multiple content documents by ids.
     *
     * @param ids List of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<ContentDetail>> getManyAsync(String ids, String resolve, final ServiceCallback<List<ContentDetail>> serviceCallback);

    /**
     * Get detail - many.
     * Gets multiple content documents by ids.
     *
     * @param ids List of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ContentDetail&gt; object
     */
    Observable<List<ContentDetail>> getManyAsync(String ids, String resolve);

    /**
     * Get detail - many.
     * Gets multiple content documents by ids.
     *
     * @param ids List of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ContentDetail&gt; object
     */
    Observable<ServiceResponse<List<ContentDetail>>> getManyWithServiceResponseAsync(String ids, String resolve);
    /**
     * Get detail - many.
     * Gets multiple content documents by ids.
     *
     * @param ids List of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ContentDetail&gt; object if successful.
     */
    List<ContentDetail> getMany(String ids, String resolve, String patterns);

    /**
     * Get detail - many.
     * Gets multiple content documents by ids.
     *
     * @param ids List of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<ContentDetail>> getManyAsync(String ids, String resolve, String patterns, final ServiceCallback<List<ContentDetail>> serviceCallback);

    /**
     * Get detail - many.
     * Gets multiple content documents by ids.
     *
     * @param ids List of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ContentDetail&gt; object
     */
    Observable<List<ContentDetail>> getManyAsync(String ids, String resolve, String patterns);

    /**
     * Get detail - many.
     * Gets multiple content documents by ids.
     *
     * @param ids List of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ContentDetail&gt; object
     */
    Observable<ServiceResponse<List<ContentDetail>>> getManyWithServiceResponseAsync(String ids, String resolve, String patterns);

    /**
     * Create - many.
     * Create multiple file-less content items. To import files, see [Transfer](#section/Transfer)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentCreateManyRequest The content create many request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    BusinessProcess createMany(ContentCreateManyRequest contentCreateManyRequest);

    /**
     * Create - many.
     * Create multiple file-less content items. To import files, see [Transfer](#section/Transfer)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentCreateManyRequest The content create many request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcess> createManyAsync(ContentCreateManyRequest contentCreateManyRequest, final ServiceCallback<BusinessProcess> serviceCallback);

    /**
     * Create - many.
     * Create multiple file-less content items. To import files, see [Transfer](#section/Transfer)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentCreateManyRequest The content create many request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<BusinessProcess> createManyAsync(ContentCreateManyRequest contentCreateManyRequest);

    /**
     * Create - many.
     * Create multiple file-less content items. To import files, see [Transfer](#section/Transfer)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentCreateManyRequest The content create many request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<ServiceResponse<BusinessProcess>> createManyWithServiceResponseAsync(ContentCreateManyRequest contentCreateManyRequest);

    /**
     * Search.
     * Searches contents as specified in the search request.
     *
     * @param contentSearchRequest The content search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentSearchResult object if successful.
     */
    ContentSearchResult search(ContentSearchRequest contentSearchRequest);

    /**
     * Search.
     * Searches contents as specified in the search request.
     *
     * @param contentSearchRequest The content search request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ContentSearchResult> searchAsync(ContentSearchRequest contentSearchRequest, final ServiceCallback<ContentSearchResult> serviceCallback);

    /**
     * Search.
     * Searches contents as specified in the search request.
     *
     * @param contentSearchRequest The content search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentSearchResult object
     */
    Observable<ContentSearchResult> searchAsync(ContentSearchRequest contentSearchRequest);

    /**
     * Search.
     * Searches contents as specified in the search request.
     *
     * @param contentSearchRequest The content search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentSearchResult object
     */
    Observable<ServiceResponse<ContentSearchResult>> searchWithServiceResponseAsync(ContentSearchRequest contentSearchRequest);

    /**
     * Search by channel.
     * Searches contents as specified in the search request and limits the search results to the specified channel.
     *
     * @param channelId The channel id.
     * @param contentSearchRequest The content search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentSearchResult object if successful.
     */
    ContentSearchResult searchByChannel(String channelId, ContentSearchRequest contentSearchRequest);

    /**
     * Search by channel.
     * Searches contents as specified in the search request and limits the search results to the specified channel.
     *
     * @param channelId The channel id.
     * @param contentSearchRequest The content search request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ContentSearchResult> searchByChannelAsync(String channelId, ContentSearchRequest contentSearchRequest, final ServiceCallback<ContentSearchResult> serviceCallback);

    /**
     * Search by channel.
     * Searches contents as specified in the search request and limits the search results to the specified channel.
     *
     * @param channelId The channel id.
     * @param contentSearchRequest The content search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentSearchResult object
     */
    Observable<ContentSearchResult> searchByChannelAsync(String channelId, ContentSearchRequest contentSearchRequest);

    /**
     * Search by channel.
     * Searches contents as specified in the search request and limits the search results to the specified channel.
     *
     * @param channelId The channel id.
     * @param contentSearchRequest The content search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentSearchResult object
     */
    Observable<ServiceResponse<ContentSearchResult>> searchByChannelWithServiceResponseAsync(String channelId, ContentSearchRequest contentSearchRequest);

    /**
     * Aggregate.
     * Aggregates content fields as specified in the aggregation request.
     *
     * @param contentAggregationRequest The aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ObjectAggregationResult object if successful.
     */
    ObjectAggregationResult aggregate(ContentAggregationRequest contentAggregationRequest);

    /**
     * Aggregate.
     * Aggregates content fields as specified in the aggregation request.
     *
     * @param contentAggregationRequest The aggregation request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ObjectAggregationResult> aggregateAsync(ContentAggregationRequest contentAggregationRequest, final ServiceCallback<ObjectAggregationResult> serviceCallback);

    /**
     * Aggregate.
     * Aggregates content fields as specified in the aggregation request.
     *
     * @param contentAggregationRequest The aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ObjectAggregationResult object
     */
    Observable<ObjectAggregationResult> aggregateAsync(ContentAggregationRequest contentAggregationRequest);

    /**
     * Aggregate.
     * Aggregates content fields as specified in the aggregation request.
     *
     * @param contentAggregationRequest The aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ObjectAggregationResult object
     */
    Observable<ServiceResponse<ObjectAggregationResult>> aggregateWithServiceResponseAsync(ContentAggregationRequest contentAggregationRequest);

    /**
     * Aggregate by channel.
     * Aggregates content fields as specified in the aggregation request and limits the aggregation results to the specified channel.
     *
     * @param channelId The channel id
     * @param contentAggregationRequest The content aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ObjectAggregationResult object if successful.
     */
    ObjectAggregationResult aggregateByChannel(String channelId, ContentAggregationRequest contentAggregationRequest);

    /**
     * Aggregate by channel.
     * Aggregates content fields as specified in the aggregation request and limits the aggregation results to the specified channel.
     *
     * @param channelId The channel id
     * @param contentAggregationRequest The content aggregation request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ObjectAggregationResult> aggregateByChannelAsync(String channelId, ContentAggregationRequest contentAggregationRequest, final ServiceCallback<ObjectAggregationResult> serviceCallback);

    /**
     * Aggregate by channel.
     * Aggregates content fields as specified in the aggregation request and limits the aggregation results to the specified channel.
     *
     * @param channelId The channel id
     * @param contentAggregationRequest The content aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ObjectAggregationResult object
     */
    Observable<ObjectAggregationResult> aggregateByChannelAsync(String channelId, ContentAggregationRequest contentAggregationRequest);

    /**
     * Aggregate by channel.
     * Aggregates content fields as specified in the aggregation request and limits the aggregation results to the specified channel.
     *
     * @param channelId The channel id
     * @param contentAggregationRequest The content aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ObjectAggregationResult object
     */
    Observable<ServiceResponse<ObjectAggregationResult>> aggregateByChannelWithServiceResponseAsync(String channelId, ContentAggregationRequest contentAggregationRequest);

    /**
     * Create download link.
     * Creates a download link for one or more contents.
     *
     * @param request The content download link request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DownloadLink object if successful.
     */
    DownloadLink createDownloadLink(ContentDownloadLinkCreateRequest request);

    /**
     * Create download link.
     * Creates a download link for one or more contents.
     *
     * @param request The content download link request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<DownloadLink> createDownloadLinkAsync(ContentDownloadLinkCreateRequest request, final ServiceCallback<DownloadLink> serviceCallback);

    /**
     * Create download link.
     * Creates a download link for one or more contents.
     *
     * @param request The content download link request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DownloadLink object
     */
    Observable<DownloadLink> createDownloadLinkAsync(ContentDownloadLinkCreateRequest request);

    /**
     * Create download link.
     * Creates a download link for one or more contents.
     *
     * @param request The content download link request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DownloadLink object
     */
    Observable<ServiceResponse<DownloadLink>> createDownloadLinkWithServiceResponseAsync(ContentDownloadLinkCreateRequest request);

    /**
     * Download output.
     * Download single content in a specific outputformat. To resize images on download specify target width &amp;amp; height. To download only a portion of the file, specify the range parameter.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    InputStream download(String contentId, String outputFormatId);

    /**
     * Download output.
     * Download single content in a specific outputformat. To resize images on download specify target width &amp;amp; height. To download only a portion of the file, specify the range parameter.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<InputStream> downloadAsync(String contentId, String outputFormatId, final ServiceCallback<InputStream> serviceCallback);

    /**
     * Download output.
     * Download single content in a specific outputformat. To resize images on download specify target width &amp;amp; height. To download only a portion of the file, specify the range parameter.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    Observable<InputStream> downloadAsync(String contentId, String outputFormatId);

    /**
     * Download output.
     * Download single content in a specific outputformat. To resize images on download specify target width &amp;amp; height. To download only a portion of the file, specify the range parameter.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    Observable<ServiceResponse<InputStream>> downloadWithServiceResponseAsync(String contentId, String outputFormatId);
    /**
     * Download output.
     * Download single content in a specific outputformat. To resize images on download specify target width &amp;amp; height. To download only a portion of the file, specify the range parameter.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @param width Optional width in pixels to resize image
     * @param height Optional height in pixels to resize image
     * @param range The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    InputStream download(String contentId, String outputFormatId, String width, String height, String range);

    /**
     * Download output.
     * Download single content in a specific outputformat. To resize images on download specify target width &amp;amp; height. To download only a portion of the file, specify the range parameter.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @param width Optional width in pixels to resize image
     * @param height Optional height in pixels to resize image
     * @param range The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<InputStream> downloadAsync(String contentId, String outputFormatId, String width, String height, String range, final ServiceCallback<InputStream> serviceCallback);

    /**
     * Download output.
     * Download single content in a specific outputformat. To resize images on download specify target width &amp;amp; height. To download only a portion of the file, specify the range parameter.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @param width Optional width in pixels to resize image
     * @param height Optional height in pixels to resize image
     * @param range The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    Observable<InputStream> downloadAsync(String contentId, String outputFormatId, String width, String height, String range);

    /**
     * Download output.
     * Download single content in a specific outputformat. To resize images on download specify target width &amp;amp; height. To download only a portion of the file, specify the range parameter.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @param width Optional width in pixels to resize image
     * @param height Optional height in pixels to resize image
     * @param range The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    Observable<ServiceResponse<InputStream>> downloadWithServiceResponseAsync(String contentId, String outputFormatId, String width, String height, String range);

    /**
     * Download thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large. Possible values include: 'Small', 'Medium', 'Large'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    InputStream downloadThumbnail(String contentId, String size);

    /**
     * Download thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large. Possible values include: 'Small', 'Medium', 'Large'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<InputStream> downloadThumbnailAsync(String contentId, String size, final ServiceCallback<InputStream> serviceCallback);

    /**
     * Download thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large. Possible values include: 'Small', 'Medium', 'Large'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    Observable<InputStream> downloadThumbnailAsync(String contentId, String size);

    /**
     * Download thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large. Possible values include: 'Small', 'Medium', 'Large'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    Observable<ServiceResponse<InputStream>> downloadThumbnailWithServiceResponseAsync(String contentId, String size);
    /**
     * Download thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large. Possible values include: 'Small', 'Medium', 'Large'
     * @param width Optional width in pixels to resize image
     * @param height Optional height in pixels to resize image
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    InputStream downloadThumbnail(String contentId, String size, String width, String height);

    /**
     * Download thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large. Possible values include: 'Small', 'Medium', 'Large'
     * @param width Optional width in pixels to resize image
     * @param height Optional height in pixels to resize image
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<InputStream> downloadThumbnailAsync(String contentId, String size, String width, String height, final ServiceCallback<InputStream> serviceCallback);

    /**
     * Download thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large. Possible values include: 'Small', 'Medium', 'Large'
     * @param width Optional width in pixels to resize image
     * @param height Optional height in pixels to resize image
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    Observable<InputStream> downloadThumbnailAsync(String contentId, String size, String width, String height);

    /**
     * Download thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large. Possible values include: 'Small', 'Medium', 'Large'
     * @param width Optional width in pixels to resize image
     * @param height Optional height in pixels to resize image
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    Observable<ServiceResponse<InputStream>> downloadThumbnailWithServiceResponseAsync(String contentId, String size, String width, String height);

    /**
     * Create - single.
     * Create a single file-less content item. To import files, see [Transfer](#section/Transfer).
     *
     * @param contentCreateRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    ContentDetail create(ContentCreateRequest contentCreateRequest, String resolve);

    /**
     * Create - single.
     * Create a single file-less content item. To import files, see [Transfer](#section/Transfer).
     *
     * @param contentCreateRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ContentDetail> createAsync(ContentCreateRequest contentCreateRequest, String resolve, final ServiceCallback<ContentDetail> serviceCallback);

    /**
     * Create - single.
     * Create a single file-less content item. To import files, see [Transfer](#section/Transfer).
     *
     * @param contentCreateRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ContentDetail> createAsync(ContentCreateRequest contentCreateRequest, String resolve);

    /**
     * Create - single.
     * Create a single file-less content item. To import files, see [Transfer](#section/Transfer).
     *
     * @param contentCreateRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ServiceResponse<ContentDetail>> createWithServiceResponseAsync(ContentCreateRequest contentCreateRequest, String resolve);
    /**
     * Create - single.
     * Create a single file-less content item. To import files, see [Transfer](#section/Transfer).
     *
     * @param contentCreateRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param allowMissingDependencies Allow creating list items that refer to list items or contents that don't exist in the system.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    ContentDetail create(ContentCreateRequest contentCreateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns);

    /**
     * Create - single.
     * Create a single file-less content item. To import files, see [Transfer](#section/Transfer).
     *
     * @param contentCreateRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param allowMissingDependencies Allow creating list items that refer to list items or contents that don't exist in the system.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ContentDetail> createAsync(ContentCreateRequest contentCreateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns, final ServiceCallback<ContentDetail> serviceCallback);

    /**
     * Create - single.
     * Create a single file-less content item. To import files, see [Transfer](#section/Transfer).
     *
     * @param contentCreateRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param allowMissingDependencies Allow creating list items that refer to list items or contents that don't exist in the system.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ContentDetail> createAsync(ContentCreateRequest contentCreateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns);

    /**
     * Create - single.
     * Create a single file-less content item. To import files, see [Transfer](#section/Transfer).
     *
     * @param contentCreateRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param allowMissingDependencies Allow creating list items that refer to list items or contents that don't exist in the system.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ServiceResponse<ContentDetail>> createWithServiceResponseAsync(ContentCreateRequest contentCreateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns);

    /**
     * Deactivate - single.
     * Deactivates a single content. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be deleted.
     *
     * @param contentId the id of the content to deactivate
     * @param timeout Maximum time to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    ContentDetail deactivate(String contentId, String timeout);

    /**
     * Deactivate - single.
     * Deactivates a single content. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be deleted.
     *
     * @param contentId the id of the content to deactivate
     * @param timeout Maximum time to wait for the business process completed state.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ContentDetail> deactivateAsync(String contentId, String timeout, final ServiceCallback<ContentDetail> serviceCallback);

    /**
     * Deactivate - single.
     * Deactivates a single content. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be deleted.
     *
     * @param contentId the id of the content to deactivate
     * @param timeout Maximum time to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ContentDetail> deactivateAsync(String contentId, String timeout);

    /**
     * Deactivate - single.
     * Deactivates a single content. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be deleted.
     *
     * @param contentId the id of the content to deactivate
     * @param timeout Maximum time to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ServiceResponse<ContentDetail>> deactivateWithServiceResponseAsync(String contentId, String timeout);

    /**
     * Deactivate - many.
     * Deactivates multiple contents. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be deleted.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param deactivateRequest The deactivate request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    BusinessProcess deactivateMany(ContentDeactivateRequest deactivateRequest);

    /**
     * Deactivate - many.
     * Deactivates multiple contents. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be deleted.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param deactivateRequest The deactivate request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcess> deactivateManyAsync(ContentDeactivateRequest deactivateRequest, final ServiceCallback<BusinessProcess> serviceCallback);

    /**
     * Deactivate - many.
     * Deactivates multiple contents. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be deleted.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param deactivateRequest The deactivate request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<BusinessProcess> deactivateManyAsync(ContentDeactivateRequest deactivateRequest);

    /**
     * Deactivate - many.
     * Deactivates multiple contents. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be deleted.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param deactivateRequest The deactivate request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<ServiceResponse<BusinessProcess>> deactivateManyWithServiceResponseAsync(ContentDeactivateRequest deactivateRequest);

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated content.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    ContentDetail reactivate(String contentId, String resolve);

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated content.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ContentDetail> reactivateAsync(String contentId, String resolve, final ServiceCallback<ContentDetail> serviceCallback);

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated content.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ContentDetail> reactivateAsync(String contentId, String resolve);

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated content.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ServiceResponse<ContentDetail>> reactivateWithServiceResponseAsync(String contentId, String resolve);
    /**
     * Reactivate - single.
     * Reactivate a previously deactivated content.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param allowMissingDependencies Allow reactivating contents that refer to list items or contents that don't exist in the system.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    ContentDetail reactivate(String contentId, String resolve, String timeout, String patterns, String allowMissingDependencies);

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated content.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param allowMissingDependencies Allow reactivating contents that refer to list items or contents that don't exist in the system.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ContentDetail> reactivateAsync(String contentId, String resolve, String timeout, String patterns, String allowMissingDependencies, final ServiceCallback<ContentDetail> serviceCallback);

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated content.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param allowMissingDependencies Allow reactivating contents that refer to list items or contents that don't exist in the system.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ContentDetail> reactivateAsync(String contentId, String resolve, String timeout, String patterns, String allowMissingDependencies);

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated content.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param allowMissingDependencies Allow reactivating contents that refer to list items or contents that don't exist in the system.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ServiceResponse<ContentDetail>> reactivateWithServiceResponseAsync(String contentId, String resolve, String timeout, String patterns, String allowMissingDependencies);

    /**
     * Reactivate - many.
     * Reactivate previously deactivated contents.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param reactivateRequest The content reactivate request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    BusinessProcess reactivateMany(ContentReactivateRequest reactivateRequest);

    /**
     * Reactivate - many.
     * Reactivate previously deactivated contents.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param reactivateRequest The content reactivate request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcess> reactivateManyAsync(ContentReactivateRequest reactivateRequest, final ServiceCallback<BusinessProcess> serviceCallback);

    /**
     * Reactivate - many.
     * Reactivate previously deactivated contents.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param reactivateRequest The content reactivate request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<BusinessProcess> reactivateManyAsync(ContentReactivateRequest reactivateRequest);

    /**
     * Reactivate - many.
     * Reactivate previously deactivated contents.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param reactivateRequest The content reactivate request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<ServiceResponse<BusinessProcess>> reactivateManyWithServiceResponseAsync(ContentReactivateRequest reactivateRequest);

    /**
     * Update file - single.
     * Update binary file of existing content. The file must already be uploaded before calling this endpoint. See [Transfer](#section/Transfer)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentId The id of the content to replace
     * @param updateRequest Update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    BusinessProcess updateFile(String contentId, ContentFileUpdateRequest updateRequest);

    /**
     * Update file - single.
     * Update binary file of existing content. The file must already be uploaded before calling this endpoint. See [Transfer](#section/Transfer)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentId The id of the content to replace
     * @param updateRequest Update request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcess> updateFileAsync(String contentId, ContentFileUpdateRequest updateRequest, final ServiceCallback<BusinessProcess> serviceCallback);

    /**
     * Update file - single.
     * Update binary file of existing content. The file must already be uploaded before calling this endpoint. See [Transfer](#section/Transfer)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentId The id of the content to replace
     * @param updateRequest Update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<BusinessProcess> updateFileAsync(String contentId, ContentFileUpdateRequest updateRequest);

    /**
     * Update file - single.
     * Update binary file of existing content. The file must already be uploaded before calling this endpoint. See [Transfer](#section/Transfer)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentId The id of the content to replace
     * @param updateRequest Update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<ServiceResponse<BusinessProcess>> updateFileWithServiceResponseAsync(String contentId, ContentFileUpdateRequest updateRequest);

    /**
     * Update metadata - single.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    ContentDetail updateMetadata(String contentId, ContentMetadataUpdateRequest updateRequest, String resolve);

    /**
     * Update metadata - single.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ContentDetail> updateMetadataAsync(String contentId, ContentMetadataUpdateRequest updateRequest, String resolve, final ServiceCallback<ContentDetail> serviceCallback);

    /**
     * Update metadata - single.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ContentDetail> updateMetadataAsync(String contentId, ContentMetadataUpdateRequest updateRequest, String resolve);

    /**
     * Update metadata - single.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ServiceResponse<ContentDetail>> updateMetadataWithServiceResponseAsync(String contentId, ContentMetadataUpdateRequest updateRequest, String resolve);
    /**
     * Update metadata - single.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param allowMissingDependencies Allow storing references to missing list items
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    ContentDetail updateMetadata(String contentId, ContentMetadataUpdateRequest updateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns);

    /**
     * Update metadata - single.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param allowMissingDependencies Allow storing references to missing list items
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ContentDetail> updateMetadataAsync(String contentId, ContentMetadataUpdateRequest updateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns, final ServiceCallback<ContentDetail> serviceCallback);

    /**
     * Update metadata - single.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param allowMissingDependencies Allow storing references to missing list items
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ContentDetail> updateMetadataAsync(String contentId, ContentMetadataUpdateRequest updateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns);

    /**
     * Update metadata - single.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param allowMissingDependencies Allow storing references to missing list items
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ServiceResponse<ContentDetail>> updateMetadataWithServiceResponseAsync(String contentId, ContentMetadataUpdateRequest updateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns);

    /**
     * Update permissions - single.
     * Updates the content permission sets of a single content. To get a list of available content permission sets, see [Permissions](operation/Permission_SearchContentPermissions).
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    ContentDetail updatePermissions(String contentId, ContentPermissionsUpdateRequest updateRequest, String resolve);

    /**
     * Update permissions - single.
     * Updates the content permission sets of a single content. To get a list of available content permission sets, see [Permissions](operation/Permission_SearchContentPermissions).
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ContentDetail> updatePermissionsAsync(String contentId, ContentPermissionsUpdateRequest updateRequest, String resolve, final ServiceCallback<ContentDetail> serviceCallback);

    /**
     * Update permissions - single.
     * Updates the content permission sets of a single content. To get a list of available content permission sets, see [Permissions](operation/Permission_SearchContentPermissions).
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ContentDetail> updatePermissionsAsync(String contentId, ContentPermissionsUpdateRequest updateRequest, String resolve);

    /**
     * Update permissions - single.
     * Updates the content permission sets of a single content. To get a list of available content permission sets, see [Permissions](operation/Permission_SearchContentPermissions).
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ServiceResponse<ContentDetail>> updatePermissionsWithServiceResponseAsync(String contentId, ContentPermissionsUpdateRequest updateRequest, String resolve);
    /**
     * Update permissions - single.
     * Updates the content permission sets of a single content. To get a list of available content permission sets, see [Permissions](operation/Permission_SearchContentPermissions).
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    ContentDetail updatePermissions(String contentId, ContentPermissionsUpdateRequest updateRequest, String resolve, String timeout, String patterns);

    /**
     * Update permissions - single.
     * Updates the content permission sets of a single content. To get a list of available content permission sets, see [Permissions](operation/Permission_SearchContentPermissions).
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ContentDetail> updatePermissionsAsync(String contentId, ContentPermissionsUpdateRequest updateRequest, String resolve, String timeout, String patterns, final ServiceCallback<ContentDetail> serviceCallback);

    /**
     * Update permissions - single.
     * Updates the content permission sets of a single content. To get a list of available content permission sets, see [Permissions](operation/Permission_SearchContentPermissions).
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ContentDetail> updatePermissionsAsync(String contentId, ContentPermissionsUpdateRequest updateRequest, String resolve, String timeout, String patterns);

    /**
     * Update permissions - single.
     * Updates the content permission sets of a single content. To get a list of available content permission sets, see [Permissions](operation/Permission_SearchContentPermissions).
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ServiceResponse<ContentDetail>> updatePermissionsWithServiceResponseAsync(String contentId, ContentPermissionsUpdateRequest updateRequest, String resolve, String timeout, String patterns);

    /**
     * Update metadata - many.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    BusinessProcess updateMetadataMany(ContentMetadataUpdateManyRequest updateRequest);

    /**
     * Update metadata - many.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update requests.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcess> updateMetadataManyAsync(ContentMetadataUpdateManyRequest updateRequest, final ServiceCallback<BusinessProcess> serviceCallback);

    /**
     * Update metadata - many.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<BusinessProcess> updateMetadataManyAsync(ContentMetadataUpdateManyRequest updateRequest);

    /**
     * Update metadata - many.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<ServiceResponse<BusinessProcess>> updateMetadataManyWithServiceResponseAsync(ContentMetadataUpdateManyRequest updateRequest);

    /**
     * Update permissions - many.
     * Updates the content permission sets of specified contents. To get a list of available content permission sets, see [Permissions](#operation/Permission_SearchContentPermissions)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The permissions update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    BusinessProcess updatePermissionsMany(List<ContentPermissionsUpdateRequest> updateRequest);

    /**
     * Update permissions - many.
     * Updates the content permission sets of specified contents. To get a list of available content permission sets, see [Permissions](#operation/Permission_SearchContentPermissions)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The permissions update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcess> updatePermissionsManyAsync(List<ContentPermissionsUpdateRequest> updateRequest, final ServiceCallback<BusinessProcess> serviceCallback);

    /**
     * Update permissions - many.
     * Updates the content permission sets of specified contents. To get a list of available content permission sets, see [Permissions](#operation/Permission_SearchContentPermissions)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The permissions update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<BusinessProcess> updatePermissionsManyAsync(List<ContentPermissionsUpdateRequest> updateRequest);

    /**
     * Update permissions - many.
     * Updates the content permission sets of specified contents. To get a list of available content permission sets, see [Permissions](#operation/Permission_SearchContentPermissions)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The permissions update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<ServiceResponse<BusinessProcess>> updatePermissionsManyWithServiceResponseAsync(List<ContentPermissionsUpdateRequest> updateRequest);

    /**
     * Transfer ownership - single.
     * Transfer ownership of a content to another user. The user must have the ManageContent UserRight.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    ContentDetail transferOwnership(String contentId, ContentOwnershipTransferRequest updateRequest);

    /**
     * Transfer ownership - single.
     * Transfer ownership of a content to another user. The user must have the ManageContent UserRight.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ContentDetail> transferOwnershipAsync(String contentId, ContentOwnershipTransferRequest updateRequest, final ServiceCallback<ContentDetail> serviceCallback);

    /**
     * Transfer ownership - single.
     * Transfer ownership of a content to another user. The user must have the ManageContent UserRight.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ContentDetail> transferOwnershipAsync(String contentId, ContentOwnershipTransferRequest updateRequest);

    /**
     * Transfer ownership - single.
     * Transfer ownership of a content to another user. The user must have the ManageContent UserRight.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ServiceResponse<ContentDetail>> transferOwnershipWithServiceResponseAsync(String contentId, ContentOwnershipTransferRequest updateRequest);
    /**
     * Transfer ownership - single.
     * Transfer ownership of a content to another user. The user must have the ManageContent UserRight.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @param timeout Maximum time to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    ContentDetail transferOwnership(String contentId, ContentOwnershipTransferRequest updateRequest, String timeout);

    /**
     * Transfer ownership - single.
     * Transfer ownership of a content to another user. The user must have the ManageContent UserRight.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ContentDetail> transferOwnershipAsync(String contentId, ContentOwnershipTransferRequest updateRequest, String timeout, final ServiceCallback<ContentDetail> serviceCallback);

    /**
     * Transfer ownership - single.
     * Transfer ownership of a content to another user. The user must have the ManageContent UserRight.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @param timeout Maximum time to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ContentDetail> transferOwnershipAsync(String contentId, ContentOwnershipTransferRequest updateRequest, String timeout);

    /**
     * Transfer ownership - single.
     * Transfer ownership of a content to another user. The user must have the ManageContent UserRight.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @param timeout Maximum time to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    Observable<ServiceResponse<ContentDetail>> transferOwnershipWithServiceResponseAsync(String contentId, ContentOwnershipTransferRequest updateRequest, String timeout);

    /**
     * Transfer ownership - many.
     * Transfer ownership of multiple contents to another user. The user must have the ManageContent UserRight.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentsOwnershipTransferRequest The content ownership transfer request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    BusinessProcess transferOwnershipMany(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest);

    /**
     * Transfer ownership - many.
     * Transfer ownership of multiple contents to another user. The user must have the ManageContent UserRight.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentsOwnershipTransferRequest The content ownership transfer request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcess> transferOwnershipManyAsync(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest, final ServiceCallback<BusinessProcess> serviceCallback);

    /**
     * Transfer ownership - many.
     * Transfer ownership of multiple contents to another user. The user must have the ManageContent UserRight.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentsOwnershipTransferRequest The content ownership transfer request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<BusinessProcess> transferOwnershipManyAsync(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest);

    /**
     * Transfer ownership - many.
     * Transfer ownership of multiple contents to another user. The user must have the ManageContent UserRight.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentsOwnershipTransferRequest The content ownership transfer request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<ServiceResponse<BusinessProcess>> transferOwnershipManyWithServiceResponseAsync(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest);

    /**
     * Batch update fields - by ids.
     * Updates metadata layers of specified contents. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadataMany](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    BusinessProcess batchUpdateFieldsByIds(ContentFieldsUpdateRequest updateRequest);

    /**
     * Batch update fields - by ids.
     * Updates metadata layers of specified contents. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadataMany](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcess> batchUpdateFieldsByIdsAsync(ContentFieldsUpdateRequest updateRequest, final ServiceCallback<BusinessProcess> serviceCallback);

    /**
     * Batch update fields - by ids.
     * Updates metadata layers of specified contents. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadataMany](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<BusinessProcess> batchUpdateFieldsByIdsAsync(ContentFieldsUpdateRequest updateRequest);

    /**
     * Batch update fields - by ids.
     * Updates metadata layers of specified contents. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadataMany](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<ServiceResponse<BusinessProcess>> batchUpdateFieldsByIdsWithServiceResponseAsync(ContentFieldsUpdateRequest updateRequest);

    /**
     * Batch update fields - by filter.
     * Updates metadata layers of specified contents. For file-less contents, the content itself can be updated aswell. A filter must be provided to limit the update to specific contents.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    BusinessProcess batchUpdateFieldsByFilter(ContentFieldsFilterUpdateRequest updateRequest);

    /**
     * Batch update fields - by filter.
     * Updates metadata layers of specified contents. For file-less contents, the content itself can be updated aswell. A filter must be provided to limit the update to specific contents.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcess> batchUpdateFieldsByFilterAsync(ContentFieldsFilterUpdateRequest updateRequest, final ServiceCallback<BusinessProcess> serviceCallback);

    /**
     * Batch update fields - by filter.
     * Updates metadata layers of specified contents. For file-less contents, the content itself can be updated aswell. A filter must be provided to limit the update to specific contents.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<BusinessProcess> batchUpdateFieldsByFilterAsync(ContentFieldsFilterUpdateRequest updateRequest);

    /**
     * Batch update fields - by filter.
     * Updates metadata layers of specified contents. For file-less contents, the content itself can be updated aswell. A filter must be provided to limit the update to specific contents.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<ServiceResponse<BusinessProcess>> batchUpdateFieldsByFilterWithServiceResponseAsync(ContentFieldsFilterUpdateRequest updateRequest);

}
