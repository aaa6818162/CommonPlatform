/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The SchemaFieldImportTypeMismatchException model.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("SchemaFieldImportTypeMismatchException")
public class SchemaFieldImportTypeMismatchException extends PictureparkValidationException {
    /**
     * The schemaId property.
     */
    @JsonProperty(value = "schemaId")
    private String schemaId;

    /**
     * The fieldId property.
     */
    @JsonProperty(value = "fieldId")
    private String fieldId;

    /**
     * The importingFieldType property.
     */
    @JsonProperty(value = "importingFieldType")
    private String importingFieldType;

    /**
     * The existingFieldType property.
     */
    @JsonProperty(value = "existingFieldType")
    private String existingFieldType;

    /**
     * Get the schemaId value.
     *
     * @return the schemaId value
     */
    public String schemaId() {
        return this.schemaId;
    }

    /**
     * Set the schemaId value.
     *
     * @param schemaId the schemaId value to set
     * @return the SchemaFieldImportTypeMismatchException object itself.
     */
    public SchemaFieldImportTypeMismatchException withSchemaId(String schemaId) {
        this.schemaId = schemaId;
        return this;
    }

    /**
     * Get the fieldId value.
     *
     * @return the fieldId value
     */
    public String fieldId() {
        return this.fieldId;
    }

    /**
     * Set the fieldId value.
     *
     * @param fieldId the fieldId value to set
     * @return the SchemaFieldImportTypeMismatchException object itself.
     */
    public SchemaFieldImportTypeMismatchException withFieldId(String fieldId) {
        this.fieldId = fieldId;
        return this;
    }

    /**
     * Get the importingFieldType value.
     *
     * @return the importingFieldType value
     */
    public String importingFieldType() {
        return this.importingFieldType;
    }

    /**
     * Set the importingFieldType value.
     *
     * @param importingFieldType the importingFieldType value to set
     * @return the SchemaFieldImportTypeMismatchException object itself.
     */
    public SchemaFieldImportTypeMismatchException withImportingFieldType(String importingFieldType) {
        this.importingFieldType = importingFieldType;
        return this;
    }

    /**
     * Get the existingFieldType value.
     *
     * @return the existingFieldType value
     */
    public String existingFieldType() {
        return this.existingFieldType;
    }

    /**
     * Set the existingFieldType value.
     *
     * @param existingFieldType the existingFieldType value to set
     * @return the SchemaFieldImportTypeMismatchException object itself.
     */
    public SchemaFieldImportTypeMismatchException withExistingFieldType(String existingFieldType) {
        this.existingFieldType = existingFieldType;
        return this;
    }

}
