/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import picturepark.models.BulkResponse;
import picturepark.models.CreateShareResult;
import picturepark.models.ObjectAggregationResult;
import picturepark.models.ShareAggregationRequest;
import picturepark.models.ShareBaseCreateRequest;
import picturepark.models.ShareBaseUpdateRequest;
import picturepark.models.ShareDetail;
import picturepark.models.ShareSearchRequest;
import picturepark.models.ShareSearchResult;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ShareClients.
 */
public interface ShareClients {
    /**
     * Get - single.
     * Get share by id (basic or embed).
     *
     * @param id Share Id (not token, use PublicAccess to get share by token)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ShareDetail object if successful.
     */
    ShareDetail get(String id);

    /**
     * Get - single.
     * Get share by id (basic or embed).
     *
     * @param id Share Id (not token, use PublicAccess to get share by token)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ShareDetail> getAsync(String id, final ServiceCallback<ShareDetail> serviceCallback);

    /**
     * Get - single.
     * Get share by id (basic or embed).
     *
     * @param id Share Id (not token, use PublicAccess to get share by token)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ShareDetail object
     */
    Observable<ShareDetail> getAsync(String id);

    /**
     * Get - single.
     * Get share by id (basic or embed).
     *
     * @param id Share Id (not token, use PublicAccess to get share by token)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ShareDetail object
     */
    Observable<ServiceResponse<ShareDetail>> getWithServiceResponseAsync(String id);

    /**
     * Update - single.
     * Updates a single share.
     *
     * @param id The share id.
     * @param updateRequest The share update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ShareDetail object if successful.
     */
    ShareDetail update(String id, ShareBaseUpdateRequest updateRequest);

    /**
     * Update - single.
     * Updates a single share.
     *
     * @param id The share id.
     * @param updateRequest The share update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ShareDetail> updateAsync(String id, ShareBaseUpdateRequest updateRequest, final ServiceCallback<ShareDetail> serviceCallback);

    /**
     * Update - single.
     * Updates a single share.
     *
     * @param id The share id.
     * @param updateRequest The share update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ShareDetail object
     */
    Observable<ShareDetail> updateAsync(String id, ShareBaseUpdateRequest updateRequest);

    /**
     * Update - single.
     * Updates a single share.
     *
     * @param id The share id.
     * @param updateRequest The share update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ShareDetail object
     */
    Observable<ServiceResponse<ShareDetail>> updateWithServiceResponseAsync(String id, ShareBaseUpdateRequest updateRequest);

    /**
     * Search.
     * Search own shares.
     *
     * @param request Search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ShareSearchResult object if successful.
     */
    ShareSearchResult search(ShareSearchRequest request);

    /**
     * Search.
     * Search own shares.
     *
     * @param request Search request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ShareSearchResult> searchAsync(ShareSearchRequest request, final ServiceCallback<ShareSearchResult> serviceCallback);

    /**
     * Search.
     * Search own shares.
     *
     * @param request Search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ShareSearchResult object
     */
    Observable<ShareSearchResult> searchAsync(ShareSearchRequest request);

    /**
     * Search.
     * Search own shares.
     *
     * @param request Search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ShareSearchResult object
     */
    Observable<ServiceResponse<ShareSearchResult>> searchWithServiceResponseAsync(ShareSearchRequest request);

    /**
     * Aggregate.
     * Aggregates own shares.
     *
     * @param request Aggregation request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ObjectAggregationResult object if successful.
     */
    ObjectAggregationResult aggregate(ShareAggregationRequest request);

    /**
     * Aggregate.
     * Aggregates own shares.
     *
     * @param request Aggregation request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ObjectAggregationResult> aggregateAsync(ShareAggregationRequest request, final ServiceCallback<ObjectAggregationResult> serviceCallback);

    /**
     * Aggregate.
     * Aggregates own shares.
     *
     * @param request Aggregation request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ObjectAggregationResult object
     */
    Observable<ObjectAggregationResult> aggregateAsync(ShareAggregationRequest request);

    /**
     * Aggregate.
     * Aggregates own shares.
     *
     * @param request Aggregation request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ObjectAggregationResult object
     */
    Observable<ServiceResponse<ObjectAggregationResult>> aggregateWithServiceResponseAsync(ShareAggregationRequest request);

    /**
     * Create - single.
     * Create a new share (basic or embed).
     *
     * @param request Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CreateShareResult object if successful.
     */
    CreateShareResult create(ShareBaseCreateRequest request);

    /**
     * Create - single.
     * Create a new share (basic or embed).
     *
     * @param request Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<CreateShareResult> createAsync(ShareBaseCreateRequest request, final ServiceCallback<CreateShareResult> serviceCallback);

    /**
     * Create - single.
     * Create a new share (basic or embed).
     *
     * @param request Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CreateShareResult object
     */
    Observable<CreateShareResult> createAsync(ShareBaseCreateRequest request);

    /**
     * Create - single.
     * Create a new share (basic or embed).
     *
     * @param request Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CreateShareResult object
     */
    Observable<ServiceResponse<CreateShareResult>> createWithServiceResponseAsync(ShareBaseCreateRequest request);

    /**
     * Delete - many.
     * Deletes multiple shares. Returnes a bulk reponse with information about successful and failed rows.
     *
     * @param ids A list of shareIds to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BulkResponse object if successful.
     */
    BulkResponse deleteMany(String ids);

    /**
     * Delete - many.
     * Deletes multiple shares. Returnes a bulk reponse with information about successful and failed rows.
     *
     * @param ids A list of shareIds to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BulkResponse> deleteManyAsync(String ids, final ServiceCallback<BulkResponse> serviceCallback);

    /**
     * Delete - many.
     * Deletes multiple shares. Returnes a bulk reponse with information about successful and failed rows.
     *
     * @param ids A list of shareIds to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BulkResponse object
     */
    Observable<BulkResponse> deleteManyAsync(String ids);

    /**
     * Delete - many.
     * Deletes multiple shares. Returnes a bulk reponse with information about successful and failed rows.
     *
     * @param ids A list of shareIds to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BulkResponse object
     */
    Observable<ServiceResponse<BulkResponse>> deleteManyWithServiceResponseAsync(String ids);

}
