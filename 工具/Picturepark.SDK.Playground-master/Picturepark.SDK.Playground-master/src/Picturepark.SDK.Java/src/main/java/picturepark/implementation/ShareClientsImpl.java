/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark.implementation;

import retrofit2.Retrofit;
import picturepark.ShareClients;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import picturepark.models.BulkResponse;
import picturepark.models.CreateShareResult;
import picturepark.models.ObjectAggregationResult;
import picturepark.models.ShareAggregationRequest;
import picturepark.models.ShareBaseCreateRequest;
import picturepark.models.ShareBaseUpdateRequest;
import picturepark.models.ShareDetail;
import picturepark.models.ShareSearchRequest;
import picturepark.models.ShareSearchResult;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ShareClients.
 */
public class ShareClientsImpl implements ShareClients {
    /** The Retrofit service to perform REST calls. */
    private ShareClientsService service;
    /** The service client containing this operation class. */
    private PictureparkAPIV1Impl client;

    /**
     * Initializes an instance of ShareClients.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ShareClientsImpl(Retrofit retrofit, PictureparkAPIV1Impl client) {
        this.service = retrofit.create(ShareClientsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ShareClients to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ShareClientsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ShareClients get" })
        @GET("v1/shares/{id}")
        Observable<Response<ResponseBody>> get(@Path("id") String id);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ShareClients update" })
        @PUT("v1/shares/{id}")
        Observable<Response<ResponseBody>> update(@Path("id") String id, @Body ShareBaseUpdateRequest updateRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ShareClients search" })
        @POST("v1/shares/search")
        Observable<Response<ResponseBody>> search(@Body ShareSearchRequest request);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ShareClients aggregate" })
        @POST("v1/shares/aggregate")
        Observable<Response<ResponseBody>> aggregate(@Body ShareAggregationRequest request);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ShareClients create" })
        @POST("v1/shares")
        Observable<Response<ResponseBody>> create(@Body ShareBaseCreateRequest request);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ShareClients deleteMany" })
        @HTTP(path = "v1/shares/many", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteMany(@Query("ids") String ids);

    }

    /**
     * Get - single.
     * Get share by id (basic or embed).
     *
     * @param id Share Id (not token, use PublicAccess to get share by token)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ShareDetail object if successful.
     */
    public ShareDetail get(String id) {
        return getWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Get - single.
     * Get share by id (basic or embed).
     *
     * @param id Share Id (not token, use PublicAccess to get share by token)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ShareDetail> getAsync(String id, final ServiceCallback<ShareDetail> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Get - single.
     * Get share by id (basic or embed).
     *
     * @param id Share Id (not token, use PublicAccess to get share by token)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ShareDetail object
     */
    public Observable<ShareDetail> getAsync(String id) {
        return getWithServiceResponseAsync(id).map(new Func1<ServiceResponse<ShareDetail>, ShareDetail>() {
            // @Override
            public ShareDetail call(ServiceResponse<ShareDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Get - single.
     * Get share by id (basic or embed).
     *
     * @param id Share Id (not token, use PublicAccess to get share by token)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ShareDetail object
     */
    public Observable<ServiceResponse<ShareDetail>> getWithServiceResponseAsync(String id) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        return service.get(id)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ShareDetail>>>() {
                // @Override
                public Observable<ServiceResponse<ShareDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ShareDetail> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ShareDetail> getDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ShareDetail, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ShareDetail>() { }.getType())
                .build(response);
    }

    /**
     * Update - single.
     * Updates a single share.
     *
     * @param id The share id.
     * @param updateRequest The share update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ShareDetail object if successful.
     */
    public ShareDetail update(String id, ShareBaseUpdateRequest updateRequest) {
        return updateWithServiceResponseAsync(id, updateRequest).toBlocking().single().body();
    }

    /**
     * Update - single.
     * Updates a single share.
     *
     * @param id The share id.
     * @param updateRequest The share update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ShareDetail> updateAsync(String id, ShareBaseUpdateRequest updateRequest, final ServiceCallback<ShareDetail> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(id, updateRequest), serviceCallback);
    }

    /**
     * Update - single.
     * Updates a single share.
     *
     * @param id The share id.
     * @param updateRequest The share update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ShareDetail object
     */
    public Observable<ShareDetail> updateAsync(String id, ShareBaseUpdateRequest updateRequest) {
        return updateWithServiceResponseAsync(id, updateRequest).map(new Func1<ServiceResponse<ShareDetail>, ShareDetail>() {
            // @Override
            public ShareDetail call(ServiceResponse<ShareDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Update - single.
     * Updates a single share.
     *
     * @param id The share id.
     * @param updateRequest The share update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ShareDetail object
     */
    public Observable<ServiceResponse<ShareDetail>> updateWithServiceResponseAsync(String id, ShareBaseUpdateRequest updateRequest) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (updateRequest == null) {
            throw new IllegalArgumentException("Parameter updateRequest is required and cannot be null.");
        }
        Validator.validate(updateRequest);
        return service.update(id, updateRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ShareDetail>>>() {
                // @Override
                public Observable<ServiceResponse<ShareDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ShareDetail> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ShareDetail> updateDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ShareDetail, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ShareDetail>() { }.getType())
                .build(response);
    }

    /**
     * Search.
     * Search own shares.
     *
     * @param request Search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ShareSearchResult object if successful.
     */
    public ShareSearchResult search(ShareSearchRequest request) {
        return searchWithServiceResponseAsync(request).toBlocking().single().body();
    }

    /**
     * Search.
     * Search own shares.
     *
     * @param request Search request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ShareSearchResult> searchAsync(ShareSearchRequest request, final ServiceCallback<ShareSearchResult> serviceCallback) {
        return ServiceFuture.fromResponse(searchWithServiceResponseAsync(request), serviceCallback);
    }

    /**
     * Search.
     * Search own shares.
     *
     * @param request Search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ShareSearchResult object
     */
    public Observable<ShareSearchResult> searchAsync(ShareSearchRequest request) {
        return searchWithServiceResponseAsync(request).map(new Func1<ServiceResponse<ShareSearchResult>, ShareSearchResult>() {
            // @Override
            public ShareSearchResult call(ServiceResponse<ShareSearchResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Search.
     * Search own shares.
     *
     * @param request Search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ShareSearchResult object
     */
    public Observable<ServiceResponse<ShareSearchResult>> searchWithServiceResponseAsync(ShareSearchRequest request) {
        if (request == null) {
            throw new IllegalArgumentException("Parameter request is required and cannot be null.");
        }
        Validator.validate(request);
        return service.search(request)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ShareSearchResult>>>() {
                // @Override
                public Observable<ServiceResponse<ShareSearchResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ShareSearchResult> clientResponse = searchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ShareSearchResult> searchDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ShareSearchResult, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ShareSearchResult>() { }.getType())
                .build(response);
    }

    /**
     * Aggregate.
     * Aggregates own shares.
     *
     * @param request Aggregation request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ObjectAggregationResult object if successful.
     */
    public ObjectAggregationResult aggregate(ShareAggregationRequest request) {
        return aggregateWithServiceResponseAsync(request).toBlocking().single().body();
    }

    /**
     * Aggregate.
     * Aggregates own shares.
     *
     * @param request Aggregation request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ObjectAggregationResult> aggregateAsync(ShareAggregationRequest request, final ServiceCallback<ObjectAggregationResult> serviceCallback) {
        return ServiceFuture.fromResponse(aggregateWithServiceResponseAsync(request), serviceCallback);
    }

    /**
     * Aggregate.
     * Aggregates own shares.
     *
     * @param request Aggregation request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ObjectAggregationResult object
     */
    public Observable<ObjectAggregationResult> aggregateAsync(ShareAggregationRequest request) {
        return aggregateWithServiceResponseAsync(request).map(new Func1<ServiceResponse<ObjectAggregationResult>, ObjectAggregationResult>() {
            // @Override
            public ObjectAggregationResult call(ServiceResponse<ObjectAggregationResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Aggregate.
     * Aggregates own shares.
     *
     * @param request Aggregation request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ObjectAggregationResult object
     */
    public Observable<ServiceResponse<ObjectAggregationResult>> aggregateWithServiceResponseAsync(ShareAggregationRequest request) {
        if (request == null) {
            throw new IllegalArgumentException("Parameter request is required and cannot be null.");
        }
        Validator.validate(request);
        return service.aggregate(request)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ObjectAggregationResult>>>() {
                // @Override
                public Observable<ServiceResponse<ObjectAggregationResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ObjectAggregationResult> clientResponse = aggregateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ObjectAggregationResult> aggregateDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ObjectAggregationResult, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ObjectAggregationResult>() { }.getType())
                .build(response);
    }

    /**
     * Create - single.
     * Create a new share (basic or embed).
     *
     * @param request Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CreateShareResult object if successful.
     */
    public CreateShareResult create(ShareBaseCreateRequest request) {
        return createWithServiceResponseAsync(request).toBlocking().single().body();
    }

    /**
     * Create - single.
     * Create a new share (basic or embed).
     *
     * @param request Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CreateShareResult> createAsync(ShareBaseCreateRequest request, final ServiceCallback<CreateShareResult> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(request), serviceCallback);
    }

    /**
     * Create - single.
     * Create a new share (basic or embed).
     *
     * @param request Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CreateShareResult object
     */
    public Observable<CreateShareResult> createAsync(ShareBaseCreateRequest request) {
        return createWithServiceResponseAsync(request).map(new Func1<ServiceResponse<CreateShareResult>, CreateShareResult>() {
            // @Override
            public CreateShareResult call(ServiceResponse<CreateShareResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Create - single.
     * Create a new share (basic or embed).
     *
     * @param request Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CreateShareResult object
     */
    public Observable<ServiceResponse<CreateShareResult>> createWithServiceResponseAsync(ShareBaseCreateRequest request) {
        if (request == null) {
            throw new IllegalArgumentException("Parameter request is required and cannot be null.");
        }
        Validator.validate(request);
        return service.create(request)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CreateShareResult>>>() {
                // @Override
                public Observable<ServiceResponse<CreateShareResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CreateShareResult> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CreateShareResult> createDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CreateShareResult, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CreateShareResult>() { }.getType())
                .build(response);
    }

    /**
     * Delete - many.
     * Deletes multiple shares. Returnes a bulk reponse with information about successful and failed rows.
     *
     * @param ids A list of shareIds to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BulkResponse object if successful.
     */
    public BulkResponse deleteMany(String ids) {
        return deleteManyWithServiceResponseAsync(ids).toBlocking().single().body();
    }

    /**
     * Delete - many.
     * Deletes multiple shares. Returnes a bulk reponse with information about successful and failed rows.
     *
     * @param ids A list of shareIds to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BulkResponse> deleteManyAsync(String ids, final ServiceCallback<BulkResponse> serviceCallback) {
        return ServiceFuture.fromResponse(deleteManyWithServiceResponseAsync(ids), serviceCallback);
    }

    /**
     * Delete - many.
     * Deletes multiple shares. Returnes a bulk reponse with information about successful and failed rows.
     *
     * @param ids A list of shareIds to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BulkResponse object
     */
    public Observable<BulkResponse> deleteManyAsync(String ids) {
        return deleteManyWithServiceResponseAsync(ids).map(new Func1<ServiceResponse<BulkResponse>, BulkResponse>() {
            // @Override
            public BulkResponse call(ServiceResponse<BulkResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete - many.
     * Deletes multiple shares. Returnes a bulk reponse with information about successful and failed rows.
     *
     * @param ids A list of shareIds to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BulkResponse object
     */
    public Observable<ServiceResponse<BulkResponse>> deleteManyWithServiceResponseAsync(String ids) {
        if (ids == null) {
            throw new IllegalArgumentException("Parameter ids is required and cannot be null.");
        }
        return service.deleteMany(ids)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BulkResponse>>>() {
                // @Override
                public Observable<ServiceResponse<BulkResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BulkResponse> clientResponse = deleteManyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BulkResponse> deleteManyDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BulkResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BulkResponse>() { }.getType())
                .build(response);
    }

}
