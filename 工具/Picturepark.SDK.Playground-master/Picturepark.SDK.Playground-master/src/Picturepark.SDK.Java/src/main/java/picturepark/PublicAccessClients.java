/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import picturepark.models.ShareDetail;
import picturepark.models.VersionInfo;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PublicAccessClients.
 */
public interface PublicAccessClients {
    /**
     * Get Version.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VersionInfo object if successful.
     */
    VersionInfo getVersion();

    /**
     * Get Version.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<VersionInfo> getVersionAsync(final ServiceCallback<VersionInfo> serviceCallback);

    /**
     * Get Version.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VersionInfo object
     */
    Observable<VersionInfo> getVersionAsync();

    /**
     * Get Version.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VersionInfo object
     */
    Observable<ServiceResponse<VersionInfo>> getVersionWithServiceResponseAsync();

    /**
     * Get Share.
     *
     * @param token The token
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ShareDetail object if successful.
     */
    ShareDetail getShare(String token);

    /**
     * Get Share.
     *
     * @param token The token
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ShareDetail> getShareAsync(String token, final ServiceCallback<ShareDetail> serviceCallback);

    /**
     * Get Share.
     *
     * @param token The token
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ShareDetail object
     */
    Observable<ShareDetail> getShareAsync(String token);

    /**
     * Get Share.
     *
     * @param token The token
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ShareDetail object
     */
    Observable<ServiceResponse<ShareDetail>> getShareWithServiceResponseAsync(String token);

}
