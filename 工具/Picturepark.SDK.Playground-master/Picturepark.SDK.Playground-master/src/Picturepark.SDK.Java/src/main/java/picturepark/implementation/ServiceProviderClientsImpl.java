/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark.implementation;

import retrofit2.Retrofit;
import picturepark.ServiceProviderClients;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import picturepark.models.CustomerServiceProviderConfiguration;
import picturepark.models.ServiceProviderConfigurationUpdateRequest;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ServiceProviderClients.
 */
public class ServiceProviderClientsImpl implements ServiceProviderClients {
    /** The Retrofit service to perform REST calls. */
    private ServiceProviderClientsService service;
    /** The service client containing this operation class. */
    private PictureparkAPIV1Impl client;

    /**
     * Initializes an instance of ServiceProviderClients.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ServiceProviderClientsImpl(Retrofit retrofit, PictureparkAPIV1Impl client) {
        this.service = retrofit.create(ServiceProviderClientsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ServiceProviderClients to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ServiceProviderClientsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ServiceProviderClients getConfiguration" })
        @GET("v1/serviceProviders/{serviceProviderId}/configuration")
        Observable<Response<ResponseBody>> getConfiguration(@Path("serviceProviderId") String serviceProviderId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ServiceProviderClients updateConfiguration" })
        @PUT("v1/serviceProviders/{serviceProviderId}/configuration")
        Observable<Response<ResponseBody>> updateConfiguration(@Path("serviceProviderId") String serviceProviderId, @Body ServiceProviderConfigurationUpdateRequest configuration);

    }

    /**
     * Get configuration.
     * Gets the customer configuration of a specific service provider instance.
     *
     * @param serviceProviderId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CustomerServiceProviderConfiguration object if successful.
     */
    public CustomerServiceProviderConfiguration getConfiguration(String serviceProviderId) {
        return getConfigurationWithServiceResponseAsync(serviceProviderId).toBlocking().single().body();
    }

    /**
     * Get configuration.
     * Gets the customer configuration of a specific service provider instance.
     *
     * @param serviceProviderId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CustomerServiceProviderConfiguration> getConfigurationAsync(String serviceProviderId, final ServiceCallback<CustomerServiceProviderConfiguration> serviceCallback) {
        return ServiceFuture.fromResponse(getConfigurationWithServiceResponseAsync(serviceProviderId), serviceCallback);
    }

    /**
     * Get configuration.
     * Gets the customer configuration of a specific service provider instance.
     *
     * @param serviceProviderId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerServiceProviderConfiguration object
     */
    public Observable<CustomerServiceProviderConfiguration> getConfigurationAsync(String serviceProviderId) {
        return getConfigurationWithServiceResponseAsync(serviceProviderId).map(new Func1<ServiceResponse<CustomerServiceProviderConfiguration>, CustomerServiceProviderConfiguration>() {
            // @Override
            public CustomerServiceProviderConfiguration call(ServiceResponse<CustomerServiceProviderConfiguration> response) {
                return response.body();
            }
        });
    }

    /**
     * Get configuration.
     * Gets the customer configuration of a specific service provider instance.
     *
     * @param serviceProviderId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerServiceProviderConfiguration object
     */
    public Observable<ServiceResponse<CustomerServiceProviderConfiguration>> getConfigurationWithServiceResponseAsync(String serviceProviderId) {
        if (serviceProviderId == null) {
            throw new IllegalArgumentException("Parameter serviceProviderId is required and cannot be null.");
        }
        return service.getConfiguration(serviceProviderId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CustomerServiceProviderConfiguration>>>() {
                // @Override
                public Observable<ServiceResponse<CustomerServiceProviderConfiguration>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CustomerServiceProviderConfiguration> clientResponse = getConfigurationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CustomerServiceProviderConfiguration> getConfigurationDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CustomerServiceProviderConfiguration, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CustomerServiceProviderConfiguration>() { }.getType())
                .build(response);
    }

    /**
     * Update configuration.
     * Updates the customer configuration of a specific service provider instance.
     *
     * @param serviceProviderId the String value
     * @param configuration the ServiceProviderConfigurationUpdateRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CustomerServiceProviderConfiguration object if successful.
     */
    public CustomerServiceProviderConfiguration updateConfiguration(String serviceProviderId, ServiceProviderConfigurationUpdateRequest configuration) {
        return updateConfigurationWithServiceResponseAsync(serviceProviderId, configuration).toBlocking().single().body();
    }

    /**
     * Update configuration.
     * Updates the customer configuration of a specific service provider instance.
     *
     * @param serviceProviderId the String value
     * @param configuration the ServiceProviderConfigurationUpdateRequest value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CustomerServiceProviderConfiguration> updateConfigurationAsync(String serviceProviderId, ServiceProviderConfigurationUpdateRequest configuration, final ServiceCallback<CustomerServiceProviderConfiguration> serviceCallback) {
        return ServiceFuture.fromResponse(updateConfigurationWithServiceResponseAsync(serviceProviderId, configuration), serviceCallback);
    }

    /**
     * Update configuration.
     * Updates the customer configuration of a specific service provider instance.
     *
     * @param serviceProviderId the String value
     * @param configuration the ServiceProviderConfigurationUpdateRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerServiceProviderConfiguration object
     */
    public Observable<CustomerServiceProviderConfiguration> updateConfigurationAsync(String serviceProviderId, ServiceProviderConfigurationUpdateRequest configuration) {
        return updateConfigurationWithServiceResponseAsync(serviceProviderId, configuration).map(new Func1<ServiceResponse<CustomerServiceProviderConfiguration>, CustomerServiceProviderConfiguration>() {
            // @Override
            public CustomerServiceProviderConfiguration call(ServiceResponse<CustomerServiceProviderConfiguration> response) {
                return response.body();
            }
        });
    }

    /**
     * Update configuration.
     * Updates the customer configuration of a specific service provider instance.
     *
     * @param serviceProviderId the String value
     * @param configuration the ServiceProviderConfigurationUpdateRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerServiceProviderConfiguration object
     */
    public Observable<ServiceResponse<CustomerServiceProviderConfiguration>> updateConfigurationWithServiceResponseAsync(String serviceProviderId, ServiceProviderConfigurationUpdateRequest configuration) {
        if (serviceProviderId == null) {
            throw new IllegalArgumentException("Parameter serviceProviderId is required and cannot be null.");
        }
        if (configuration == null) {
            throw new IllegalArgumentException("Parameter configuration is required and cannot be null.");
        }
        Validator.validate(configuration);
        return service.updateConfiguration(serviceProviderId, configuration)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CustomerServiceProviderConfiguration>>>() {
                // @Override
                public Observable<ServiceResponse<CustomerServiceProviderConfiguration>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CustomerServiceProviderConfiguration> clientResponse = updateConfigurationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CustomerServiceProviderConfiguration> updateConfigurationDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CustomerServiceProviderConfiguration, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CustomerServiceProviderConfiguration>() { }.getType())
                .build(response);
    }

}
