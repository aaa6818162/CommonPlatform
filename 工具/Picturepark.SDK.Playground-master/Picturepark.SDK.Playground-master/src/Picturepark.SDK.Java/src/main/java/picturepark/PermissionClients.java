/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import picturepark.models.ContentPermissionSetDetail;
import picturepark.models.PermissionSetSearchRequest;
import picturepark.models.PermissionSetSearchResult;
import picturepark.models.SchemaPermissionSetDetail;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PermissionClients.
 */
public interface PermissionClients {
    /**
     * Search Content Permissions.
     * Searches content permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PermissionSetSearchResult object if successful.
     */
    PermissionSetSearchResult searchContentPermissionSets(PermissionSetSearchRequest request);

    /**
     * Search Content Permissions.
     * Searches content permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PermissionSetSearchResult> searchContentPermissionSetsAsync(PermissionSetSearchRequest request, final ServiceCallback<PermissionSetSearchResult> serviceCallback);

    /**
     * Search Content Permissions.
     * Searches content permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PermissionSetSearchResult object
     */
    Observable<PermissionSetSearchResult> searchContentPermissionSetsAsync(PermissionSetSearchRequest request);

    /**
     * Search Content Permissions.
     * Searches content permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PermissionSetSearchResult object
     */
    Observable<ServiceResponse<PermissionSetSearchResult>> searchContentPermissionSetsWithServiceResponseAsync(PermissionSetSearchRequest request);

    /**
     * Get Content Permission - single.
     * Gets the content permission set detail information by the content permission set id.
     *
     * @param permissionSetId The content permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentPermissionSetDetail object if successful.
     */
    ContentPermissionSetDetail getContentPermissionSet(String permissionSetId);

    /**
     * Get Content Permission - single.
     * Gets the content permission set detail information by the content permission set id.
     *
     * @param permissionSetId The content permission set id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ContentPermissionSetDetail> getContentPermissionSetAsync(String permissionSetId, final ServiceCallback<ContentPermissionSetDetail> serviceCallback);

    /**
     * Get Content Permission - single.
     * Gets the content permission set detail information by the content permission set id.
     *
     * @param permissionSetId The content permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentPermissionSetDetail object
     */
    Observable<ContentPermissionSetDetail> getContentPermissionSetAsync(String permissionSetId);

    /**
     * Get Content Permission - single.
     * Gets the content permission set detail information by the content permission set id.
     *
     * @param permissionSetId The content permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentPermissionSetDetail object
     */
    Observable<ServiceResponse<ContentPermissionSetDetail>> getContentPermissionSetWithServiceResponseAsync(String permissionSetId);

    /**
     * Search Schema PermissionSets.
     * Searches schema permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PermissionSetSearchResult object if successful.
     */
    PermissionSetSearchResult searchSchemaPermissionSets(PermissionSetSearchRequest request);

    /**
     * Search Schema PermissionSets.
     * Searches schema permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PermissionSetSearchResult> searchSchemaPermissionSetsAsync(PermissionSetSearchRequest request, final ServiceCallback<PermissionSetSearchResult> serviceCallback);

    /**
     * Search Schema PermissionSets.
     * Searches schema permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PermissionSetSearchResult object
     */
    Observable<PermissionSetSearchResult> searchSchemaPermissionSetsAsync(PermissionSetSearchRequest request);

    /**
     * Search Schema PermissionSets.
     * Searches schema permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PermissionSetSearchResult object
     */
    Observable<ServiceResponse<PermissionSetSearchResult>> searchSchemaPermissionSetsWithServiceResponseAsync(PermissionSetSearchRequest request);

    /**
     * Get Schema PermissionSets - single.
     * Gets the schema permission set detail information by the schema permission set id.
     *
     * @param permissionSetId The schema permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SchemaPermissionSetDetail object if successful.
     */
    SchemaPermissionSetDetail getSchemaPermissionSet(String permissionSetId);

    /**
     * Get Schema PermissionSets - single.
     * Gets the schema permission set detail information by the schema permission set id.
     *
     * @param permissionSetId The schema permission set id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SchemaPermissionSetDetail> getSchemaPermissionSetAsync(String permissionSetId, final ServiceCallback<SchemaPermissionSetDetail> serviceCallback);

    /**
     * Get Schema PermissionSets - single.
     * Gets the schema permission set detail information by the schema permission set id.
     *
     * @param permissionSetId The schema permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaPermissionSetDetail object
     */
    Observable<SchemaPermissionSetDetail> getSchemaPermissionSetAsync(String permissionSetId);

    /**
     * Get Schema PermissionSets - single.
     * Gets the schema permission set detail information by the schema permission set id.
     *
     * @param permissionSetId The schema permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaPermissionSetDetail object
     */
    Observable<ServiceResponse<SchemaPermissionSetDetail>> getSchemaPermissionSetWithServiceResponseAsync(String permissionSetId);

    /**
     * Get User rights.
     * Get all UserRights the current user has.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;String&gt; object if successful.
     */
    List<String> getUserRights();

    /**
     * Get User rights.
     * Get all UserRights the current user has.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<String>> getUserRightsAsync(final ServiceCallback<List<String>> serviceCallback);

    /**
     * Get User rights.
     * Get all UserRights the current user has.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;String&gt; object
     */
    Observable<List<String>> getUserRightsAsync();

    /**
     * Get User rights.
     * Get all UserRights the current user has.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;String&gt; object
     */
    Observable<ServiceResponse<List<String>>> getUserRightsWithServiceResponseAsync();

    /**
     * Has UserRight.
     * Validates if the User has a given UserRight.
     *
     * @param userRight The UserRight to validate. Possible values include: 'ManageContent', 'ManageSharings', 'ManageDrives', 'ManageTransfer', 'ManageChannels', 'ManageSchemas', 'ManageUsers', 'ManageUserRoles', 'ManagePermissions', 'ManageSearchIndexes', 'ManageRecipients', 'ManageCollections', 'ManageListItems', 'ManageServiceProviders', 'ManageEmbeds', 'ManageTemplates'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the boolean object if successful.
     */
    boolean hasUserRight(String userRight);

    /**
     * Has UserRight.
     * Validates if the User has a given UserRight.
     *
     * @param userRight The UserRight to validate. Possible values include: 'ManageContent', 'ManageSharings', 'ManageDrives', 'ManageTransfer', 'ManageChannels', 'ManageSchemas', 'ManageUsers', 'ManageUserRoles', 'ManagePermissions', 'ManageSearchIndexes', 'ManageRecipients', 'ManageCollections', 'ManageListItems', 'ManageServiceProviders', 'ManageEmbeds', 'ManageTemplates'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Boolean> hasUserRightAsync(String userRight, final ServiceCallback<Boolean> serviceCallback);

    /**
     * Has UserRight.
     * Validates if the User has a given UserRight.
     *
     * @param userRight The UserRight to validate. Possible values include: 'ManageContent', 'ManageSharings', 'ManageDrives', 'ManageTransfer', 'ManageChannels', 'ManageSchemas', 'ManageUsers', 'ManageUserRoles', 'ManagePermissions', 'ManageSearchIndexes', 'ManageRecipients', 'ManageCollections', 'ManageListItems', 'ManageServiceProviders', 'ManageEmbeds', 'ManageTemplates'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the boolean object
     */
    Observable<Boolean> hasUserRightAsync(String userRight);

    /**
     * Has UserRight.
     * Validates if the User has a given UserRight.
     *
     * @param userRight The UserRight to validate. Possible values include: 'ManageContent', 'ManageSharings', 'ManageDrives', 'ManageTransfer', 'ManageChannels', 'ManageSchemas', 'ManageUsers', 'ManageUserRoles', 'ManagePermissions', 'ManageSearchIndexes', 'ManageRecipients', 'ManageCollections', 'ManageListItems', 'ManageServiceProviders', 'ManageEmbeds', 'ManageTemplates'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the boolean object
     */
    Observable<ServiceResponse<Boolean>> hasUserRightWithServiceResponseAsync(String userRight);

}
