/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark.implementation;

import retrofit2.Retrofit;
import picturepark.PermissionClients;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import picturepark.models.ContentPermissionSetDetail;
import picturepark.models.PermissionSetSearchRequest;
import picturepark.models.PermissionSetSearchResult;
import picturepark.models.SchemaPermissionSetDetail;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PermissionClients.
 */
public class PermissionClientsImpl implements PermissionClients {
    /** The Retrofit service to perform REST calls. */
    private PermissionClientsService service;
    /** The service client containing this operation class. */
    private PictureparkAPIV1Impl client;

    /**
     * Initializes an instance of PermissionClients.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PermissionClientsImpl(Retrofit retrofit, PictureparkAPIV1Impl client) {
        this.service = retrofit.create(PermissionClientsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for PermissionClients to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PermissionClientsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.PermissionClients searchContentPermissionSets" })
        @POST("v1/permission/contentPermissionSets/search")
        Observable<Response<ResponseBody>> searchContentPermissionSets(@Body PermissionSetSearchRequest request);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.PermissionClients getContentPermissionSet" })
        @GET("v1/permission/contentPermissionSets/{permissionSetId}")
        Observable<Response<ResponseBody>> getContentPermissionSet(@Path("permissionSetId") String permissionSetId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.PermissionClients searchSchemaPermissionSets" })
        @POST("v1/permission/schemaPermissionSets/search")
        Observable<Response<ResponseBody>> searchSchemaPermissionSets(@Body PermissionSetSearchRequest request);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.PermissionClients getSchemaPermissionSet" })
        @GET("v1/permission/schemaPermissionSets/{permissionSetId}")
        Observable<Response<ResponseBody>> getSchemaPermissionSet(@Path("permissionSetId") String permissionSetId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.PermissionClients getUserRights" })
        @GET("v1/permission/userPermissions")
        Observable<Response<ResponseBody>> getUserRights();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.PermissionClients hasUserRight" })
        @GET("v1/permission/userPermissions/{userRight}")
        Observable<Response<ResponseBody>> hasUserRight(@Path("userRight") String userRight);

    }

    /**
     * Search Content Permissions.
     * Searches content permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PermissionSetSearchResult object if successful.
     */
    public PermissionSetSearchResult searchContentPermissionSets(PermissionSetSearchRequest request) {
        return searchContentPermissionSetsWithServiceResponseAsync(request).toBlocking().single().body();
    }

    /**
     * Search Content Permissions.
     * Searches content permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PermissionSetSearchResult> searchContentPermissionSetsAsync(PermissionSetSearchRequest request, final ServiceCallback<PermissionSetSearchResult> serviceCallback) {
        return ServiceFuture.fromResponse(searchContentPermissionSetsWithServiceResponseAsync(request), serviceCallback);
    }

    /**
     * Search Content Permissions.
     * Searches content permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PermissionSetSearchResult object
     */
    public Observable<PermissionSetSearchResult> searchContentPermissionSetsAsync(PermissionSetSearchRequest request) {
        return searchContentPermissionSetsWithServiceResponseAsync(request).map(new Func1<ServiceResponse<PermissionSetSearchResult>, PermissionSetSearchResult>() {
            // @Override
            public PermissionSetSearchResult call(ServiceResponse<PermissionSetSearchResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Search Content Permissions.
     * Searches content permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PermissionSetSearchResult object
     */
    public Observable<ServiceResponse<PermissionSetSearchResult>> searchContentPermissionSetsWithServiceResponseAsync(PermissionSetSearchRequest request) {
        if (request == null) {
            throw new IllegalArgumentException("Parameter request is required and cannot be null.");
        }
        Validator.validate(request);
        return service.searchContentPermissionSets(request)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PermissionSetSearchResult>>>() {
                // @Override
                public Observable<ServiceResponse<PermissionSetSearchResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PermissionSetSearchResult> clientResponse = searchContentPermissionSetsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PermissionSetSearchResult> searchContentPermissionSetsDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PermissionSetSearchResult, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PermissionSetSearchResult>() { }.getType())
                .build(response);
    }

    /**
     * Get Content Permission - single.
     * Gets the content permission set detail information by the content permission set id.
     *
     * @param permissionSetId The content permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentPermissionSetDetail object if successful.
     */
    public ContentPermissionSetDetail getContentPermissionSet(String permissionSetId) {
        return getContentPermissionSetWithServiceResponseAsync(permissionSetId).toBlocking().single().body();
    }

    /**
     * Get Content Permission - single.
     * Gets the content permission set detail information by the content permission set id.
     *
     * @param permissionSetId The content permission set id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentPermissionSetDetail> getContentPermissionSetAsync(String permissionSetId, final ServiceCallback<ContentPermissionSetDetail> serviceCallback) {
        return ServiceFuture.fromResponse(getContentPermissionSetWithServiceResponseAsync(permissionSetId), serviceCallback);
    }

    /**
     * Get Content Permission - single.
     * Gets the content permission set detail information by the content permission set id.
     *
     * @param permissionSetId The content permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentPermissionSetDetail object
     */
    public Observable<ContentPermissionSetDetail> getContentPermissionSetAsync(String permissionSetId) {
        return getContentPermissionSetWithServiceResponseAsync(permissionSetId).map(new Func1<ServiceResponse<ContentPermissionSetDetail>, ContentPermissionSetDetail>() {
            // @Override
            public ContentPermissionSetDetail call(ServiceResponse<ContentPermissionSetDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Get Content Permission - single.
     * Gets the content permission set detail information by the content permission set id.
     *
     * @param permissionSetId The content permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentPermissionSetDetail object
     */
    public Observable<ServiceResponse<ContentPermissionSetDetail>> getContentPermissionSetWithServiceResponseAsync(String permissionSetId) {
        if (permissionSetId == null) {
            throw new IllegalArgumentException("Parameter permissionSetId is required and cannot be null.");
        }
        return service.getContentPermissionSet(permissionSetId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentPermissionSetDetail>>>() {
                // @Override
                public Observable<ServiceResponse<ContentPermissionSetDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentPermissionSetDetail> clientResponse = getContentPermissionSetDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ContentPermissionSetDetail> getContentPermissionSetDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ContentPermissionSetDetail, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ContentPermissionSetDetail>() { }.getType())
                .build(response);
    }

    /**
     * Search Schema PermissionSets.
     * Searches schema permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PermissionSetSearchResult object if successful.
     */
    public PermissionSetSearchResult searchSchemaPermissionSets(PermissionSetSearchRequest request) {
        return searchSchemaPermissionSetsWithServiceResponseAsync(request).toBlocking().single().body();
    }

    /**
     * Search Schema PermissionSets.
     * Searches schema permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PermissionSetSearchResult> searchSchemaPermissionSetsAsync(PermissionSetSearchRequest request, final ServiceCallback<PermissionSetSearchResult> serviceCallback) {
        return ServiceFuture.fromResponse(searchSchemaPermissionSetsWithServiceResponseAsync(request), serviceCallback);
    }

    /**
     * Search Schema PermissionSets.
     * Searches schema permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PermissionSetSearchResult object
     */
    public Observable<PermissionSetSearchResult> searchSchemaPermissionSetsAsync(PermissionSetSearchRequest request) {
        return searchSchemaPermissionSetsWithServiceResponseAsync(request).map(new Func1<ServiceResponse<PermissionSetSearchResult>, PermissionSetSearchResult>() {
            // @Override
            public PermissionSetSearchResult call(ServiceResponse<PermissionSetSearchResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Search Schema PermissionSets.
     * Searches schema permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PermissionSetSearchResult object
     */
    public Observable<ServiceResponse<PermissionSetSearchResult>> searchSchemaPermissionSetsWithServiceResponseAsync(PermissionSetSearchRequest request) {
        if (request == null) {
            throw new IllegalArgumentException("Parameter request is required and cannot be null.");
        }
        Validator.validate(request);
        return service.searchSchemaPermissionSets(request)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PermissionSetSearchResult>>>() {
                // @Override
                public Observable<ServiceResponse<PermissionSetSearchResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PermissionSetSearchResult> clientResponse = searchSchemaPermissionSetsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PermissionSetSearchResult> searchSchemaPermissionSetsDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PermissionSetSearchResult, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PermissionSetSearchResult>() { }.getType())
                .build(response);
    }

    /**
     * Get Schema PermissionSets - single.
     * Gets the schema permission set detail information by the schema permission set id.
     *
     * @param permissionSetId The schema permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SchemaPermissionSetDetail object if successful.
     */
    public SchemaPermissionSetDetail getSchemaPermissionSet(String permissionSetId) {
        return getSchemaPermissionSetWithServiceResponseAsync(permissionSetId).toBlocking().single().body();
    }

    /**
     * Get Schema PermissionSets - single.
     * Gets the schema permission set detail information by the schema permission set id.
     *
     * @param permissionSetId The schema permission set id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SchemaPermissionSetDetail> getSchemaPermissionSetAsync(String permissionSetId, final ServiceCallback<SchemaPermissionSetDetail> serviceCallback) {
        return ServiceFuture.fromResponse(getSchemaPermissionSetWithServiceResponseAsync(permissionSetId), serviceCallback);
    }

    /**
     * Get Schema PermissionSets - single.
     * Gets the schema permission set detail information by the schema permission set id.
     *
     * @param permissionSetId The schema permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaPermissionSetDetail object
     */
    public Observable<SchemaPermissionSetDetail> getSchemaPermissionSetAsync(String permissionSetId) {
        return getSchemaPermissionSetWithServiceResponseAsync(permissionSetId).map(new Func1<ServiceResponse<SchemaPermissionSetDetail>, SchemaPermissionSetDetail>() {
            // @Override
            public SchemaPermissionSetDetail call(ServiceResponse<SchemaPermissionSetDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Get Schema PermissionSets - single.
     * Gets the schema permission set detail information by the schema permission set id.
     *
     * @param permissionSetId The schema permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaPermissionSetDetail object
     */
    public Observable<ServiceResponse<SchemaPermissionSetDetail>> getSchemaPermissionSetWithServiceResponseAsync(String permissionSetId) {
        if (permissionSetId == null) {
            throw new IllegalArgumentException("Parameter permissionSetId is required and cannot be null.");
        }
        return service.getSchemaPermissionSet(permissionSetId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SchemaPermissionSetDetail>>>() {
                // @Override
                public Observable<ServiceResponse<SchemaPermissionSetDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SchemaPermissionSetDetail> clientResponse = getSchemaPermissionSetDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SchemaPermissionSetDetail> getSchemaPermissionSetDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SchemaPermissionSetDetail, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SchemaPermissionSetDetail>() { }.getType())
                .build(response);
    }

    /**
     * Get User rights.
     * Get all UserRights the current user has.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;String&gt; object if successful.
     */
    public List<String> getUserRights() {
        return getUserRightsWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Get User rights.
     * Get all UserRights the current user has.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<String>> getUserRightsAsync(final ServiceCallback<List<String>> serviceCallback) {
        return ServiceFuture.fromResponse(getUserRightsWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get User rights.
     * Get all UserRights the current user has.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;String&gt; object
     */
    public Observable<List<String>> getUserRightsAsync() {
        return getUserRightsWithServiceResponseAsync().map(new Func1<ServiceResponse<List<String>>, List<String>>() {
            // @Override
            public List<String> call(ServiceResponse<List<String>> response) {
                return response.body();
            }
        });
    }

    /**
     * Get User rights.
     * Get all UserRights the current user has.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;String&gt; object
     */
    public Observable<ServiceResponse<List<String>>> getUserRightsWithServiceResponseAsync() {
        return service.getUserRights()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<String>>>>() {
                // @Override
                public Observable<ServiceResponse<List<String>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<String>> clientResponse = getUserRightsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<String>> getUserRightsDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<List<String>, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<String>>() { }.getType())
                .build(response);
    }

    /**
     * Has UserRight.
     * Validates if the User has a given UserRight.
     *
     * @param userRight The UserRight to validate. Possible values include: 'ManageContent', 'ManageSharings', 'ManageDrives', 'ManageTransfer', 'ManageChannels', 'ManageSchemas', 'ManageUsers', 'ManageUserRoles', 'ManagePermissions', 'ManageSearchIndexes', 'ManageRecipients', 'ManageCollections', 'ManageListItems', 'ManageServiceProviders', 'ManageEmbeds', 'ManageTemplates'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the boolean object if successful.
     */
    public boolean hasUserRight(String userRight) {
        return hasUserRightWithServiceResponseAsync(userRight).toBlocking().single().body();
    }

    /**
     * Has UserRight.
     * Validates if the User has a given UserRight.
     *
     * @param userRight The UserRight to validate. Possible values include: 'ManageContent', 'ManageSharings', 'ManageDrives', 'ManageTransfer', 'ManageChannels', 'ManageSchemas', 'ManageUsers', 'ManageUserRoles', 'ManagePermissions', 'ManageSearchIndexes', 'ManageRecipients', 'ManageCollections', 'ManageListItems', 'ManageServiceProviders', 'ManageEmbeds', 'ManageTemplates'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Boolean> hasUserRightAsync(String userRight, final ServiceCallback<Boolean> serviceCallback) {
        return ServiceFuture.fromResponse(hasUserRightWithServiceResponseAsync(userRight), serviceCallback);
    }

    /**
     * Has UserRight.
     * Validates if the User has a given UserRight.
     *
     * @param userRight The UserRight to validate. Possible values include: 'ManageContent', 'ManageSharings', 'ManageDrives', 'ManageTransfer', 'ManageChannels', 'ManageSchemas', 'ManageUsers', 'ManageUserRoles', 'ManagePermissions', 'ManageSearchIndexes', 'ManageRecipients', 'ManageCollections', 'ManageListItems', 'ManageServiceProviders', 'ManageEmbeds', 'ManageTemplates'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Boolean object
     */
    public Observable<Boolean> hasUserRightAsync(String userRight) {
        return hasUserRightWithServiceResponseAsync(userRight).map(new Func1<ServiceResponse<Boolean>, Boolean>() {
            // @Override
            public Boolean call(ServiceResponse<Boolean> response) {
                return response.body();
            }
        });
    }

    /**
     * Has UserRight.
     * Validates if the User has a given UserRight.
     *
     * @param userRight The UserRight to validate. Possible values include: 'ManageContent', 'ManageSharings', 'ManageDrives', 'ManageTransfer', 'ManageChannels', 'ManageSchemas', 'ManageUsers', 'ManageUserRoles', 'ManagePermissions', 'ManageSearchIndexes', 'ManageRecipients', 'ManageCollections', 'ManageListItems', 'ManageServiceProviders', 'ManageEmbeds', 'ManageTemplates'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Boolean object
     */
    public Observable<ServiceResponse<Boolean>> hasUserRightWithServiceResponseAsync(String userRight) {
        if (userRight == null) {
            throw new IllegalArgumentException("Parameter userRight is required and cannot be null.");
        }
        return service.hasUserRight(userRight)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Boolean>>>() {
                // @Override
                public Observable<ServiceResponse<Boolean>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Boolean> clientResponse = hasUserRightDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Boolean> hasUserRightDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Boolean, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Boolean>() { }.getType())
                .build(response);
    }

}
