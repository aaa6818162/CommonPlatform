/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark.implementation;

import retrofit2.Retrofit;
import picturepark.BusinessProcessClients;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import picturepark.models.BusinessProcessDetails;
import picturepark.models.BusinessProcessSearchRequest;
import picturepark.models.BusinessProcessSearchResult;
import picturepark.models.BusinessProcessWaitResult;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in BusinessProcessClients.
 */
public class BusinessProcessClientsImpl implements BusinessProcessClients {
    /** The Retrofit service to perform REST calls. */
    private BusinessProcessClientsService service;
    /** The service client containing this operation class. */
    private PictureparkAPIV1Impl client;

    /**
     * Initializes an instance of BusinessProcessClients.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public BusinessProcessClientsImpl(Retrofit retrofit, PictureparkAPIV1Impl client) {
        this.service = retrofit.create(BusinessProcessClientsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for BusinessProcessClients to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BusinessProcessClientsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.BusinessProcessClients search" })
        @POST("v1/businessProcesses/search")
        Observable<Response<ResponseBody>> search(@Body BusinessProcessSearchRequest businessProcessSearchRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.BusinessProcessClients wait" })
        @GET("v1/businessProcesses/{processId}/wait")
        Observable<Response<ResponseBody>> wait(@Path("processId") String processId, @Query("states") String states, @Query("lifeCycleIds") String lifeCycleIds, @Query("timeout") String timeout);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.BusinessProcessClients waitForCompletion" })
        @GET("v1/businessProcesses/{processId}/waitCompletion")
        Observable<Response<ResponseBody>> waitForCompletion(@Path("processId") String processId, @Query("timeout") String timeout);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.BusinessProcessClients getDetails" })
        @GET("v1/businessProcesses/{processId}/details")
        Observable<Response<ResponseBody>> getDetails(@Path("processId") String processId);

    }

    /**
     * Search.
     * Search for business processes.
     *
     * @param businessProcessSearchRequest The business process request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcessSearchResult object if successful.
     */
    public BusinessProcessSearchResult search(BusinessProcessSearchRequest businessProcessSearchRequest) {
        return searchWithServiceResponseAsync(businessProcessSearchRequest).toBlocking().single().body();
    }

    /**
     * Search.
     * Search for business processes.
     *
     * @param businessProcessSearchRequest The business process request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BusinessProcessSearchResult> searchAsync(BusinessProcessSearchRequest businessProcessSearchRequest, final ServiceCallback<BusinessProcessSearchResult> serviceCallback) {
        return ServiceFuture.fromResponse(searchWithServiceResponseAsync(businessProcessSearchRequest), serviceCallback);
    }

    /**
     * Search.
     * Search for business processes.
     *
     * @param businessProcessSearchRequest The business process request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessSearchResult object
     */
    public Observable<BusinessProcessSearchResult> searchAsync(BusinessProcessSearchRequest businessProcessSearchRequest) {
        return searchWithServiceResponseAsync(businessProcessSearchRequest).map(new Func1<ServiceResponse<BusinessProcessSearchResult>, BusinessProcessSearchResult>() {
            // @Override
            public BusinessProcessSearchResult call(ServiceResponse<BusinessProcessSearchResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Search.
     * Search for business processes.
     *
     * @param businessProcessSearchRequest The business process request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessSearchResult object
     */
    public Observable<ServiceResponse<BusinessProcessSearchResult>> searchWithServiceResponseAsync(BusinessProcessSearchRequest businessProcessSearchRequest) {
        if (businessProcessSearchRequest == null) {
            throw new IllegalArgumentException("Parameter businessProcessSearchRequest is required and cannot be null.");
        }
        Validator.validate(businessProcessSearchRequest);
        return service.search(businessProcessSearchRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BusinessProcessSearchResult>>>() {
                // @Override
                public Observable<ServiceResponse<BusinessProcessSearchResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BusinessProcessSearchResult> clientResponse = searchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BusinessProcessSearchResult> searchDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BusinessProcessSearchResult, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BusinessProcessSearchResult>() { }.getType())
                .build(response);
    }

    /**
     * Wait.
     * Wait for given process state or lifeCycle. LifeCycles are the same over all business processes. States depend on specific states of the business process.
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcessWaitResult object if successful.
     */
    public BusinessProcessWaitResult wait(String processId) {
        return waitWithServiceResponseAsync(processId).toBlocking().single().body();
    }

    /**
     * Wait.
     * Wait for given process state or lifeCycle. LifeCycles are the same over all business processes. States depend on specific states of the business process.
     *
     * @param processId The process id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BusinessProcessWaitResult> waitAsync(String processId, final ServiceCallback<BusinessProcessWaitResult> serviceCallback) {
        return ServiceFuture.fromResponse(waitWithServiceResponseAsync(processId), serviceCallback);
    }

    /**
     * Wait.
     * Wait for given process state or lifeCycle. LifeCycles are the same over all business processes. States depend on specific states of the business process.
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessWaitResult object
     */
    public Observable<BusinessProcessWaitResult> waitAsync(String processId) {
        return waitWithServiceResponseAsync(processId).map(new Func1<ServiceResponse<BusinessProcessWaitResult>, BusinessProcessWaitResult>() {
            // @Override
            public BusinessProcessWaitResult call(ServiceResponse<BusinessProcessWaitResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Wait.
     * Wait for given process state or lifeCycle. LifeCycles are the same over all business processes. States depend on specific states of the business process.
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessWaitResult object
     */
    public Observable<ServiceResponse<BusinessProcessWaitResult>> waitWithServiceResponseAsync(String processId) {
        if (processId == null) {
            throw new IllegalArgumentException("Parameter processId is required and cannot be null.");
        }
        final String states = null;
        final String lifeCycleIds = null;
        final String timeout = null;
        return service.wait(processId, states, lifeCycleIds, timeout)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BusinessProcessWaitResult>>>() {
                // @Override
                public Observable<ServiceResponse<BusinessProcessWaitResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BusinessProcessWaitResult> clientResponse = waitDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Wait.
     * Wait for given process state or lifeCycle. LifeCycles are the same over all business processes. States depend on specific states of the business process.
     *
     * @param processId The process id
     * @param states The states to wait for
     * @param lifeCycleIds Business process lifeCycle to wait for
     * @param timeout The timeout to wait for completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcessWaitResult object if successful.
     */
    public BusinessProcessWaitResult wait(String processId, String states, String lifeCycleIds, String timeout) {
        return waitWithServiceResponseAsync(processId, states, lifeCycleIds, timeout).toBlocking().single().body();
    }

    /**
     * Wait.
     * Wait for given process state or lifeCycle. LifeCycles are the same over all business processes. States depend on specific states of the business process.
     *
     * @param processId The process id
     * @param states The states to wait for
     * @param lifeCycleIds Business process lifeCycle to wait for
     * @param timeout The timeout to wait for completion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BusinessProcessWaitResult> waitAsync(String processId, String states, String lifeCycleIds, String timeout, final ServiceCallback<BusinessProcessWaitResult> serviceCallback) {
        return ServiceFuture.fromResponse(waitWithServiceResponseAsync(processId, states, lifeCycleIds, timeout), serviceCallback);
    }

    /**
     * Wait.
     * Wait for given process state or lifeCycle. LifeCycles are the same over all business processes. States depend on specific states of the business process.
     *
     * @param processId The process id
     * @param states The states to wait for
     * @param lifeCycleIds Business process lifeCycle to wait for
     * @param timeout The timeout to wait for completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessWaitResult object
     */
    public Observable<BusinessProcessWaitResult> waitAsync(String processId, String states, String lifeCycleIds, String timeout) {
        return waitWithServiceResponseAsync(processId, states, lifeCycleIds, timeout).map(new Func1<ServiceResponse<BusinessProcessWaitResult>, BusinessProcessWaitResult>() {
            // @Override
            public BusinessProcessWaitResult call(ServiceResponse<BusinessProcessWaitResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Wait.
     * Wait for given process state or lifeCycle. LifeCycles are the same over all business processes. States depend on specific states of the business process.
     *
     * @param processId The process id
     * @param states The states to wait for
     * @param lifeCycleIds Business process lifeCycle to wait for
     * @param timeout The timeout to wait for completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessWaitResult object
     */
    public Observable<ServiceResponse<BusinessProcessWaitResult>> waitWithServiceResponseAsync(String processId, String states, String lifeCycleIds, String timeout) {
        if (processId == null) {
            throw new IllegalArgumentException("Parameter processId is required and cannot be null.");
        }
        return service.wait(processId, states, lifeCycleIds, timeout)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BusinessProcessWaitResult>>>() {
                // @Override
                public Observable<ServiceResponse<BusinessProcessWaitResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BusinessProcessWaitResult> clientResponse = waitDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BusinessProcessWaitResult> waitDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BusinessProcessWaitResult, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BusinessProcessWaitResult>() { }.getType())
                .build(response);
    }

    /**
     * Wait for completion.
     * Wait for given process to complete with lifeCycle "Succeeded", "Cancelled" or "Failed".
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcessWaitResult object if successful.
     */
    public BusinessProcessWaitResult waitForCompletion(String processId) {
        return waitForCompletionWithServiceResponseAsync(processId).toBlocking().single().body();
    }

    /**
     * Wait for completion.
     * Wait for given process to complete with lifeCycle "Succeeded", "Cancelled" or "Failed".
     *
     * @param processId The process id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BusinessProcessWaitResult> waitForCompletionAsync(String processId, final ServiceCallback<BusinessProcessWaitResult> serviceCallback) {
        return ServiceFuture.fromResponse(waitForCompletionWithServiceResponseAsync(processId), serviceCallback);
    }

    /**
     * Wait for completion.
     * Wait for given process to complete with lifeCycle "Succeeded", "Cancelled" or "Failed".
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessWaitResult object
     */
    public Observable<BusinessProcessWaitResult> waitForCompletionAsync(String processId) {
        return waitForCompletionWithServiceResponseAsync(processId).map(new Func1<ServiceResponse<BusinessProcessWaitResult>, BusinessProcessWaitResult>() {
            // @Override
            public BusinessProcessWaitResult call(ServiceResponse<BusinessProcessWaitResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Wait for completion.
     * Wait for given process to complete with lifeCycle "Succeeded", "Cancelled" or "Failed".
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessWaitResult object
     */
    public Observable<ServiceResponse<BusinessProcessWaitResult>> waitForCompletionWithServiceResponseAsync(String processId) {
        if (processId == null) {
            throw new IllegalArgumentException("Parameter processId is required and cannot be null.");
        }
        final String timeout = null;
        return service.waitForCompletion(processId, timeout)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BusinessProcessWaitResult>>>() {
                // @Override
                public Observable<ServiceResponse<BusinessProcessWaitResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BusinessProcessWaitResult> clientResponse = waitForCompletionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Wait for completion.
     * Wait for given process to complete with lifeCycle "Succeeded", "Cancelled" or "Failed".
     *
     * @param processId The process id
     * @param timeout The timeout to wait for completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcessWaitResult object if successful.
     */
    public BusinessProcessWaitResult waitForCompletion(String processId, String timeout) {
        return waitForCompletionWithServiceResponseAsync(processId, timeout).toBlocking().single().body();
    }

    /**
     * Wait for completion.
     * Wait for given process to complete with lifeCycle "Succeeded", "Cancelled" or "Failed".
     *
     * @param processId The process id
     * @param timeout The timeout to wait for completion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BusinessProcessWaitResult> waitForCompletionAsync(String processId, String timeout, final ServiceCallback<BusinessProcessWaitResult> serviceCallback) {
        return ServiceFuture.fromResponse(waitForCompletionWithServiceResponseAsync(processId, timeout), serviceCallback);
    }

    /**
     * Wait for completion.
     * Wait for given process to complete with lifeCycle "Succeeded", "Cancelled" or "Failed".
     *
     * @param processId The process id
     * @param timeout The timeout to wait for completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessWaitResult object
     */
    public Observable<BusinessProcessWaitResult> waitForCompletionAsync(String processId, String timeout) {
        return waitForCompletionWithServiceResponseAsync(processId, timeout).map(new Func1<ServiceResponse<BusinessProcessWaitResult>, BusinessProcessWaitResult>() {
            // @Override
            public BusinessProcessWaitResult call(ServiceResponse<BusinessProcessWaitResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Wait for completion.
     * Wait for given process to complete with lifeCycle "Succeeded", "Cancelled" or "Failed".
     *
     * @param processId The process id
     * @param timeout The timeout to wait for completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessWaitResult object
     */
    public Observable<ServiceResponse<BusinessProcessWaitResult>> waitForCompletionWithServiceResponseAsync(String processId, String timeout) {
        if (processId == null) {
            throw new IllegalArgumentException("Parameter processId is required and cannot be null.");
        }
        return service.waitForCompletion(processId, timeout)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BusinessProcessWaitResult>>>() {
                // @Override
                public Observable<ServiceResponse<BusinessProcessWaitResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BusinessProcessWaitResult> clientResponse = waitForCompletionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BusinessProcessWaitResult> waitForCompletionDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BusinessProcessWaitResult, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BusinessProcessWaitResult>() { }.getType())
                .build(response);
    }

    /**
     * Get details.
     * Get details of a given business process.
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcessDetails object if successful.
     */
    public BusinessProcessDetails getDetails(String processId) {
        return getDetailsWithServiceResponseAsync(processId).toBlocking().single().body();
    }

    /**
     * Get details.
     * Get details of a given business process.
     *
     * @param processId The process id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BusinessProcessDetails> getDetailsAsync(String processId, final ServiceCallback<BusinessProcessDetails> serviceCallback) {
        return ServiceFuture.fromResponse(getDetailsWithServiceResponseAsync(processId), serviceCallback);
    }

    /**
     * Get details.
     * Get details of a given business process.
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessDetails object
     */
    public Observable<BusinessProcessDetails> getDetailsAsync(String processId) {
        return getDetailsWithServiceResponseAsync(processId).map(new Func1<ServiceResponse<BusinessProcessDetails>, BusinessProcessDetails>() {
            // @Override
            public BusinessProcessDetails call(ServiceResponse<BusinessProcessDetails> response) {
                return response.body();
            }
        });
    }

    /**
     * Get details.
     * Get details of a given business process.
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessDetails object
     */
    public Observable<ServiceResponse<BusinessProcessDetails>> getDetailsWithServiceResponseAsync(String processId) {
        if (processId == null) {
            throw new IllegalArgumentException("Parameter processId is required and cannot be null.");
        }
        return service.getDetails(processId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BusinessProcessDetails>>>() {
                // @Override
                public Observable<ServiceResponse<BusinessProcessDetails>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BusinessProcessDetails> clientResponse = getDetailsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BusinessProcessDetails> getDetailsDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BusinessProcessDetails, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BusinessProcessDetails>() { }.getType())
                .build(response);
    }

}
