/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark.implementation;

import retrofit2.Retrofit;
import picturepark.PublicAccessClients;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import picturepark.models.ShareDetail;
import picturepark.models.VersionInfo;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PublicAccessClients.
 */
public class PublicAccessClientsImpl implements PublicAccessClients {
    /** The Retrofit service to perform REST calls. */
    private PublicAccessClientsService service;
    /** The service client containing this operation class. */
    private PictureparkAPIV1Impl client;

    /**
     * Initializes an instance of PublicAccessClients.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PublicAccessClientsImpl(Retrofit retrofit, PictureparkAPIV1Impl client) {
        this.service = retrofit.create(PublicAccessClientsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for PublicAccessClients to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PublicAccessClientsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.PublicAccessClients getVersion" })
        @GET("v1/publicAccess/version")
        Observable<Response<ResponseBody>> getVersion();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.PublicAccessClients getShare" })
        @GET("v1/publicAccess/shares/{token}")
        Observable<Response<ResponseBody>> getShare(@Path("token") String token);

    }

    /**
     * Get Version.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VersionInfo object if successful.
     */
    public VersionInfo getVersion() {
        return getVersionWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Get Version.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VersionInfo> getVersionAsync(final ServiceCallback<VersionInfo> serviceCallback) {
        return ServiceFuture.fromResponse(getVersionWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get Version.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VersionInfo object
     */
    public Observable<VersionInfo> getVersionAsync() {
        return getVersionWithServiceResponseAsync().map(new Func1<ServiceResponse<VersionInfo>, VersionInfo>() {
            // @Override
            public VersionInfo call(ServiceResponse<VersionInfo> response) {
                return response.body();
            }
        });
    }

    /**
     * Get Version.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VersionInfo object
     */
    public Observable<ServiceResponse<VersionInfo>> getVersionWithServiceResponseAsync() {
        return service.getVersion()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<VersionInfo>>>() {
                // @Override
                public Observable<ServiceResponse<VersionInfo>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<VersionInfo> clientResponse = getVersionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<VersionInfo> getVersionDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<VersionInfo, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<VersionInfo>() { }.getType())
                .build(response);
    }

    /**
     * Get Share.
     *
     * @param token The token
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ShareDetail object if successful.
     */
    public ShareDetail getShare(String token) {
        return getShareWithServiceResponseAsync(token).toBlocking().single().body();
    }

    /**
     * Get Share.
     *
     * @param token The token
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ShareDetail> getShareAsync(String token, final ServiceCallback<ShareDetail> serviceCallback) {
        return ServiceFuture.fromResponse(getShareWithServiceResponseAsync(token), serviceCallback);
    }

    /**
     * Get Share.
     *
     * @param token The token
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ShareDetail object
     */
    public Observable<ShareDetail> getShareAsync(String token) {
        return getShareWithServiceResponseAsync(token).map(new Func1<ServiceResponse<ShareDetail>, ShareDetail>() {
            // @Override
            public ShareDetail call(ServiceResponse<ShareDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Get Share.
     *
     * @param token The token
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ShareDetail object
     */
    public Observable<ServiceResponse<ShareDetail>> getShareWithServiceResponseAsync(String token) {
        if (token == null) {
            throw new IllegalArgumentException("Parameter token is required and cannot be null.");
        }
        return service.getShare(token)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ShareDetail>>>() {
                // @Override
                public Observable<ServiceResponse<ShareDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ShareDetail> clientResponse = getShareDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ShareDetail> getShareDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ShareDetail, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ShareDetail>() { }.getType())
                .build(response);
    }

}
