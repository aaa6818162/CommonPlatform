/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import picturepark.models.Blacklist;
import picturepark.models.CreateTransferRequest;
import picturepark.models.FileTransfer2ContentCreateRequest;
import picturepark.models.FileTransferDeleteRequest;
import picturepark.models.FileTransferDetail;
import picturepark.models.FileTransferPartial2ContentCreateRequest;
import picturepark.models.FileTransferSearchRequest;
import picturepark.models.FileTransferSearchResult;
import picturepark.models.Transfer;
import picturepark.models.TransferDetail;
import picturepark.models.TransferSearchRequest;
import picturepark.models.TransferSearchResult;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in TransferClients.
 */
public interface TransferClients {
    /**
     * Get Transferdetail.
     *
     * @param transferId The tranfer id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransferDetail object if successful.
     */
    TransferDetail get(String transferId);

    /**
     * Get Transferdetail.
     *
     * @param transferId The tranfer id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransferDetail> getAsync(String transferId, final ServiceCallback<TransferDetail> serviceCallback);

    /**
     * Get Transferdetail.
     *
     * @param transferId The tranfer id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransferDetail object
     */
    Observable<TransferDetail> getAsync(String transferId);

    /**
     * Get Transferdetail.
     *
     * @param transferId The tranfer id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransferDetail object
     */
    Observable<ServiceResponse<TransferDetail>> getWithServiceResponseAsync(String transferId);

    /**
     * Delete Transfer.
     *
     * @param transferId The tranfer id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String transferId);

    /**
     * Delete Transfer.
     *
     * @param transferId The tranfer id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(String transferId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete Transfer.
     *
     * @param transferId The tranfer id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteAsync(String transferId);

    /**
     * Delete Transfer.
     *
     * @param transferId The tranfer id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String transferId);

    /**
     * Search.
     *
     * @param request The transfer search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransferSearchResult object if successful.
     */
    TransferSearchResult search(TransferSearchRequest request);

    /**
     * Search.
     *
     * @param request The transfer search request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransferSearchResult> searchAsync(TransferSearchRequest request, final ServiceCallback<TransferSearchResult> serviceCallback);

    /**
     * Search.
     *
     * @param request The transfer search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransferSearchResult object
     */
    Observable<TransferSearchResult> searchAsync(TransferSearchRequest request);

    /**
     * Search.
     *
     * @param request The transfer search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransferSearchResult object
     */
    Observable<ServiceResponse<TransferSearchResult>> searchWithServiceResponseAsync(TransferSearchRequest request);

    /**
     * Cancels a transfer.
     *
     * @param transferId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void cancelTransfer(String transferId);

    /**
     * Cancels a transfer.
     *
     * @param transferId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> cancelTransferAsync(String transferId, final ServiceCallback<Void> serviceCallback);

    /**
     * Cancels a transfer.
     *
     * @param transferId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> cancelTransferAsync(String transferId);

    /**
     * Cancels a transfer.
     *
     * @param transferId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> cancelTransferWithServiceResponseAsync(String transferId);

    /**
     * Create Transfer.
     *
     * @param request The create transfer request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Transfer object if successful.
     */
    Transfer create(CreateTransferRequest request);

    /**
     * Create Transfer.
     *
     * @param request The create transfer request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Transfer> createAsync(CreateTransferRequest request, final ServiceCallback<Transfer> serviceCallback);

    /**
     * Create Transfer.
     *
     * @param request The create transfer request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Transfer object
     */
    Observable<Transfer> createAsync(CreateTransferRequest request);

    /**
     * Create Transfer.
     *
     * @param request The create transfer request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Transfer object
     */
    Observable<ServiceResponse<Transfer>> createWithServiceResponseAsync(CreateTransferRequest request);

    /**
     * Get File.
     *
     * @param fileTransferId The filetransfer id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FileTransferDetail object if successful.
     */
    FileTransferDetail getFile(String fileTransferId);

    /**
     * Get File.
     *
     * @param fileTransferId The filetransfer id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<FileTransferDetail> getFileAsync(String fileTransferId, final ServiceCallback<FileTransferDetail> serviceCallback);

    /**
     * Get File.
     *
     * @param fileTransferId The filetransfer id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FileTransferDetail object
     */
    Observable<FileTransferDetail> getFileAsync(String fileTransferId);

    /**
     * Get File.
     *
     * @param fileTransferId The filetransfer id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FileTransferDetail object
     */
    Observable<ServiceResponse<FileTransferDetail>> getFileWithServiceResponseAsync(String fileTransferId);

    /**
     * Search for files.
     *
     * @param request The file transfer search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FileTransferSearchResult object if successful.
     */
    FileTransferSearchResult searchFiles(FileTransferSearchRequest request);

    /**
     * Search for files.
     *
     * @param request The file transfer search request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<FileTransferSearchResult> searchFilesAsync(FileTransferSearchRequest request, final ServiceCallback<FileTransferSearchResult> serviceCallback);

    /**
     * Search for files.
     *
     * @param request The file transfer search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FileTransferSearchResult object
     */
    Observable<FileTransferSearchResult> searchFilesAsync(FileTransferSearchRequest request);

    /**
     * Search for files.
     *
     * @param request The file transfer search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FileTransferSearchResult object
     */
    Observable<ServiceResponse<FileTransferSearchResult>> searchFilesWithServiceResponseAsync(FileTransferSearchRequest request);

    /**
     * Get Blacklist.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Blacklist object if successful.
     */
    Blacklist getBlacklist();

    /**
     * Get Blacklist.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Blacklist> getBlacklistAsync(final ServiceCallback<Blacklist> serviceCallback);

    /**
     * Get Blacklist.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Blacklist object
     */
    Observable<Blacklist> getBlacklistAsync();

    /**
     * Get Blacklist.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Blacklist object
     */
    Observable<ServiceResponse<Blacklist>> getBlacklistWithServiceResponseAsync();

    /**
     * Delete Files.
     *
     * @param request The filetransfer delete request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteFiles(FileTransferDeleteRequest request);

    /**
     * Delete Files.
     *
     * @param request The filetransfer delete request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteFilesAsync(FileTransferDeleteRequest request, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete Files.
     *
     * @param request The filetransfer delete request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteFilesAsync(FileTransferDeleteRequest request);

    /**
     * Delete Files.
     *
     * @param request The filetransfer delete request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteFilesWithServiceResponseAsync(FileTransferDeleteRequest request);

    /**
     * Import transfer.
     *
     * @param transferId The tranfer id
     * @param request The filetransfer to content create request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Transfer object if successful.
     */
    Transfer importTransfer(String transferId, FileTransfer2ContentCreateRequest request);

    /**
     * Import transfer.
     *
     * @param transferId The tranfer id
     * @param request The filetransfer to content create request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Transfer> importTransferAsync(String transferId, FileTransfer2ContentCreateRequest request, final ServiceCallback<Transfer> serviceCallback);

    /**
     * Import transfer.
     *
     * @param transferId The tranfer id
     * @param request The filetransfer to content create request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Transfer object
     */
    Observable<Transfer> importTransferAsync(String transferId, FileTransfer2ContentCreateRequest request);

    /**
     * Import transfer.
     *
     * @param transferId The tranfer id
     * @param request The filetransfer to content create request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Transfer object
     */
    Observable<ServiceResponse<Transfer>> importTransferWithServiceResponseAsync(String transferId, FileTransfer2ContentCreateRequest request);

    /**
     * Create a partial import.
     *
     * @param transferId The transfer id
     * @param request The filetransfer partial to content create request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Transfer object if successful.
     */
    Transfer partialImport(String transferId, FileTransferPartial2ContentCreateRequest request);

    /**
     * Create a partial import.
     *
     * @param transferId The transfer id
     * @param request The filetransfer partial to content create request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Transfer> partialImportAsync(String transferId, FileTransferPartial2ContentCreateRequest request, final ServiceCallback<Transfer> serviceCallback);

    /**
     * Create a partial import.
     *
     * @param transferId The transfer id
     * @param request The filetransfer partial to content create request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Transfer object
     */
    Observable<Transfer> partialImportAsync(String transferId, FileTransferPartial2ContentCreateRequest request);

    /**
     * Create a partial import.
     *
     * @param transferId The transfer id
     * @param request The filetransfer partial to content create request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Transfer object
     */
    Observable<ServiceResponse<Transfer>> partialImportWithServiceResponseAsync(String transferId, FileTransferPartial2ContentCreateRequest request);

    /**
     * Upload file.
     *
     * @param transferId the String value
     * @param identifier the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void uploadFile(String transferId, String identifier);

    /**
     * Upload file.
     *
     * @param transferId the String value
     * @param identifier the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> uploadFileAsync(String transferId, String identifier, final ServiceCallback<Void> serviceCallback);

    /**
     * Upload file.
     *
     * @param transferId the String value
     * @param identifier the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> uploadFileAsync(String transferId, String identifier);

    /**
     * Upload file.
     *
     * @param transferId the String value
     * @param identifier the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> uploadFileWithServiceResponseAsync(String transferId, String identifier);
    /**
     * Upload file.
     *
     * @param transferId the String value
     * @param identifier the String value
     * @param formFile Gets or sets the form file.
     * @param relativePath Relative path of the uploading file
     * @param chunkNumber Current chunk number. starts with 1
     * @param currentChunkSize Size in bytes of the current chunk
     * @param totalSize Total size in bytes of the uploading file
     * @param totalChunks Total chunks of the uploading file
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void uploadFile(String transferId, String identifier, byte[] formFile, String relativePath, String chunkNumber, String currentChunkSize, String totalSize, String totalChunks);

    /**
     * Upload file.
     *
     * @param transferId the String value
     * @param identifier the String value
     * @param formFile Gets or sets the form file.
     * @param relativePath Relative path of the uploading file
     * @param chunkNumber Current chunk number. starts with 1
     * @param currentChunkSize Size in bytes of the current chunk
     * @param totalSize Total size in bytes of the uploading file
     * @param totalChunks Total chunks of the uploading file
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> uploadFileAsync(String transferId, String identifier, byte[] formFile, String relativePath, String chunkNumber, String currentChunkSize, String totalSize, String totalChunks, final ServiceCallback<Void> serviceCallback);

    /**
     * Upload file.
     *
     * @param transferId the String value
     * @param identifier the String value
     * @param formFile Gets or sets the form file.
     * @param relativePath Relative path of the uploading file
     * @param chunkNumber Current chunk number. starts with 1
     * @param currentChunkSize Size in bytes of the current chunk
     * @param totalSize Total size in bytes of the uploading file
     * @param totalChunks Total chunks of the uploading file
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> uploadFileAsync(String transferId, String identifier, byte[] formFile, String relativePath, String chunkNumber, String currentChunkSize, String totalSize, String totalChunks);

    /**
     * Upload file.
     *
     * @param transferId the String value
     * @param identifier the String value
     * @param formFile Gets or sets the form file.
     * @param relativePath Relative path of the uploading file
     * @param chunkNumber Current chunk number. starts with 1
     * @param currentChunkSize Size in bytes of the current chunk
     * @param totalSize Total size in bytes of the uploading file
     * @param totalChunks Total chunks of the uploading file
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> uploadFileWithServiceResponseAsync(String transferId, String identifier, byte[] formFile, String relativePath, String chunkNumber, String currentChunkSize, String totalSize, String totalChunks);

}
