/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark.implementation;

import retrofit2.Retrofit;
import picturepark.OutputClients;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import picturepark.models.ContentsByIdsRequest;
import picturepark.models.OutputDetail;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in OutputClients.
 */
public class OutputClientsImpl implements OutputClients {
    /** The Retrofit service to perform REST calls. */
    private OutputClientsService service;
    /** The service client containing this operation class. */
    private PictureparkAPIV1Impl client;

    /**
     * Initializes an instance of OutputClients.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public OutputClientsImpl(Retrofit retrofit, PictureparkAPIV1Impl client) {
        this.service = retrofit.create(OutputClientsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for OutputClients to be
     * used by Retrofit to perform actually REST calls.
     */
    interface OutputClientsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.OutputClients getByContentIds" })
        @POST("v1/outputs")
        Observable<Response<ResponseBody>> getByContentIds(@Body ContentsByIdsRequest contentsByIdsRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.OutputClients get" })
        @GET("v1/outputs/{outputId}")
        Observable<Response<ResponseBody>> get(@Path("outputId") String outputId);

    }

    /**
     * Get outputs by contentIds.
     * Gets output documents related for given content ids.
     *
     * @param contentsByIdsRequest Contains the list of contentIds for which the outputs are requested
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;OutputDetail&gt; object if successful.
     */
    public List<OutputDetail> getByContentIds(ContentsByIdsRequest contentsByIdsRequest) {
        return getByContentIdsWithServiceResponseAsync(contentsByIdsRequest).toBlocking().single().body();
    }

    /**
     * Get outputs by contentIds.
     * Gets output documents related for given content ids.
     *
     * @param contentsByIdsRequest Contains the list of contentIds for which the outputs are requested
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<OutputDetail>> getByContentIdsAsync(ContentsByIdsRequest contentsByIdsRequest, final ServiceCallback<List<OutputDetail>> serviceCallback) {
        return ServiceFuture.fromResponse(getByContentIdsWithServiceResponseAsync(contentsByIdsRequest), serviceCallback);
    }

    /**
     * Get outputs by contentIds.
     * Gets output documents related for given content ids.
     *
     * @param contentsByIdsRequest Contains the list of contentIds for which the outputs are requested
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;OutputDetail&gt; object
     */
    public Observable<List<OutputDetail>> getByContentIdsAsync(ContentsByIdsRequest contentsByIdsRequest) {
        return getByContentIdsWithServiceResponseAsync(contentsByIdsRequest).map(new Func1<ServiceResponse<List<OutputDetail>>, List<OutputDetail>>() {
            // @Override
            public List<OutputDetail> call(ServiceResponse<List<OutputDetail>> response) {
                return response.body();
            }
        });
    }

    /**
     * Get outputs by contentIds.
     * Gets output documents related for given content ids.
     *
     * @param contentsByIdsRequest Contains the list of contentIds for which the outputs are requested
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;OutputDetail&gt; object
     */
    public Observable<ServiceResponse<List<OutputDetail>>> getByContentIdsWithServiceResponseAsync(ContentsByIdsRequest contentsByIdsRequest) {
        if (contentsByIdsRequest == null) {
            throw new IllegalArgumentException("Parameter contentsByIdsRequest is required and cannot be null.");
        }
        Validator.validate(contentsByIdsRequest);
        return service.getByContentIds(contentsByIdsRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<OutputDetail>>>>() {
                // @Override
                public Observable<ServiceResponse<List<OutputDetail>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<OutputDetail>> clientResponse = getByContentIdsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<OutputDetail>> getByContentIdsDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<OutputDetail>, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<OutputDetail>>() { }.getType())
                .build(response);
    }

    /**
     * Get - single.
     * Gets a output document by id.
     *
     * @param outputId The output id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OutputDetail object if successful.
     */
    public OutputDetail get(String outputId) {
        return getWithServiceResponseAsync(outputId).toBlocking().single().body();
    }

    /**
     * Get - single.
     * Gets a output document by id.
     *
     * @param outputId The output id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OutputDetail> getAsync(String outputId, final ServiceCallback<OutputDetail> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(outputId), serviceCallback);
    }

    /**
     * Get - single.
     * Gets a output document by id.
     *
     * @param outputId The output id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OutputDetail object
     */
    public Observable<OutputDetail> getAsync(String outputId) {
        return getWithServiceResponseAsync(outputId).map(new Func1<ServiceResponse<OutputDetail>, OutputDetail>() {
            // @Override
            public OutputDetail call(ServiceResponse<OutputDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Get - single.
     * Gets a output document by id.
     *
     * @param outputId The output id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OutputDetail object
     */
    public Observable<ServiceResponse<OutputDetail>> getWithServiceResponseAsync(String outputId) {
        if (outputId == null) {
            throw new IllegalArgumentException("Parameter outputId is required and cannot be null.");
        }
        return service.get(outputId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OutputDetail>>>() {
                // @Override
                public Observable<ServiceResponse<OutputDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OutputDetail> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OutputDetail> getDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OutputDetail, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OutputDetail>() { }.getType())
                .build(response);
    }

}
