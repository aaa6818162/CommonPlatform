/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import picturepark.models.BusinessProcessDetails;
import picturepark.models.BusinessProcessSearchRequest;
import picturepark.models.BusinessProcessSearchResult;
import picturepark.models.BusinessProcessWaitResult;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in BusinessProcessClients.
 */
public interface BusinessProcessClients {
    /**
     * Search.
     * Search for business processes.
     *
     * @param businessProcessSearchRequest The business process request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcessSearchResult object if successful.
     */
    BusinessProcessSearchResult search(BusinessProcessSearchRequest businessProcessSearchRequest);

    /**
     * Search.
     * Search for business processes.
     *
     * @param businessProcessSearchRequest The business process request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcessSearchResult> searchAsync(BusinessProcessSearchRequest businessProcessSearchRequest, final ServiceCallback<BusinessProcessSearchResult> serviceCallback);

    /**
     * Search.
     * Search for business processes.
     *
     * @param businessProcessSearchRequest The business process request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessSearchResult object
     */
    Observable<BusinessProcessSearchResult> searchAsync(BusinessProcessSearchRequest businessProcessSearchRequest);

    /**
     * Search.
     * Search for business processes.
     *
     * @param businessProcessSearchRequest The business process request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessSearchResult object
     */
    Observable<ServiceResponse<BusinessProcessSearchResult>> searchWithServiceResponseAsync(BusinessProcessSearchRequest businessProcessSearchRequest);

    /**
     * Wait.
     * Wait for given process state or lifeCycle. LifeCycles are the same over all business processes. States depend on specific states of the business process.
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcessWaitResult object if successful.
     */
    BusinessProcessWaitResult wait(String processId);

    /**
     * Wait.
     * Wait for given process state or lifeCycle. LifeCycles are the same over all business processes. States depend on specific states of the business process.
     *
     * @param processId The process id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcessWaitResult> waitAsync(String processId, final ServiceCallback<BusinessProcessWaitResult> serviceCallback);

    /**
     * Wait.
     * Wait for given process state or lifeCycle. LifeCycles are the same over all business processes. States depend on specific states of the business process.
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessWaitResult object
     */
    Observable<BusinessProcessWaitResult> waitAsync(String processId);

    /**
     * Wait.
     * Wait for given process state or lifeCycle. LifeCycles are the same over all business processes. States depend on specific states of the business process.
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessWaitResult object
     */
    Observable<ServiceResponse<BusinessProcessWaitResult>> waitWithServiceResponseAsync(String processId);
    /**
     * Wait.
     * Wait for given process state or lifeCycle. LifeCycles are the same over all business processes. States depend on specific states of the business process.
     *
     * @param processId The process id
     * @param states The states to wait for
     * @param lifeCycleIds Business process lifeCycle to wait for
     * @param timeout The timeout to wait for completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcessWaitResult object if successful.
     */
    BusinessProcessWaitResult wait(String processId, String states, String lifeCycleIds, String timeout);

    /**
     * Wait.
     * Wait for given process state or lifeCycle. LifeCycles are the same over all business processes. States depend on specific states of the business process.
     *
     * @param processId The process id
     * @param states The states to wait for
     * @param lifeCycleIds Business process lifeCycle to wait for
     * @param timeout The timeout to wait for completion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcessWaitResult> waitAsync(String processId, String states, String lifeCycleIds, String timeout, final ServiceCallback<BusinessProcessWaitResult> serviceCallback);

    /**
     * Wait.
     * Wait for given process state or lifeCycle. LifeCycles are the same over all business processes. States depend on specific states of the business process.
     *
     * @param processId The process id
     * @param states The states to wait for
     * @param lifeCycleIds Business process lifeCycle to wait for
     * @param timeout The timeout to wait for completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessWaitResult object
     */
    Observable<BusinessProcessWaitResult> waitAsync(String processId, String states, String lifeCycleIds, String timeout);

    /**
     * Wait.
     * Wait for given process state or lifeCycle. LifeCycles are the same over all business processes. States depend on specific states of the business process.
     *
     * @param processId The process id
     * @param states The states to wait for
     * @param lifeCycleIds Business process lifeCycle to wait for
     * @param timeout The timeout to wait for completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessWaitResult object
     */
    Observable<ServiceResponse<BusinessProcessWaitResult>> waitWithServiceResponseAsync(String processId, String states, String lifeCycleIds, String timeout);

    /**
     * Wait for completion.
     * Wait for given process to complete with lifeCycle "Succeeded", "Cancelled" or "Failed".
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcessWaitResult object if successful.
     */
    BusinessProcessWaitResult waitForCompletion(String processId);

    /**
     * Wait for completion.
     * Wait for given process to complete with lifeCycle "Succeeded", "Cancelled" or "Failed".
     *
     * @param processId The process id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcessWaitResult> waitForCompletionAsync(String processId, final ServiceCallback<BusinessProcessWaitResult> serviceCallback);

    /**
     * Wait for completion.
     * Wait for given process to complete with lifeCycle "Succeeded", "Cancelled" or "Failed".
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessWaitResult object
     */
    Observable<BusinessProcessWaitResult> waitForCompletionAsync(String processId);

    /**
     * Wait for completion.
     * Wait for given process to complete with lifeCycle "Succeeded", "Cancelled" or "Failed".
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessWaitResult object
     */
    Observable<ServiceResponse<BusinessProcessWaitResult>> waitForCompletionWithServiceResponseAsync(String processId);
    /**
     * Wait for completion.
     * Wait for given process to complete with lifeCycle "Succeeded", "Cancelled" or "Failed".
     *
     * @param processId The process id
     * @param timeout The timeout to wait for completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcessWaitResult object if successful.
     */
    BusinessProcessWaitResult waitForCompletion(String processId, String timeout);

    /**
     * Wait for completion.
     * Wait for given process to complete with lifeCycle "Succeeded", "Cancelled" or "Failed".
     *
     * @param processId The process id
     * @param timeout The timeout to wait for completion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcessWaitResult> waitForCompletionAsync(String processId, String timeout, final ServiceCallback<BusinessProcessWaitResult> serviceCallback);

    /**
     * Wait for completion.
     * Wait for given process to complete with lifeCycle "Succeeded", "Cancelled" or "Failed".
     *
     * @param processId The process id
     * @param timeout The timeout to wait for completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessWaitResult object
     */
    Observable<BusinessProcessWaitResult> waitForCompletionAsync(String processId, String timeout);

    /**
     * Wait for completion.
     * Wait for given process to complete with lifeCycle "Succeeded", "Cancelled" or "Failed".
     *
     * @param processId The process id
     * @param timeout The timeout to wait for completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessWaitResult object
     */
    Observable<ServiceResponse<BusinessProcessWaitResult>> waitForCompletionWithServiceResponseAsync(String processId, String timeout);

    /**
     * Get details.
     * Get details of a given business process.
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcessDetails object if successful.
     */
    BusinessProcessDetails getDetails(String processId);

    /**
     * Get details.
     * Get details of a given business process.
     *
     * @param processId The process id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcessDetails> getDetailsAsync(String processId, final ServiceCallback<BusinessProcessDetails> serviceCallback);

    /**
     * Get details.
     * Get details of a given business process.
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessDetails object
     */
    Observable<BusinessProcessDetails> getDetailsAsync(String processId);

    /**
     * Get details.
     * Get details of a given business process.
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcessDetails object
     */
    Observable<ServiceResponse<BusinessProcessDetails>> getDetailsWithServiceResponseAsync(String processId);

}
