/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonSubTypes;

/**
 * The PictureparkBusinessException model.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("PictureparkBusinessException")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "PictureparkNotFoundException", value = PictureparkNotFoundException.class),
    @JsonSubTypes.Type(name = "PictureparkValidationException", value = PictureparkValidationException.class),
    @JsonSubTypes.Type(name = "PictureparkConflictException", value = PictureparkConflictException.class),
    @JsonSubTypes.Type(name = "UserNotFoundException", value = UserNotFoundException.class),
    @JsonSubTypes.Type(name = "RenderingException", value = RenderingException.class),
    @JsonSubTypes.Type(name = "TokenGenerationException", value = TokenGenerationException.class),
    @JsonSubTypes.Type(name = "OutputNotFoundException", value = OutputNotFoundException.class),
    @JsonSubTypes.Type(name = "DriveCacheExpiredException", value = DriveCacheExpiredException.class),
    @JsonSubTypes.Type(name = "DriveRequestException", value = DriveRequestException.class),
    @JsonSubTypes.Type(name = "LeaseNotAcquiredException", value = LeaseNotAcquiredException.class),
    @JsonSubTypes.Type(name = "OperationInProgressException", value = OperationInProgressException.class),
    @JsonSubTypes.Type(name = "RetryException", value = RetryException.class),
    @JsonSubTypes.Type(name = "ObjectTypeMismatchException", value = ObjectTypeMismatchException.class),
    @JsonSubTypes.Type(name = "FailedToLockException", value = FailedToLockException.class),
    @JsonSubTypes.Type(name = "PictureparkOperationCanceledException", value = PictureparkOperationCanceledException.class),
    @JsonSubTypes.Type(name = "PictureparkApplicationException", value = PictureparkApplicationException.class),
    @JsonSubTypes.Type(name = "UnknownException", value = UnknownException.class),
    @JsonSubTypes.Type(name = "CustomerAliasInUseException", value = CustomerAliasInUseException.class),
    @JsonSubTypes.Type(name = "DuplicateSearchIndexDocException", value = DuplicateSearchIndexDocException.class),
    @JsonSubTypes.Type(name = "SearchIndexDocNotFoundException", value = SearchIndexDocNotFoundException.class),
    @JsonSubTypes.Type(name = "IndexDocumentNotFoundException", value = IndexDocumentNotFoundException.class),
    @JsonSubTypes.Type(name = "SearchIndexNotFoundException", value = SearchIndexNotFoundException.class),
    @JsonSubTypes.Type(name = "DefaultSearchIndexDeleteException", value = DefaultSearchIndexDeleteException.class),
    @JsonSubTypes.Type(name = "SearchIndexInUseException", value = SearchIndexInUseException.class),
    @JsonSubTypes.Type(name = "IndexException", value = IndexException.class),
    @JsonSubTypes.Type(name = "IndexMappingException", value = IndexMappingException.class),
    @JsonSubTypes.Type(name = "ObjectStoreResponseException", value = ObjectStoreResponseException.class),
    @JsonSubTypes.Type(name = "ObjectStoreException", value = ObjectStoreException.class),
    @JsonSubTypes.Type(name = "QueryException", value = QueryException.class),
    @JsonSubTypes.Type(name = "ListItemCyclicDependencyException", value = ListItemCyclicDependencyException.class),
    @JsonSubTypes.Type(name = "InvalidTransferTypeException", value = InvalidTransferTypeException.class),
    @JsonSubTypes.Type(name = "RelationNotFoundException", value = RelationNotFoundException.class),
    @JsonSubTypes.Type(name = "RelationTypeNotFoundException", value = RelationTypeNotFoundException.class),
    @JsonSubTypes.Type(name = "RelationTypeTargetDocTypeMismatchException", value = RelationTypeTargetDocTypeMismatchException.class),
    @JsonSubTypes.Type(name = "DuplicateSchemaInfoException", value = DuplicateSchemaInfoException.class),
    @JsonSubTypes.Type(name = "ContentMetadataUpdateManyException", value = ContentMetadataUpdateManyException.class),
    @JsonSubTypes.Type(name = "BusinessProcessWaitTimeoutException", value = BusinessProcessWaitTimeoutException.class),
    @JsonSubTypes.Type(name = "BusinessProcessEngineRequestException", value = BusinessProcessEngineRequestException.class),
    @JsonSubTypes.Type(name = "BusinessProcessDefinitionCreateException", value = BusinessProcessDefinitionCreateException.class)
})
public class PictureparkBusinessException extends PictureparkException {
    /**
     * The customerId property.
     */
    @JsonProperty(value = "customerId")
    private String customerId;

    /**
     * The customerAlias property.
     */
    @JsonProperty(value = "customerAlias")
    private String customerAlias;

    /**
     * The userId property.
     */
    @JsonProperty(value = "userId")
    private String userId;

    /**
     * Get the customerId value.
     *
     * @return the customerId value
     */
    public String customerId() {
        return this.customerId;
    }

    /**
     * Set the customerId value.
     *
     * @param customerId the customerId value to set
     * @return the PictureparkBusinessException object itself.
     */
    public PictureparkBusinessException withCustomerId(String customerId) {
        this.customerId = customerId;
        return this;
    }

    /**
     * Get the customerAlias value.
     *
     * @return the customerAlias value
     */
    public String customerAlias() {
        return this.customerAlias;
    }

    /**
     * Set the customerAlias value.
     *
     * @param customerAlias the customerAlias value to set
     * @return the PictureparkBusinessException object itself.
     */
    public PictureparkBusinessException withCustomerAlias(String customerAlias) {
        this.customerAlias = customerAlias;
        return this;
    }

    /**
     * Get the userId value.
     *
     * @return the userId value
     */
    public String userId() {
        return this.userId;
    }

    /**
     * Set the userId value.
     *
     * @param userId the userId value to set
     * @return the PictureparkBusinessException object itself.
     */
    public PictureparkBusinessException withUserId(String userId) {
        this.userId = userId;
        return this;
    }

}
