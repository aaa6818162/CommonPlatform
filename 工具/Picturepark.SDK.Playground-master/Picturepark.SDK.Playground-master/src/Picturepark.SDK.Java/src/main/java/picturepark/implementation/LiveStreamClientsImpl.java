/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark.implementation;

import retrofit2.Retrofit;
import picturepark.LiveStreamClients;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import picturepark.models.LiveStreamSearchRequest;
import picturepark.models.ObjectSearchResult;
import retrofit2.http.Body;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in LiveStreamClients.
 */
public class LiveStreamClientsImpl implements LiveStreamClients {
    /** The Retrofit service to perform REST calls. */
    private LiveStreamClientsService service;
    /** The service client containing this operation class. */
    private PictureparkAPIV1Impl client;

    /**
     * Initializes an instance of LiveStreamClients.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public LiveStreamClientsImpl(Retrofit retrofit, PictureparkAPIV1Impl client) {
        this.service = retrofit.create(LiveStreamClientsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for LiveStreamClients to be
     * used by Retrofit to perform actually REST calls.
     */
    interface LiveStreamClientsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.LiveStreamClients search" })
        @POST("v1/liveStream/search")
        Observable<Response<ResponseBody>> search(@Body LiveStreamSearchRequest liveStreamSearchRequest);

    }

    /**
     * Search LiveStream.
     *
     * @param liveStreamSearchRequest The livestream search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ObjectSearchResult object if successful.
     */
    public ObjectSearchResult search(LiveStreamSearchRequest liveStreamSearchRequest) {
        return searchWithServiceResponseAsync(liveStreamSearchRequest).toBlocking().single().body();
    }

    /**
     * Search LiveStream.
     *
     * @param liveStreamSearchRequest The livestream search request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ObjectSearchResult> searchAsync(LiveStreamSearchRequest liveStreamSearchRequest, final ServiceCallback<ObjectSearchResult> serviceCallback) {
        return ServiceFuture.fromResponse(searchWithServiceResponseAsync(liveStreamSearchRequest), serviceCallback);
    }

    /**
     * Search LiveStream.
     *
     * @param liveStreamSearchRequest The livestream search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ObjectSearchResult object
     */
    public Observable<ObjectSearchResult> searchAsync(LiveStreamSearchRequest liveStreamSearchRequest) {
        return searchWithServiceResponseAsync(liveStreamSearchRequest).map(new Func1<ServiceResponse<ObjectSearchResult>, ObjectSearchResult>() {
            // @Override
            public ObjectSearchResult call(ServiceResponse<ObjectSearchResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Search LiveStream.
     *
     * @param liveStreamSearchRequest The livestream search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ObjectSearchResult object
     */
    public Observable<ServiceResponse<ObjectSearchResult>> searchWithServiceResponseAsync(LiveStreamSearchRequest liveStreamSearchRequest) {
        if (liveStreamSearchRequest == null) {
            throw new IllegalArgumentException("Parameter liveStreamSearchRequest is required and cannot be null.");
        }
        Validator.validate(liveStreamSearchRequest);
        return service.search(liveStreamSearchRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ObjectSearchResult>>>() {
                // @Override
                public Observable<ServiceResponse<ObjectSearchResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ObjectSearchResult> clientResponse = searchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ObjectSearchResult> searchDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ObjectSearchResult, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ObjectSearchResult>() { }.getType())
                .build(response);
    }

}
