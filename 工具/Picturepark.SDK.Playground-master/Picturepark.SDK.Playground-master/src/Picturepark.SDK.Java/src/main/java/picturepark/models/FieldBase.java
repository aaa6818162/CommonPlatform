/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonSubTypes;

/**
 * The field base class.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("FieldBase")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "FieldBoolean", value = FieldBoolean.class),
    @JsonSubTypes.Type(name = "FieldDate", value = FieldDate.class),
    @JsonSubTypes.Type(name = "FieldDateTime", value = FieldDateTime.class),
    @JsonSubTypes.Type(name = "FieldDecimal", value = FieldDecimal.class),
    @JsonSubTypes.Type(name = "FieldDictionary", value = FieldDictionary.class),
    @JsonSubTypes.Type(name = "FieldGeoPoint", value = FieldGeoPoint.class),
    @JsonSubTypes.Type(name = "FieldLong", value = FieldLong.class),
    @JsonSubTypes.Type(name = "FieldSingleFieldset", value = FieldSingleFieldset.class),
    @JsonSubTypes.Type(name = "FieldMultiFieldset", value = FieldMultiFieldset.class),
    @JsonSubTypes.Type(name = "FieldSingleTagbox", value = FieldSingleTagbox.class),
    @JsonSubTypes.Type(name = "FieldMultiTagbox", value = FieldMultiTagbox.class),
    @JsonSubTypes.Type(name = "FieldString", value = FieldString.class),
    @JsonSubTypes.Type(name = "FieldTranslatedString", value = FieldTranslatedString.class),
    @JsonSubTypes.Type(name = "FieldSingleRelation", value = FieldSingleRelation.class),
    @JsonSubTypes.Type(name = "FieldMultiRelation", value = FieldMultiRelation.class)
})
public class FieldBase {
    /**
     * The field id. Can be a slug and must be unique within the schema.
     */
    @JsonProperty(value = "id")
    private String id;

    /**
     * The index id is auto generated by the system.
     */
    @JsonProperty(value = "indexId")
    private String indexId;

    /**
     * The namespace is auto generated by the system.
     */
    @JsonProperty(value = "fieldNamespace")
    private String fieldNamespace;

    /**
     * Language specific field names.
     */
    @JsonProperty(value = "names")
    private Object names;

    /**
     * Language specific field descriptions.
     */
    @JsonProperty(value = "descriptions")
    private Object descriptions;

    /**
     * Defines if a field value is mandatory or not.
     */
    @JsonProperty(value = "required", required = true)
    private boolean required;

    /**
     * Defines if the field can be edited or not.
     */
    @JsonProperty(value = "fixed", required = true)
    private boolean fixed;

    /**
     * Maps the field in the elastic search index and its values become
     * searchable.
     */
    @JsonProperty(value = "index", required = true)
    private boolean index;

    /**
     * Includes fields in the simple search. Index must be true.
     */
    @JsonProperty(value = "simpleSearch", required = true)
    private boolean simpleSearch;

    /**
     * Get the id value.
     *
     * @return the id value
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id value.
     *
     * @param id the id value to set
     * @return the FieldBase object itself.
     */
    public FieldBase withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the indexId value.
     *
     * @return the indexId value
     */
    public String indexId() {
        return this.indexId;
    }

    /**
     * Set the indexId value.
     *
     * @param indexId the indexId value to set
     * @return the FieldBase object itself.
     */
    public FieldBase withIndexId(String indexId) {
        this.indexId = indexId;
        return this;
    }

    /**
     * Get the fieldNamespace value.
     *
     * @return the fieldNamespace value
     */
    public String fieldNamespace() {
        return this.fieldNamespace;
    }

    /**
     * Set the fieldNamespace value.
     *
     * @param fieldNamespace the fieldNamespace value to set
     * @return the FieldBase object itself.
     */
    public FieldBase withFieldNamespace(String fieldNamespace) {
        this.fieldNamespace = fieldNamespace;
        return this;
    }

    /**
     * Get the names value.
     *
     * @return the names value
     */
    public Object names() {
        return this.names;
    }

    /**
     * Set the names value.
     *
     * @param names the names value to set
     * @return the FieldBase object itself.
     */
    public FieldBase withNames(Object names) {
        this.names = names;
        return this;
    }

    /**
     * Get the descriptions value.
     *
     * @return the descriptions value
     */
    public Object descriptions() {
        return this.descriptions;
    }

    /**
     * Set the descriptions value.
     *
     * @param descriptions the descriptions value to set
     * @return the FieldBase object itself.
     */
    public FieldBase withDescriptions(Object descriptions) {
        this.descriptions = descriptions;
        return this;
    }

    /**
     * Get the required value.
     *
     * @return the required value
     */
    public boolean required() {
        return this.required;
    }

    /**
     * Set the required value.
     *
     * @param required the required value to set
     * @return the FieldBase object itself.
     */
    public FieldBase withRequired(boolean required) {
        this.required = required;
        return this;
    }

    /**
     * Get the fixed value.
     *
     * @return the fixed value
     */
    public boolean fixed() {
        return this.fixed;
    }

    /**
     * Set the fixed value.
     *
     * @param fixed the fixed value to set
     * @return the FieldBase object itself.
     */
    public FieldBase withFixed(boolean fixed) {
        this.fixed = fixed;
        return this;
    }

    /**
     * Get the index value.
     *
     * @return the index value
     */
    public boolean index() {
        return this.index;
    }

    /**
     * Set the index value.
     *
     * @param index the index value to set
     * @return the FieldBase object itself.
     */
    public FieldBase withIndex(boolean index) {
        this.index = index;
        return this;
    }

    /**
     * Get the simpleSearch value.
     *
     * @return the simpleSearch value
     */
    public boolean simpleSearch() {
        return this.simpleSearch;
    }

    /**
     * Set the simpleSearch value.
     *
     * @param simpleSearch the simpleSearch value to set
     * @return the FieldBase object itself.
     */
    public FieldBase withSimpleSearch(boolean simpleSearch) {
        this.simpleSearch = simpleSearch;
        return this;
    }

}
