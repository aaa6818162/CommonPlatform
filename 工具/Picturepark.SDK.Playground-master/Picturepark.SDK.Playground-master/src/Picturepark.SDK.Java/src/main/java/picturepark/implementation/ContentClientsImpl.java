/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark.implementation;

import retrofit2.Retrofit;
import picturepark.ContentClients;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.InputStream;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import picturepark.models.BusinessProcess;
import picturepark.models.ContentAggregationRequest;
import picturepark.models.ContentCreateManyRequest;
import picturepark.models.ContentCreateRequest;
import picturepark.models.ContentDeactivateRequest;
import picturepark.models.ContentDetail;
import picturepark.models.ContentDownloadLinkCreateRequest;
import picturepark.models.ContentFieldsFilterUpdateRequest;
import picturepark.models.ContentFieldsUpdateRequest;
import picturepark.models.ContentFileUpdateRequest;
import picturepark.models.ContentMetadataUpdateManyRequest;
import picturepark.models.ContentMetadataUpdateRequest;
import picturepark.models.ContentOwnershipTransferRequest;
import picturepark.models.ContentPermissionsUpdateRequest;
import picturepark.models.ContentReactivateRequest;
import picturepark.models.ContentSearchRequest;
import picturepark.models.ContentSearchResult;
import picturepark.models.ContentsOwnershipTransferRequest;
import picturepark.models.DownloadLink;
import picturepark.models.ObjectAggregationResult;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Streaming;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ContentClients.
 */
public class ContentClientsImpl implements ContentClients {
    /** The Retrofit service to perform REST calls. */
    private ContentClientsService service;
    /** The service client containing this operation class. */
    private PictureparkAPIV1Impl client;

    /**
     * Initializes an instance of ContentClients.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ContentClientsImpl(Retrofit retrofit, PictureparkAPIV1Impl client) {
        this.service = retrofit.create(ContentClientsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ContentClients to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ContentClientsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients get" })
        @GET("v1/contents/{contentId}")
        Observable<Response<ResponseBody>> get(@Path("contentId") String contentId, @Query("resolve") String resolve, @Query("patterns") String patterns);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients getMany" })
        @GET("v1/contents/many")
        Observable<Response<ResponseBody>> getMany(@Query("ids") String ids, @Query("resolve") String resolve, @Query("patterns") String patterns);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients createMany" })
        @POST("v1/contents/many")
        Observable<Response<ResponseBody>> createMany(@Body ContentCreateManyRequest contentCreateManyRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients search" })
        @POST("v1/contents/search")
        Observable<Response<ResponseBody>> search(@Body ContentSearchRequest contentSearchRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients searchByChannel" })
        @POST("v1/contents/{channelId}/search")
        Observable<Response<ResponseBody>> searchByChannel(@Path("channelId") String channelId, @Body ContentSearchRequest contentSearchRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients aggregate" })
        @POST("v1/contents/aggregate")
        Observable<Response<ResponseBody>> aggregate(@Body ContentAggregationRequest contentAggregationRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients aggregateByChannel" })
        @POST("v1/contents/{channelId}/aggregate")
        Observable<Response<ResponseBody>> aggregateByChannel(@Path("channelId") String channelId, @Body ContentAggregationRequest contentAggregationRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients createDownloadLink" })
        @POST("v1/contents/downloadLinks")
        Observable<Response<ResponseBody>> createDownloadLink(@Body ContentDownloadLinkCreateRequest request);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients download" })
        @GET("v1/contents/downloads/{contentId}/{outputFormatId}")
        @Streaming
        Observable<Response<ResponseBody>> download(@Path("contentId") String contentId, @Path("outputFormatId") String outputFormatId, @Query("width") String width, @Query("height") String height, @Header("range") String range);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients downloadThumbnail" })
        @GET("v1/contents/thumbnails/{contentId}/{size}")
        @Streaming
        Observable<Response<ResponseBody>> downloadThumbnail(@Path("contentId") String contentId, @Path("size") String size, @Query("width") String width, @Query("height") String height);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients create" })
        @POST("v1/contents")
        Observable<Response<ResponseBody>> create(@Body ContentCreateRequest contentCreateRequest, @Query("resolve") String resolve, @Query("allowMissingDependencies") String allowMissingDependencies, @Query("timeout") String timeout, @Query("patterns") String patterns);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients deactivate" })
        @PUT("v1/contents/{contentId}/deactivate")
        Observable<Response<ResponseBody>> deactivate(@Path("contentId") String contentId, @Query("timeout") String timeout);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients deactivateMany" })
        @PUT("v1/contents/many/deactivate")
        Observable<Response<ResponseBody>> deactivateMany(@Body ContentDeactivateRequest deactivateRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients reactivate" })
        @PUT("v1/contents/{contentId}/reactivate")
        Observable<Response<ResponseBody>> reactivate(@Path("contentId") String contentId, @Query("resolve") String resolve, @Query("timeout") String timeout, @Query("patterns") String patterns, @Query("allowMissingDependencies") String allowMissingDependencies);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients reactivateMany" })
        @PUT("v1/contents/many/reactivate")
        Observable<Response<ResponseBody>> reactivateMany(@Body ContentReactivateRequest reactivateRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients updateFile" })
        @PUT("v1/contents/{contentId}/file")
        Observable<Response<ResponseBody>> updateFile(@Path("contentId") String contentId, @Body ContentFileUpdateRequest updateRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients updateMetadata" })
        @PUT("v1/contents/{contentId}/metadata")
        Observable<Response<ResponseBody>> updateMetadata(@Path("contentId") String contentId, @Body ContentMetadataUpdateRequest updateRequest, @Query("resolve") String resolve, @Query("allowMissingDependencies") String allowMissingDependencies, @Query("timeout") String timeout, @Query("patterns") String patterns);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients updatePermissions" })
        @PUT("v1/contents/{contentId}/permissions")
        Observable<Response<ResponseBody>> updatePermissions(@Path("contentId") String contentId, @Body ContentPermissionsUpdateRequest updateRequest, @Query("resolve") String resolve, @Query("timeout") String timeout, @Query("patterns") String patterns);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients updateMetadataMany" })
        @PUT("v1/contents/many/metadata")
        Observable<Response<ResponseBody>> updateMetadataMany(@Body ContentMetadataUpdateManyRequest updateRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients updatePermissionsMany" })
        @PUT("v1/contents/many/permissions")
        Observable<Response<ResponseBody>> updatePermissionsMany(@Body List<ContentPermissionsUpdateRequest> updateRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients transferOwnership" })
        @PUT("v1/contents/{contentId}/ownership/transfer")
        Observable<Response<ResponseBody>> transferOwnership(@Path("contentId") String contentId, @Body ContentOwnershipTransferRequest updateRequest, @Query("timeout") String timeout);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients transferOwnershipMany" })
        @PUT("v1/contents/many/ownership/transfer")
        Observable<Response<ResponseBody>> transferOwnershipMany(@Body ContentsOwnershipTransferRequest contentsOwnershipTransferRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients batchUpdateFieldsByIds" })
        @PUT("v1/contents/batches/fields/ids")
        Observable<Response<ResponseBody>> batchUpdateFieldsByIds(@Body ContentFieldsUpdateRequest updateRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.ContentClients batchUpdateFieldsByFilter" })
        @PUT("v1/contents/batches/fields/filter")
        Observable<Response<ResponseBody>> batchUpdateFieldsByFilter(@Body ContentFieldsFilterUpdateRequest updateRequest);

    }

    /**
     * Get detail - single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    public ContentDetail get(String contentId, String resolve) {
        return getWithServiceResponseAsync(contentId, resolve).toBlocking().single().body();
    }

    /**
     * Get detail - single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentDetail> getAsync(String contentId, String resolve, final ServiceCallback<ContentDetail> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(contentId, resolve), serviceCallback);
    }

    /**
     * Get detail - single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ContentDetail> getAsync(String contentId, String resolve) {
        return getWithServiceResponseAsync(contentId, resolve).map(new Func1<ServiceResponse<ContentDetail>, ContentDetail>() {
            // @Override
            public ContentDetail call(ServiceResponse<ContentDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Get detail - single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ServiceResponse<ContentDetail>> getWithServiceResponseAsync(String contentId, String resolve) {
        if (contentId == null) {
            throw new IllegalArgumentException("Parameter contentId is required and cannot be null.");
        }
        if (resolve == null) {
            throw new IllegalArgumentException("Parameter resolve is required and cannot be null.");
        }
        final String patterns = null;
        return service.get(contentId, resolve, patterns)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentDetail>>>() {
                // @Override
                public Observable<ServiceResponse<ContentDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentDetail> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get detail - single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    public ContentDetail get(String contentId, String resolve, String patterns) {
        return getWithServiceResponseAsync(contentId, resolve, patterns).toBlocking().single().body();
    }

    /**
     * Get detail - single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentDetail> getAsync(String contentId, String resolve, String patterns, final ServiceCallback<ContentDetail> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(contentId, resolve, patterns), serviceCallback);
    }

    /**
     * Get detail - single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ContentDetail> getAsync(String contentId, String resolve, String patterns) {
        return getWithServiceResponseAsync(contentId, resolve, patterns).map(new Func1<ServiceResponse<ContentDetail>, ContentDetail>() {
            // @Override
            public ContentDetail call(ServiceResponse<ContentDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Get detail - single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ServiceResponse<ContentDetail>> getWithServiceResponseAsync(String contentId, String resolve, String patterns) {
        if (contentId == null) {
            throw new IllegalArgumentException("Parameter contentId is required and cannot be null.");
        }
        if (resolve == null) {
            throw new IllegalArgumentException("Parameter resolve is required and cannot be null.");
        }
        return service.get(contentId, resolve, patterns)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentDetail>>>() {
                // @Override
                public Observable<ServiceResponse<ContentDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentDetail> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ContentDetail> getDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ContentDetail, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ContentDetail>() { }.getType())
                .build(response);
    }

    /**
     * Get detail - many.
     * Gets multiple content documents by ids.
     *
     * @param ids List of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ContentDetail&gt; object if successful.
     */
    public List<ContentDetail> getMany(String ids, String resolve) {
        return getManyWithServiceResponseAsync(ids, resolve).toBlocking().single().body();
    }

    /**
     * Get detail - many.
     * Gets multiple content documents by ids.
     *
     * @param ids List of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ContentDetail>> getManyAsync(String ids, String resolve, final ServiceCallback<List<ContentDetail>> serviceCallback) {
        return ServiceFuture.fromResponse(getManyWithServiceResponseAsync(ids, resolve), serviceCallback);
    }

    /**
     * Get detail - many.
     * Gets multiple content documents by ids.
     *
     * @param ids List of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ContentDetail&gt; object
     */
    public Observable<List<ContentDetail>> getManyAsync(String ids, String resolve) {
        return getManyWithServiceResponseAsync(ids, resolve).map(new Func1<ServiceResponse<List<ContentDetail>>, List<ContentDetail>>() {
            // @Override
            public List<ContentDetail> call(ServiceResponse<List<ContentDetail>> response) {
                return response.body();
            }
        });
    }

    /**
     * Get detail - many.
     * Gets multiple content documents by ids.
     *
     * @param ids List of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ContentDetail&gt; object
     */
    public Observable<ServiceResponse<List<ContentDetail>>> getManyWithServiceResponseAsync(String ids, String resolve) {
        if (ids == null) {
            throw new IllegalArgumentException("Parameter ids is required and cannot be null.");
        }
        if (resolve == null) {
            throw new IllegalArgumentException("Parameter resolve is required and cannot be null.");
        }
        final String patterns = null;
        return service.getMany(ids, resolve, patterns)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ContentDetail>>>>() {
                // @Override
                public Observable<ServiceResponse<List<ContentDetail>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<ContentDetail>> clientResponse = getManyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get detail - many.
     * Gets multiple content documents by ids.
     *
     * @param ids List of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ContentDetail&gt; object if successful.
     */
    public List<ContentDetail> getMany(String ids, String resolve, String patterns) {
        return getManyWithServiceResponseAsync(ids, resolve, patterns).toBlocking().single().body();
    }

    /**
     * Get detail - many.
     * Gets multiple content documents by ids.
     *
     * @param ids List of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ContentDetail>> getManyAsync(String ids, String resolve, String patterns, final ServiceCallback<List<ContentDetail>> serviceCallback) {
        return ServiceFuture.fromResponse(getManyWithServiceResponseAsync(ids, resolve, patterns), serviceCallback);
    }

    /**
     * Get detail - many.
     * Gets multiple content documents by ids.
     *
     * @param ids List of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ContentDetail&gt; object
     */
    public Observable<List<ContentDetail>> getManyAsync(String ids, String resolve, String patterns) {
        return getManyWithServiceResponseAsync(ids, resolve, patterns).map(new Func1<ServiceResponse<List<ContentDetail>>, List<ContentDetail>>() {
            // @Override
            public List<ContentDetail> call(ServiceResponse<List<ContentDetail>> response) {
                return response.body();
            }
        });
    }

    /**
     * Get detail - many.
     * Gets multiple content documents by ids.
     *
     * @param ids List of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ContentDetail&gt; object
     */
    public Observable<ServiceResponse<List<ContentDetail>>> getManyWithServiceResponseAsync(String ids, String resolve, String patterns) {
        if (ids == null) {
            throw new IllegalArgumentException("Parameter ids is required and cannot be null.");
        }
        if (resolve == null) {
            throw new IllegalArgumentException("Parameter resolve is required and cannot be null.");
        }
        return service.getMany(ids, resolve, patterns)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ContentDetail>>>>() {
                // @Override
                public Observable<ServiceResponse<List<ContentDetail>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<ContentDetail>> clientResponse = getManyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<ContentDetail>> getManyDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<ContentDetail>, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<ContentDetail>>() { }.getType())
                .build(response);
    }

    /**
     * Create - many.
     * Create multiple file-less content items. To import files, see [Transfer](#section/Transfer)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentCreateManyRequest The content create many request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    public BusinessProcess createMany(ContentCreateManyRequest contentCreateManyRequest) {
        return createManyWithServiceResponseAsync(contentCreateManyRequest).toBlocking().single().body();
    }

    /**
     * Create - many.
     * Create multiple file-less content items. To import files, see [Transfer](#section/Transfer)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentCreateManyRequest The content create many request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BusinessProcess> createManyAsync(ContentCreateManyRequest contentCreateManyRequest, final ServiceCallback<BusinessProcess> serviceCallback) {
        return ServiceFuture.fromResponse(createManyWithServiceResponseAsync(contentCreateManyRequest), serviceCallback);
    }

    /**
     * Create - many.
     * Create multiple file-less content items. To import files, see [Transfer](#section/Transfer)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentCreateManyRequest The content create many request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<BusinessProcess> createManyAsync(ContentCreateManyRequest contentCreateManyRequest) {
        return createManyWithServiceResponseAsync(contentCreateManyRequest).map(new Func1<ServiceResponse<BusinessProcess>, BusinessProcess>() {
            // @Override
            public BusinessProcess call(ServiceResponse<BusinessProcess> response) {
                return response.body();
            }
        });
    }

    /**
     * Create - many.
     * Create multiple file-less content items. To import files, see [Transfer](#section/Transfer)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentCreateManyRequest The content create many request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<ServiceResponse<BusinessProcess>> createManyWithServiceResponseAsync(ContentCreateManyRequest contentCreateManyRequest) {
        if (contentCreateManyRequest == null) {
            throw new IllegalArgumentException("Parameter contentCreateManyRequest is required and cannot be null.");
        }
        Validator.validate(contentCreateManyRequest);
        return service.createMany(contentCreateManyRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BusinessProcess>>>() {
                // @Override
                public Observable<ServiceResponse<BusinessProcess>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BusinessProcess> clientResponse = createManyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BusinessProcess> createManyDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BusinessProcess, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BusinessProcess>() { }.getType())
                .build(response);
    }

    /**
     * Search.
     * Searches contents as specified in the search request.
     *
     * @param contentSearchRequest The content search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentSearchResult object if successful.
     */
    public ContentSearchResult search(ContentSearchRequest contentSearchRequest) {
        return searchWithServiceResponseAsync(contentSearchRequest).toBlocking().single().body();
    }

    /**
     * Search.
     * Searches contents as specified in the search request.
     *
     * @param contentSearchRequest The content search request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentSearchResult> searchAsync(ContentSearchRequest contentSearchRequest, final ServiceCallback<ContentSearchResult> serviceCallback) {
        return ServiceFuture.fromResponse(searchWithServiceResponseAsync(contentSearchRequest), serviceCallback);
    }

    /**
     * Search.
     * Searches contents as specified in the search request.
     *
     * @param contentSearchRequest The content search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentSearchResult object
     */
    public Observable<ContentSearchResult> searchAsync(ContentSearchRequest contentSearchRequest) {
        return searchWithServiceResponseAsync(contentSearchRequest).map(new Func1<ServiceResponse<ContentSearchResult>, ContentSearchResult>() {
            // @Override
            public ContentSearchResult call(ServiceResponse<ContentSearchResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Search.
     * Searches contents as specified in the search request.
     *
     * @param contentSearchRequest The content search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentSearchResult object
     */
    public Observable<ServiceResponse<ContentSearchResult>> searchWithServiceResponseAsync(ContentSearchRequest contentSearchRequest) {
        if (contentSearchRequest == null) {
            throw new IllegalArgumentException("Parameter contentSearchRequest is required and cannot be null.");
        }
        Validator.validate(contentSearchRequest);
        return service.search(contentSearchRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentSearchResult>>>() {
                // @Override
                public Observable<ServiceResponse<ContentSearchResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentSearchResult> clientResponse = searchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ContentSearchResult> searchDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ContentSearchResult, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ContentSearchResult>() { }.getType())
                .build(response);
    }

    /**
     * Search by channel.
     * Searches contents as specified in the search request and limits the search results to the specified channel.
     *
     * @param channelId The channel id.
     * @param contentSearchRequest The content search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentSearchResult object if successful.
     */
    public ContentSearchResult searchByChannel(String channelId, ContentSearchRequest contentSearchRequest) {
        return searchByChannelWithServiceResponseAsync(channelId, contentSearchRequest).toBlocking().single().body();
    }

    /**
     * Search by channel.
     * Searches contents as specified in the search request and limits the search results to the specified channel.
     *
     * @param channelId The channel id.
     * @param contentSearchRequest The content search request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentSearchResult> searchByChannelAsync(String channelId, ContentSearchRequest contentSearchRequest, final ServiceCallback<ContentSearchResult> serviceCallback) {
        return ServiceFuture.fromResponse(searchByChannelWithServiceResponseAsync(channelId, contentSearchRequest), serviceCallback);
    }

    /**
     * Search by channel.
     * Searches contents as specified in the search request and limits the search results to the specified channel.
     *
     * @param channelId The channel id.
     * @param contentSearchRequest The content search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentSearchResult object
     */
    public Observable<ContentSearchResult> searchByChannelAsync(String channelId, ContentSearchRequest contentSearchRequest) {
        return searchByChannelWithServiceResponseAsync(channelId, contentSearchRequest).map(new Func1<ServiceResponse<ContentSearchResult>, ContentSearchResult>() {
            // @Override
            public ContentSearchResult call(ServiceResponse<ContentSearchResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Search by channel.
     * Searches contents as specified in the search request and limits the search results to the specified channel.
     *
     * @param channelId The channel id.
     * @param contentSearchRequest The content search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentSearchResult object
     */
    public Observable<ServiceResponse<ContentSearchResult>> searchByChannelWithServiceResponseAsync(String channelId, ContentSearchRequest contentSearchRequest) {
        if (channelId == null) {
            throw new IllegalArgumentException("Parameter channelId is required and cannot be null.");
        }
        if (contentSearchRequest == null) {
            throw new IllegalArgumentException("Parameter contentSearchRequest is required and cannot be null.");
        }
        Validator.validate(contentSearchRequest);
        return service.searchByChannel(channelId, contentSearchRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentSearchResult>>>() {
                // @Override
                public Observable<ServiceResponse<ContentSearchResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentSearchResult> clientResponse = searchByChannelDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ContentSearchResult> searchByChannelDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ContentSearchResult, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ContentSearchResult>() { }.getType())
                .build(response);
    }

    /**
     * Aggregate.
     * Aggregates content fields as specified in the aggregation request.
     *
     * @param contentAggregationRequest The aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ObjectAggregationResult object if successful.
     */
    public ObjectAggregationResult aggregate(ContentAggregationRequest contentAggregationRequest) {
        return aggregateWithServiceResponseAsync(contentAggregationRequest).toBlocking().single().body();
    }

    /**
     * Aggregate.
     * Aggregates content fields as specified in the aggregation request.
     *
     * @param contentAggregationRequest The aggregation request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ObjectAggregationResult> aggregateAsync(ContentAggregationRequest contentAggregationRequest, final ServiceCallback<ObjectAggregationResult> serviceCallback) {
        return ServiceFuture.fromResponse(aggregateWithServiceResponseAsync(contentAggregationRequest), serviceCallback);
    }

    /**
     * Aggregate.
     * Aggregates content fields as specified in the aggregation request.
     *
     * @param contentAggregationRequest The aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ObjectAggregationResult object
     */
    public Observable<ObjectAggregationResult> aggregateAsync(ContentAggregationRequest contentAggregationRequest) {
        return aggregateWithServiceResponseAsync(contentAggregationRequest).map(new Func1<ServiceResponse<ObjectAggregationResult>, ObjectAggregationResult>() {
            // @Override
            public ObjectAggregationResult call(ServiceResponse<ObjectAggregationResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Aggregate.
     * Aggregates content fields as specified in the aggregation request.
     *
     * @param contentAggregationRequest The aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ObjectAggregationResult object
     */
    public Observable<ServiceResponse<ObjectAggregationResult>> aggregateWithServiceResponseAsync(ContentAggregationRequest contentAggregationRequest) {
        if (contentAggregationRequest == null) {
            throw new IllegalArgumentException("Parameter contentAggregationRequest is required and cannot be null.");
        }
        Validator.validate(contentAggregationRequest);
        return service.aggregate(contentAggregationRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ObjectAggregationResult>>>() {
                // @Override
                public Observable<ServiceResponse<ObjectAggregationResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ObjectAggregationResult> clientResponse = aggregateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ObjectAggregationResult> aggregateDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ObjectAggregationResult, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ObjectAggregationResult>() { }.getType())
                .build(response);
    }

    /**
     * Aggregate by channel.
     * Aggregates content fields as specified in the aggregation request and limits the aggregation results to the specified channel.
     *
     * @param channelId The channel id
     * @param contentAggregationRequest The content aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ObjectAggregationResult object if successful.
     */
    public ObjectAggregationResult aggregateByChannel(String channelId, ContentAggregationRequest contentAggregationRequest) {
        return aggregateByChannelWithServiceResponseAsync(channelId, contentAggregationRequest).toBlocking().single().body();
    }

    /**
     * Aggregate by channel.
     * Aggregates content fields as specified in the aggregation request and limits the aggregation results to the specified channel.
     *
     * @param channelId The channel id
     * @param contentAggregationRequest The content aggregation request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ObjectAggregationResult> aggregateByChannelAsync(String channelId, ContentAggregationRequest contentAggregationRequest, final ServiceCallback<ObjectAggregationResult> serviceCallback) {
        return ServiceFuture.fromResponse(aggregateByChannelWithServiceResponseAsync(channelId, contentAggregationRequest), serviceCallback);
    }

    /**
     * Aggregate by channel.
     * Aggregates content fields as specified in the aggregation request and limits the aggregation results to the specified channel.
     *
     * @param channelId The channel id
     * @param contentAggregationRequest The content aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ObjectAggregationResult object
     */
    public Observable<ObjectAggregationResult> aggregateByChannelAsync(String channelId, ContentAggregationRequest contentAggregationRequest) {
        return aggregateByChannelWithServiceResponseAsync(channelId, contentAggregationRequest).map(new Func1<ServiceResponse<ObjectAggregationResult>, ObjectAggregationResult>() {
            // @Override
            public ObjectAggregationResult call(ServiceResponse<ObjectAggregationResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Aggregate by channel.
     * Aggregates content fields as specified in the aggregation request and limits the aggregation results to the specified channel.
     *
     * @param channelId The channel id
     * @param contentAggregationRequest The content aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ObjectAggregationResult object
     */
    public Observable<ServiceResponse<ObjectAggregationResult>> aggregateByChannelWithServiceResponseAsync(String channelId, ContentAggregationRequest contentAggregationRequest) {
        if (channelId == null) {
            throw new IllegalArgumentException("Parameter channelId is required and cannot be null.");
        }
        if (contentAggregationRequest == null) {
            throw new IllegalArgumentException("Parameter contentAggregationRequest is required and cannot be null.");
        }
        Validator.validate(contentAggregationRequest);
        return service.aggregateByChannel(channelId, contentAggregationRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ObjectAggregationResult>>>() {
                // @Override
                public Observable<ServiceResponse<ObjectAggregationResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ObjectAggregationResult> clientResponse = aggregateByChannelDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ObjectAggregationResult> aggregateByChannelDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ObjectAggregationResult, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ObjectAggregationResult>() { }.getType())
                .build(response);
    }

    /**
     * Create download link.
     * Creates a download link for one or more contents.
     *
     * @param request The content download link request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DownloadLink object if successful.
     */
    public DownloadLink createDownloadLink(ContentDownloadLinkCreateRequest request) {
        return createDownloadLinkWithServiceResponseAsync(request).toBlocking().single().body();
    }

    /**
     * Create download link.
     * Creates a download link for one or more contents.
     *
     * @param request The content download link request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DownloadLink> createDownloadLinkAsync(ContentDownloadLinkCreateRequest request, final ServiceCallback<DownloadLink> serviceCallback) {
        return ServiceFuture.fromResponse(createDownloadLinkWithServiceResponseAsync(request), serviceCallback);
    }

    /**
     * Create download link.
     * Creates a download link for one or more contents.
     *
     * @param request The content download link request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DownloadLink object
     */
    public Observable<DownloadLink> createDownloadLinkAsync(ContentDownloadLinkCreateRequest request) {
        return createDownloadLinkWithServiceResponseAsync(request).map(new Func1<ServiceResponse<DownloadLink>, DownloadLink>() {
            // @Override
            public DownloadLink call(ServiceResponse<DownloadLink> response) {
                return response.body();
            }
        });
    }

    /**
     * Create download link.
     * Creates a download link for one or more contents.
     *
     * @param request The content download link request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DownloadLink object
     */
    public Observable<ServiceResponse<DownloadLink>> createDownloadLinkWithServiceResponseAsync(ContentDownloadLinkCreateRequest request) {
        if (request == null) {
            throw new IllegalArgumentException("Parameter request is required and cannot be null.");
        }
        Validator.validate(request);
        return service.createDownloadLink(request)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DownloadLink>>>() {
                // @Override
                public Observable<ServiceResponse<DownloadLink>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DownloadLink> clientResponse = createDownloadLinkDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DownloadLink> createDownloadLinkDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DownloadLink, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DownloadLink>() { }.getType())
                .build(response);
    }

    /**
     * Download output.
     * Download single content in a specific outputformat. To resize images on download specify target width &amp;amp; height. To download only a portion of the file, specify the range parameter.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    public InputStream download(String contentId, String outputFormatId) {
        return downloadWithServiceResponseAsync(contentId, outputFormatId).toBlocking().single().body();
    }

    /**
     * Download output.
     * Download single content in a specific outputformat. To resize images on download specify target width &amp;amp; height. To download only a portion of the file, specify the range parameter.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InputStream> downloadAsync(String contentId, String outputFormatId, final ServiceCallback<InputStream> serviceCallback) {
        return ServiceFuture.fromResponse(downloadWithServiceResponseAsync(contentId, outputFormatId), serviceCallback);
    }

    /**
     * Download output.
     * Download single content in a specific outputformat. To resize images on download specify target width &amp;amp; height. To download only a portion of the file, specify the range parameter.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<InputStream> downloadAsync(String contentId, String outputFormatId) {
        return downloadWithServiceResponseAsync(contentId, outputFormatId).map(new Func1<ServiceResponse<InputStream>, InputStream>() {
            // @Override
            public InputStream call(ServiceResponse<InputStream> response) {
                return response.body();
            }
        });
    }

    /**
     * Download output.
     * Download single content in a specific outputformat. To resize images on download specify target width &amp;amp; height. To download only a portion of the file, specify the range parameter.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<ServiceResponse<InputStream>> downloadWithServiceResponseAsync(String contentId, String outputFormatId) {
        if (contentId == null) {
            throw new IllegalArgumentException("Parameter contentId is required and cannot be null.");
        }
        if (outputFormatId == null) {
            throw new IllegalArgumentException("Parameter outputFormatId is required and cannot be null.");
        }
        final String width = null;
        final String height = null;
        final String range = null;
        return service.download(contentId, outputFormatId, width, height, range)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InputStream>>>() {
                // @Override
                public Observable<ServiceResponse<InputStream>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InputStream> clientResponse = downloadDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Download output.
     * Download single content in a specific outputformat. To resize images on download specify target width &amp;amp; height. To download only a portion of the file, specify the range parameter.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @param width Optional width in pixels to resize image
     * @param height Optional height in pixels to resize image
     * @param range The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    public InputStream download(String contentId, String outputFormatId, String width, String height, String range) {
        return downloadWithServiceResponseAsync(contentId, outputFormatId, width, height, range).toBlocking().single().body();
    }

    /**
     * Download output.
     * Download single content in a specific outputformat. To resize images on download specify target width &amp;amp; height. To download only a portion of the file, specify the range parameter.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @param width Optional width in pixels to resize image
     * @param height Optional height in pixels to resize image
     * @param range The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InputStream> downloadAsync(String contentId, String outputFormatId, String width, String height, String range, final ServiceCallback<InputStream> serviceCallback) {
        return ServiceFuture.fromResponse(downloadWithServiceResponseAsync(contentId, outputFormatId, width, height, range), serviceCallback);
    }

    /**
     * Download output.
     * Download single content in a specific outputformat. To resize images on download specify target width &amp;amp; height. To download only a portion of the file, specify the range parameter.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @param width Optional width in pixels to resize image
     * @param height Optional height in pixels to resize image
     * @param range The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<InputStream> downloadAsync(String contentId, String outputFormatId, String width, String height, String range) {
        return downloadWithServiceResponseAsync(contentId, outputFormatId, width, height, range).map(new Func1<ServiceResponse<InputStream>, InputStream>() {
            // @Override
            public InputStream call(ServiceResponse<InputStream> response) {
                return response.body();
            }
        });
    }

    /**
     * Download output.
     * Download single content in a specific outputformat. To resize images on download specify target width &amp;amp; height. To download only a portion of the file, specify the range parameter.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @param width Optional width in pixels to resize image
     * @param height Optional height in pixels to resize image
     * @param range The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<ServiceResponse<InputStream>> downloadWithServiceResponseAsync(String contentId, String outputFormatId, String width, String height, String range) {
        if (contentId == null) {
            throw new IllegalArgumentException("Parameter contentId is required and cannot be null.");
        }
        if (outputFormatId == null) {
            throw new IllegalArgumentException("Parameter outputFormatId is required and cannot be null.");
        }
        return service.download(contentId, outputFormatId, width, height, range)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InputStream>>>() {
                // @Override
                public Observable<ServiceResponse<InputStream>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InputStream> clientResponse = downloadDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<InputStream> downloadDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<InputStream, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<InputStream>() { }.getType())
                .register(206, new TypeToken<InputStream>() { }.getType())
                .build(response);
    }

    /**
     * Download thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large. Possible values include: 'Small', 'Medium', 'Large'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    public InputStream downloadThumbnail(String contentId, String size) {
        return downloadThumbnailWithServiceResponseAsync(contentId, size).toBlocking().single().body();
    }

    /**
     * Download thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large. Possible values include: 'Small', 'Medium', 'Large'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InputStream> downloadThumbnailAsync(String contentId, String size, final ServiceCallback<InputStream> serviceCallback) {
        return ServiceFuture.fromResponse(downloadThumbnailWithServiceResponseAsync(contentId, size), serviceCallback);
    }

    /**
     * Download thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large. Possible values include: 'Small', 'Medium', 'Large'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<InputStream> downloadThumbnailAsync(String contentId, String size) {
        return downloadThumbnailWithServiceResponseAsync(contentId, size).map(new Func1<ServiceResponse<InputStream>, InputStream>() {
            // @Override
            public InputStream call(ServiceResponse<InputStream> response) {
                return response.body();
            }
        });
    }

    /**
     * Download thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large. Possible values include: 'Small', 'Medium', 'Large'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<ServiceResponse<InputStream>> downloadThumbnailWithServiceResponseAsync(String contentId, String size) {
        if (contentId == null) {
            throw new IllegalArgumentException("Parameter contentId is required and cannot be null.");
        }
        if (size == null) {
            throw new IllegalArgumentException("Parameter size is required and cannot be null.");
        }
        final String width = null;
        final String height = null;
        return service.downloadThumbnail(contentId, size, width, height)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InputStream>>>() {
                // @Override
                public Observable<ServiceResponse<InputStream>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InputStream> clientResponse = downloadThumbnailDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Download thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large. Possible values include: 'Small', 'Medium', 'Large'
     * @param width Optional width in pixels to resize image
     * @param height Optional height in pixels to resize image
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    public InputStream downloadThumbnail(String contentId, String size, String width, String height) {
        return downloadThumbnailWithServiceResponseAsync(contentId, size, width, height).toBlocking().single().body();
    }

    /**
     * Download thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large. Possible values include: 'Small', 'Medium', 'Large'
     * @param width Optional width in pixels to resize image
     * @param height Optional height in pixels to resize image
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InputStream> downloadThumbnailAsync(String contentId, String size, String width, String height, final ServiceCallback<InputStream> serviceCallback) {
        return ServiceFuture.fromResponse(downloadThumbnailWithServiceResponseAsync(contentId, size, width, height), serviceCallback);
    }

    /**
     * Download thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large. Possible values include: 'Small', 'Medium', 'Large'
     * @param width Optional width in pixels to resize image
     * @param height Optional height in pixels to resize image
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<InputStream> downloadThumbnailAsync(String contentId, String size, String width, String height) {
        return downloadThumbnailWithServiceResponseAsync(contentId, size, width, height).map(new Func1<ServiceResponse<InputStream>, InputStream>() {
            // @Override
            public InputStream call(ServiceResponse<InputStream> response) {
                return response.body();
            }
        });
    }

    /**
     * Download thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large. Possible values include: 'Small', 'Medium', 'Large'
     * @param width Optional width in pixels to resize image
     * @param height Optional height in pixels to resize image
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<ServiceResponse<InputStream>> downloadThumbnailWithServiceResponseAsync(String contentId, String size, String width, String height) {
        if (contentId == null) {
            throw new IllegalArgumentException("Parameter contentId is required and cannot be null.");
        }
        if (size == null) {
            throw new IllegalArgumentException("Parameter size is required and cannot be null.");
        }
        return service.downloadThumbnail(contentId, size, width, height)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InputStream>>>() {
                // @Override
                public Observable<ServiceResponse<InputStream>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InputStream> clientResponse = downloadThumbnailDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<InputStream> downloadThumbnailDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<InputStream, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<InputStream>() { }.getType())
                .build(response);
    }

    /**
     * Create - single.
     * Create a single file-less content item. To import files, see [Transfer](#section/Transfer).
     *
     * @param contentCreateRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    public ContentDetail create(ContentCreateRequest contentCreateRequest, String resolve) {
        return createWithServiceResponseAsync(contentCreateRequest, resolve).toBlocking().single().body();
    }

    /**
     * Create - single.
     * Create a single file-less content item. To import files, see [Transfer](#section/Transfer).
     *
     * @param contentCreateRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentDetail> createAsync(ContentCreateRequest contentCreateRequest, String resolve, final ServiceCallback<ContentDetail> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(contentCreateRequest, resolve), serviceCallback);
    }

    /**
     * Create - single.
     * Create a single file-less content item. To import files, see [Transfer](#section/Transfer).
     *
     * @param contentCreateRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ContentDetail> createAsync(ContentCreateRequest contentCreateRequest, String resolve) {
        return createWithServiceResponseAsync(contentCreateRequest, resolve).map(new Func1<ServiceResponse<ContentDetail>, ContentDetail>() {
            // @Override
            public ContentDetail call(ServiceResponse<ContentDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Create - single.
     * Create a single file-less content item. To import files, see [Transfer](#section/Transfer).
     *
     * @param contentCreateRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ServiceResponse<ContentDetail>> createWithServiceResponseAsync(ContentCreateRequest contentCreateRequest, String resolve) {
        if (contentCreateRequest == null) {
            throw new IllegalArgumentException("Parameter contentCreateRequest is required and cannot be null.");
        }
        if (resolve == null) {
            throw new IllegalArgumentException("Parameter resolve is required and cannot be null.");
        }
        Validator.validate(contentCreateRequest);
        final String allowMissingDependencies = null;
        final String timeout = null;
        final String patterns = null;
        return service.create(contentCreateRequest, resolve, allowMissingDependencies, timeout, patterns)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentDetail>>>() {
                // @Override
                public Observable<ServiceResponse<ContentDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentDetail> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create - single.
     * Create a single file-less content item. To import files, see [Transfer](#section/Transfer).
     *
     * @param contentCreateRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param allowMissingDependencies Allow creating list items that refer to list items or contents that don't exist in the system.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    public ContentDetail create(ContentCreateRequest contentCreateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns) {
        return createWithServiceResponseAsync(contentCreateRequest, resolve, allowMissingDependencies, timeout, patterns).toBlocking().single().body();
    }

    /**
     * Create - single.
     * Create a single file-less content item. To import files, see [Transfer](#section/Transfer).
     *
     * @param contentCreateRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param allowMissingDependencies Allow creating list items that refer to list items or contents that don't exist in the system.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentDetail> createAsync(ContentCreateRequest contentCreateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns, final ServiceCallback<ContentDetail> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(contentCreateRequest, resolve, allowMissingDependencies, timeout, patterns), serviceCallback);
    }

    /**
     * Create - single.
     * Create a single file-less content item. To import files, see [Transfer](#section/Transfer).
     *
     * @param contentCreateRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param allowMissingDependencies Allow creating list items that refer to list items or contents that don't exist in the system.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ContentDetail> createAsync(ContentCreateRequest contentCreateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns) {
        return createWithServiceResponseAsync(contentCreateRequest, resolve, allowMissingDependencies, timeout, patterns).map(new Func1<ServiceResponse<ContentDetail>, ContentDetail>() {
            // @Override
            public ContentDetail call(ServiceResponse<ContentDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Create - single.
     * Create a single file-less content item. To import files, see [Transfer](#section/Transfer).
     *
     * @param contentCreateRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param allowMissingDependencies Allow creating list items that refer to list items or contents that don't exist in the system.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ServiceResponse<ContentDetail>> createWithServiceResponseAsync(ContentCreateRequest contentCreateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns) {
        if (contentCreateRequest == null) {
            throw new IllegalArgumentException("Parameter contentCreateRequest is required and cannot be null.");
        }
        if (resolve == null) {
            throw new IllegalArgumentException("Parameter resolve is required and cannot be null.");
        }
        Validator.validate(contentCreateRequest);
        return service.create(contentCreateRequest, resolve, allowMissingDependencies, timeout, patterns)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentDetail>>>() {
                // @Override
                public Observable<ServiceResponse<ContentDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentDetail> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ContentDetail> createDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ContentDetail, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ContentDetail>() { }.getType())
                .build(response);
    }

    /**
     * Deactivate - single.
     * Deactivates a single content. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be deleted.
     *
     * @param contentId the id of the content to deactivate
     * @param timeout Maximum time to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    public ContentDetail deactivate(String contentId, String timeout) {
        return deactivateWithServiceResponseAsync(contentId, timeout).toBlocking().single().body();
    }

    /**
     * Deactivate - single.
     * Deactivates a single content. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be deleted.
     *
     * @param contentId the id of the content to deactivate
     * @param timeout Maximum time to wait for the business process completed state.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentDetail> deactivateAsync(String contentId, String timeout, final ServiceCallback<ContentDetail> serviceCallback) {
        return ServiceFuture.fromResponse(deactivateWithServiceResponseAsync(contentId, timeout), serviceCallback);
    }

    /**
     * Deactivate - single.
     * Deactivates a single content. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be deleted.
     *
     * @param contentId the id of the content to deactivate
     * @param timeout Maximum time to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ContentDetail> deactivateAsync(String contentId, String timeout) {
        return deactivateWithServiceResponseAsync(contentId, timeout).map(new Func1<ServiceResponse<ContentDetail>, ContentDetail>() {
            // @Override
            public ContentDetail call(ServiceResponse<ContentDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Deactivate - single.
     * Deactivates a single content. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be deleted.
     *
     * @param contentId the id of the content to deactivate
     * @param timeout Maximum time to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ServiceResponse<ContentDetail>> deactivateWithServiceResponseAsync(String contentId, String timeout) {
        if (contentId == null) {
            throw new IllegalArgumentException("Parameter contentId is required and cannot be null.");
        }
        if (timeout == null) {
            throw new IllegalArgumentException("Parameter timeout is required and cannot be null.");
        }
        return service.deactivate(contentId, timeout)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentDetail>>>() {
                // @Override
                public Observable<ServiceResponse<ContentDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentDetail> clientResponse = deactivateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ContentDetail> deactivateDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ContentDetail, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ContentDetail>() { }.getType())
                .build(response);
    }

    /**
     * Deactivate - many.
     * Deactivates multiple contents. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be deleted.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param deactivateRequest The deactivate request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    public BusinessProcess deactivateMany(ContentDeactivateRequest deactivateRequest) {
        return deactivateManyWithServiceResponseAsync(deactivateRequest).toBlocking().single().body();
    }

    /**
     * Deactivate - many.
     * Deactivates multiple contents. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be deleted.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param deactivateRequest The deactivate request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BusinessProcess> deactivateManyAsync(ContentDeactivateRequest deactivateRequest, final ServiceCallback<BusinessProcess> serviceCallback) {
        return ServiceFuture.fromResponse(deactivateManyWithServiceResponseAsync(deactivateRequest), serviceCallback);
    }

    /**
     * Deactivate - many.
     * Deactivates multiple contents. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be deleted.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param deactivateRequest The deactivate request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<BusinessProcess> deactivateManyAsync(ContentDeactivateRequest deactivateRequest) {
        return deactivateManyWithServiceResponseAsync(deactivateRequest).map(new Func1<ServiceResponse<BusinessProcess>, BusinessProcess>() {
            // @Override
            public BusinessProcess call(ServiceResponse<BusinessProcess> response) {
                return response.body();
            }
        });
    }

    /**
     * Deactivate - many.
     * Deactivates multiple contents. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be deleted.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param deactivateRequest The deactivate request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<ServiceResponse<BusinessProcess>> deactivateManyWithServiceResponseAsync(ContentDeactivateRequest deactivateRequest) {
        if (deactivateRequest == null) {
            throw new IllegalArgumentException("Parameter deactivateRequest is required and cannot be null.");
        }
        Validator.validate(deactivateRequest);
        return service.deactivateMany(deactivateRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BusinessProcess>>>() {
                // @Override
                public Observable<ServiceResponse<BusinessProcess>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BusinessProcess> clientResponse = deactivateManyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BusinessProcess> deactivateManyDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BusinessProcess, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BusinessProcess>() { }.getType())
                .build(response);
    }

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated content.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    public ContentDetail reactivate(String contentId, String resolve) {
        return reactivateWithServiceResponseAsync(contentId, resolve).toBlocking().single().body();
    }

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated content.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentDetail> reactivateAsync(String contentId, String resolve, final ServiceCallback<ContentDetail> serviceCallback) {
        return ServiceFuture.fromResponse(reactivateWithServiceResponseAsync(contentId, resolve), serviceCallback);
    }

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated content.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ContentDetail> reactivateAsync(String contentId, String resolve) {
        return reactivateWithServiceResponseAsync(contentId, resolve).map(new Func1<ServiceResponse<ContentDetail>, ContentDetail>() {
            // @Override
            public ContentDetail call(ServiceResponse<ContentDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated content.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ServiceResponse<ContentDetail>> reactivateWithServiceResponseAsync(String contentId, String resolve) {
        if (contentId == null) {
            throw new IllegalArgumentException("Parameter contentId is required and cannot be null.");
        }
        if (resolve == null) {
            throw new IllegalArgumentException("Parameter resolve is required and cannot be null.");
        }
        final String timeout = null;
        final String patterns = null;
        final String allowMissingDependencies = null;
        return service.reactivate(contentId, resolve, timeout, patterns, allowMissingDependencies)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentDetail>>>() {
                // @Override
                public Observable<ServiceResponse<ContentDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentDetail> clientResponse = reactivateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated content.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param allowMissingDependencies Allow reactivating contents that refer to list items or contents that don't exist in the system.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    public ContentDetail reactivate(String contentId, String resolve, String timeout, String patterns, String allowMissingDependencies) {
        return reactivateWithServiceResponseAsync(contentId, resolve, timeout, patterns, allowMissingDependencies).toBlocking().single().body();
    }

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated content.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param allowMissingDependencies Allow reactivating contents that refer to list items or contents that don't exist in the system.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentDetail> reactivateAsync(String contentId, String resolve, String timeout, String patterns, String allowMissingDependencies, final ServiceCallback<ContentDetail> serviceCallback) {
        return ServiceFuture.fromResponse(reactivateWithServiceResponseAsync(contentId, resolve, timeout, patterns, allowMissingDependencies), serviceCallback);
    }

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated content.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param allowMissingDependencies Allow reactivating contents that refer to list items or contents that don't exist in the system.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ContentDetail> reactivateAsync(String contentId, String resolve, String timeout, String patterns, String allowMissingDependencies) {
        return reactivateWithServiceResponseAsync(contentId, resolve, timeout, patterns, allowMissingDependencies).map(new Func1<ServiceResponse<ContentDetail>, ContentDetail>() {
            // @Override
            public ContentDetail call(ServiceResponse<ContentDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated content.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param allowMissingDependencies Allow reactivating contents that refer to list items or contents that don't exist in the system.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ServiceResponse<ContentDetail>> reactivateWithServiceResponseAsync(String contentId, String resolve, String timeout, String patterns, String allowMissingDependencies) {
        if (contentId == null) {
            throw new IllegalArgumentException("Parameter contentId is required and cannot be null.");
        }
        if (resolve == null) {
            throw new IllegalArgumentException("Parameter resolve is required and cannot be null.");
        }
        return service.reactivate(contentId, resolve, timeout, patterns, allowMissingDependencies)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentDetail>>>() {
                // @Override
                public Observable<ServiceResponse<ContentDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentDetail> clientResponse = reactivateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ContentDetail> reactivateDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ContentDetail, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ContentDetail>() { }.getType())
                .build(response);
    }

    /**
     * Reactivate - many.
     * Reactivate previously deactivated contents.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param reactivateRequest The content reactivate request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    public BusinessProcess reactivateMany(ContentReactivateRequest reactivateRequest) {
        return reactivateManyWithServiceResponseAsync(reactivateRequest).toBlocking().single().body();
    }

    /**
     * Reactivate - many.
     * Reactivate previously deactivated contents.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param reactivateRequest The content reactivate request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BusinessProcess> reactivateManyAsync(ContentReactivateRequest reactivateRequest, final ServiceCallback<BusinessProcess> serviceCallback) {
        return ServiceFuture.fromResponse(reactivateManyWithServiceResponseAsync(reactivateRequest), serviceCallback);
    }

    /**
     * Reactivate - many.
     * Reactivate previously deactivated contents.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param reactivateRequest The content reactivate request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<BusinessProcess> reactivateManyAsync(ContentReactivateRequest reactivateRequest) {
        return reactivateManyWithServiceResponseAsync(reactivateRequest).map(new Func1<ServiceResponse<BusinessProcess>, BusinessProcess>() {
            // @Override
            public BusinessProcess call(ServiceResponse<BusinessProcess> response) {
                return response.body();
            }
        });
    }

    /**
     * Reactivate - many.
     * Reactivate previously deactivated contents.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param reactivateRequest The content reactivate request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<ServiceResponse<BusinessProcess>> reactivateManyWithServiceResponseAsync(ContentReactivateRequest reactivateRequest) {
        if (reactivateRequest == null) {
            throw new IllegalArgumentException("Parameter reactivateRequest is required and cannot be null.");
        }
        Validator.validate(reactivateRequest);
        return service.reactivateMany(reactivateRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BusinessProcess>>>() {
                // @Override
                public Observable<ServiceResponse<BusinessProcess>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BusinessProcess> clientResponse = reactivateManyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BusinessProcess> reactivateManyDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BusinessProcess, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BusinessProcess>() { }.getType())
                .build(response);
    }

    /**
     * Update file - single.
     * Update binary file of existing content. The file must already be uploaded before calling this endpoint. See [Transfer](#section/Transfer)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentId The id of the content to replace
     * @param updateRequest Update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    public BusinessProcess updateFile(String contentId, ContentFileUpdateRequest updateRequest) {
        return updateFileWithServiceResponseAsync(contentId, updateRequest).toBlocking().single().body();
    }

    /**
     * Update file - single.
     * Update binary file of existing content. The file must already be uploaded before calling this endpoint. See [Transfer](#section/Transfer)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentId The id of the content to replace
     * @param updateRequest Update request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BusinessProcess> updateFileAsync(String contentId, ContentFileUpdateRequest updateRequest, final ServiceCallback<BusinessProcess> serviceCallback) {
        return ServiceFuture.fromResponse(updateFileWithServiceResponseAsync(contentId, updateRequest), serviceCallback);
    }

    /**
     * Update file - single.
     * Update binary file of existing content. The file must already be uploaded before calling this endpoint. See [Transfer](#section/Transfer)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentId The id of the content to replace
     * @param updateRequest Update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<BusinessProcess> updateFileAsync(String contentId, ContentFileUpdateRequest updateRequest) {
        return updateFileWithServiceResponseAsync(contentId, updateRequest).map(new Func1<ServiceResponse<BusinessProcess>, BusinessProcess>() {
            // @Override
            public BusinessProcess call(ServiceResponse<BusinessProcess> response) {
                return response.body();
            }
        });
    }

    /**
     * Update file - single.
     * Update binary file of existing content. The file must already be uploaded before calling this endpoint. See [Transfer](#section/Transfer)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentId The id of the content to replace
     * @param updateRequest Update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<ServiceResponse<BusinessProcess>> updateFileWithServiceResponseAsync(String contentId, ContentFileUpdateRequest updateRequest) {
        if (contentId == null) {
            throw new IllegalArgumentException("Parameter contentId is required and cannot be null.");
        }
        if (updateRequest == null) {
            throw new IllegalArgumentException("Parameter updateRequest is required and cannot be null.");
        }
        Validator.validate(updateRequest);
        return service.updateFile(contentId, updateRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BusinessProcess>>>() {
                // @Override
                public Observable<ServiceResponse<BusinessProcess>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BusinessProcess> clientResponse = updateFileDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BusinessProcess> updateFileDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BusinessProcess, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BusinessProcess>() { }.getType())
                .build(response);
    }

    /**
     * Update metadata - single.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    public ContentDetail updateMetadata(String contentId, ContentMetadataUpdateRequest updateRequest, String resolve) {
        return updateMetadataWithServiceResponseAsync(contentId, updateRequest, resolve).toBlocking().single().body();
    }

    /**
     * Update metadata - single.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentDetail> updateMetadataAsync(String contentId, ContentMetadataUpdateRequest updateRequest, String resolve, final ServiceCallback<ContentDetail> serviceCallback) {
        return ServiceFuture.fromResponse(updateMetadataWithServiceResponseAsync(contentId, updateRequest, resolve), serviceCallback);
    }

    /**
     * Update metadata - single.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ContentDetail> updateMetadataAsync(String contentId, ContentMetadataUpdateRequest updateRequest, String resolve) {
        return updateMetadataWithServiceResponseAsync(contentId, updateRequest, resolve).map(new Func1<ServiceResponse<ContentDetail>, ContentDetail>() {
            // @Override
            public ContentDetail call(ServiceResponse<ContentDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Update metadata - single.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ServiceResponse<ContentDetail>> updateMetadataWithServiceResponseAsync(String contentId, ContentMetadataUpdateRequest updateRequest, String resolve) {
        if (contentId == null) {
            throw new IllegalArgumentException("Parameter contentId is required and cannot be null.");
        }
        if (updateRequest == null) {
            throw new IllegalArgumentException("Parameter updateRequest is required and cannot be null.");
        }
        if (resolve == null) {
            throw new IllegalArgumentException("Parameter resolve is required and cannot be null.");
        }
        Validator.validate(updateRequest);
        final String allowMissingDependencies = null;
        final String timeout = null;
        final String patterns = null;
        return service.updateMetadata(contentId, updateRequest, resolve, allowMissingDependencies, timeout, patterns)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentDetail>>>() {
                // @Override
                public Observable<ServiceResponse<ContentDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentDetail> clientResponse = updateMetadataDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update metadata - single.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param allowMissingDependencies Allow storing references to missing list items
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    public ContentDetail updateMetadata(String contentId, ContentMetadataUpdateRequest updateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns) {
        return updateMetadataWithServiceResponseAsync(contentId, updateRequest, resolve, allowMissingDependencies, timeout, patterns).toBlocking().single().body();
    }

    /**
     * Update metadata - single.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param allowMissingDependencies Allow storing references to missing list items
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentDetail> updateMetadataAsync(String contentId, ContentMetadataUpdateRequest updateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns, final ServiceCallback<ContentDetail> serviceCallback) {
        return ServiceFuture.fromResponse(updateMetadataWithServiceResponseAsync(contentId, updateRequest, resolve, allowMissingDependencies, timeout, patterns), serviceCallback);
    }

    /**
     * Update metadata - single.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param allowMissingDependencies Allow storing references to missing list items
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ContentDetail> updateMetadataAsync(String contentId, ContentMetadataUpdateRequest updateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns) {
        return updateMetadataWithServiceResponseAsync(contentId, updateRequest, resolve, allowMissingDependencies, timeout, patterns).map(new Func1<ServiceResponse<ContentDetail>, ContentDetail>() {
            // @Override
            public ContentDetail call(ServiceResponse<ContentDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Update metadata - single.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param allowMissingDependencies Allow storing references to missing list items
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ServiceResponse<ContentDetail>> updateMetadataWithServiceResponseAsync(String contentId, ContentMetadataUpdateRequest updateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns) {
        if (contentId == null) {
            throw new IllegalArgumentException("Parameter contentId is required and cannot be null.");
        }
        if (updateRequest == null) {
            throw new IllegalArgumentException("Parameter updateRequest is required and cannot be null.");
        }
        if (resolve == null) {
            throw new IllegalArgumentException("Parameter resolve is required and cannot be null.");
        }
        Validator.validate(updateRequest);
        return service.updateMetadata(contentId, updateRequest, resolve, allowMissingDependencies, timeout, patterns)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentDetail>>>() {
                // @Override
                public Observable<ServiceResponse<ContentDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentDetail> clientResponse = updateMetadataDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ContentDetail> updateMetadataDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ContentDetail, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ContentDetail>() { }.getType())
                .build(response);
    }

    /**
     * Update permissions - single.
     * Updates the content permission sets of a single content. To get a list of available content permission sets, see [Permissions](operation/Permission_SearchContentPermissions).
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    public ContentDetail updatePermissions(String contentId, ContentPermissionsUpdateRequest updateRequest, String resolve) {
        return updatePermissionsWithServiceResponseAsync(contentId, updateRequest, resolve).toBlocking().single().body();
    }

    /**
     * Update permissions - single.
     * Updates the content permission sets of a single content. To get a list of available content permission sets, see [Permissions](operation/Permission_SearchContentPermissions).
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentDetail> updatePermissionsAsync(String contentId, ContentPermissionsUpdateRequest updateRequest, String resolve, final ServiceCallback<ContentDetail> serviceCallback) {
        return ServiceFuture.fromResponse(updatePermissionsWithServiceResponseAsync(contentId, updateRequest, resolve), serviceCallback);
    }

    /**
     * Update permissions - single.
     * Updates the content permission sets of a single content. To get a list of available content permission sets, see [Permissions](operation/Permission_SearchContentPermissions).
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ContentDetail> updatePermissionsAsync(String contentId, ContentPermissionsUpdateRequest updateRequest, String resolve) {
        return updatePermissionsWithServiceResponseAsync(contentId, updateRequest, resolve).map(new Func1<ServiceResponse<ContentDetail>, ContentDetail>() {
            // @Override
            public ContentDetail call(ServiceResponse<ContentDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Update permissions - single.
     * Updates the content permission sets of a single content. To get a list of available content permission sets, see [Permissions](operation/Permission_SearchContentPermissions).
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ServiceResponse<ContentDetail>> updatePermissionsWithServiceResponseAsync(String contentId, ContentPermissionsUpdateRequest updateRequest, String resolve) {
        if (contentId == null) {
            throw new IllegalArgumentException("Parameter contentId is required and cannot be null.");
        }
        if (updateRequest == null) {
            throw new IllegalArgumentException("Parameter updateRequest is required and cannot be null.");
        }
        if (resolve == null) {
            throw new IllegalArgumentException("Parameter resolve is required and cannot be null.");
        }
        Validator.validate(updateRequest);
        final String timeout = null;
        final String patterns = null;
        return service.updatePermissions(contentId, updateRequest, resolve, timeout, patterns)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentDetail>>>() {
                // @Override
                public Observable<ServiceResponse<ContentDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentDetail> clientResponse = updatePermissionsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update permissions - single.
     * Updates the content permission sets of a single content. To get a list of available content permission sets, see [Permissions](operation/Permission_SearchContentPermissions).
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    public ContentDetail updatePermissions(String contentId, ContentPermissionsUpdateRequest updateRequest, String resolve, String timeout, String patterns) {
        return updatePermissionsWithServiceResponseAsync(contentId, updateRequest, resolve, timeout, patterns).toBlocking().single().body();
    }

    /**
     * Update permissions - single.
     * Updates the content permission sets of a single content. To get a list of available content permission sets, see [Permissions](operation/Permission_SearchContentPermissions).
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentDetail> updatePermissionsAsync(String contentId, ContentPermissionsUpdateRequest updateRequest, String resolve, String timeout, String patterns, final ServiceCallback<ContentDetail> serviceCallback) {
        return ServiceFuture.fromResponse(updatePermissionsWithServiceResponseAsync(contentId, updateRequest, resolve, timeout, patterns), serviceCallback);
    }

    /**
     * Update permissions - single.
     * Updates the content permission sets of a single content. To get a list of available content permission sets, see [Permissions](operation/Permission_SearchContentPermissions).
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ContentDetail> updatePermissionsAsync(String contentId, ContentPermissionsUpdateRequest updateRequest, String resolve, String timeout, String patterns) {
        return updatePermissionsWithServiceResponseAsync(contentId, updateRequest, resolve, timeout, patterns).map(new Func1<ServiceResponse<ContentDetail>, ContentDetail>() {
            // @Override
            public ContentDetail call(ServiceResponse<ContentDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Update permissions - single.
     * Updates the content permission sets of a single content. To get a list of available content permission sets, see [Permissions](operation/Permission_SearchContentPermissions).
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ServiceResponse<ContentDetail>> updatePermissionsWithServiceResponseAsync(String contentId, ContentPermissionsUpdateRequest updateRequest, String resolve, String timeout, String patterns) {
        if (contentId == null) {
            throw new IllegalArgumentException("Parameter contentId is required and cannot be null.");
        }
        if (updateRequest == null) {
            throw new IllegalArgumentException("Parameter updateRequest is required and cannot be null.");
        }
        if (resolve == null) {
            throw new IllegalArgumentException("Parameter resolve is required and cannot be null.");
        }
        Validator.validate(updateRequest);
        return service.updatePermissions(contentId, updateRequest, resolve, timeout, patterns)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentDetail>>>() {
                // @Override
                public Observable<ServiceResponse<ContentDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentDetail> clientResponse = updatePermissionsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ContentDetail> updatePermissionsDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ContentDetail, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ContentDetail>() { }.getType())
                .build(response);
    }

    /**
     * Update metadata - many.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    public BusinessProcess updateMetadataMany(ContentMetadataUpdateManyRequest updateRequest) {
        return updateMetadataManyWithServiceResponseAsync(updateRequest).toBlocking().single().body();
    }

    /**
     * Update metadata - many.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update requests.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BusinessProcess> updateMetadataManyAsync(ContentMetadataUpdateManyRequest updateRequest, final ServiceCallback<BusinessProcess> serviceCallback) {
        return ServiceFuture.fromResponse(updateMetadataManyWithServiceResponseAsync(updateRequest), serviceCallback);
    }

    /**
     * Update metadata - many.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<BusinessProcess> updateMetadataManyAsync(ContentMetadataUpdateManyRequest updateRequest) {
        return updateMetadataManyWithServiceResponseAsync(updateRequest).map(new Func1<ServiceResponse<BusinessProcess>, BusinessProcess>() {
            // @Override
            public BusinessProcess call(ServiceResponse<BusinessProcess> response) {
                return response.body();
            }
        });
    }

    /**
     * Update metadata - many.
     * Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<ServiceResponse<BusinessProcess>> updateMetadataManyWithServiceResponseAsync(ContentMetadataUpdateManyRequest updateRequest) {
        if (updateRequest == null) {
            throw new IllegalArgumentException("Parameter updateRequest is required and cannot be null.");
        }
        Validator.validate(updateRequest);
        return service.updateMetadataMany(updateRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BusinessProcess>>>() {
                // @Override
                public Observable<ServiceResponse<BusinessProcess>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BusinessProcess> clientResponse = updateMetadataManyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BusinessProcess> updateMetadataManyDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BusinessProcess, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BusinessProcess>() { }.getType())
                .build(response);
    }

    /**
     * Update permissions - many.
     * Updates the content permission sets of specified contents. To get a list of available content permission sets, see [Permissions](#operation/Permission_SearchContentPermissions)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The permissions update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    public BusinessProcess updatePermissionsMany(List<ContentPermissionsUpdateRequest> updateRequest) {
        return updatePermissionsManyWithServiceResponseAsync(updateRequest).toBlocking().single().body();
    }

    /**
     * Update permissions - many.
     * Updates the content permission sets of specified contents. To get a list of available content permission sets, see [Permissions](#operation/Permission_SearchContentPermissions)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The permissions update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BusinessProcess> updatePermissionsManyAsync(List<ContentPermissionsUpdateRequest> updateRequest, final ServiceCallback<BusinessProcess> serviceCallback) {
        return ServiceFuture.fromResponse(updatePermissionsManyWithServiceResponseAsync(updateRequest), serviceCallback);
    }

    /**
     * Update permissions - many.
     * Updates the content permission sets of specified contents. To get a list of available content permission sets, see [Permissions](#operation/Permission_SearchContentPermissions)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The permissions update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<BusinessProcess> updatePermissionsManyAsync(List<ContentPermissionsUpdateRequest> updateRequest) {
        return updatePermissionsManyWithServiceResponseAsync(updateRequest).map(new Func1<ServiceResponse<BusinessProcess>, BusinessProcess>() {
            // @Override
            public BusinessProcess call(ServiceResponse<BusinessProcess> response) {
                return response.body();
            }
        });
    }

    /**
     * Update permissions - many.
     * Updates the content permission sets of specified contents. To get a list of available content permission sets, see [Permissions](#operation/Permission_SearchContentPermissions)
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The permissions update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<ServiceResponse<BusinessProcess>> updatePermissionsManyWithServiceResponseAsync(List<ContentPermissionsUpdateRequest> updateRequest) {
        if (updateRequest == null) {
            throw new IllegalArgumentException("Parameter updateRequest is required and cannot be null.");
        }
        Validator.validate(updateRequest);
        return service.updatePermissionsMany(updateRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BusinessProcess>>>() {
                // @Override
                public Observable<ServiceResponse<BusinessProcess>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BusinessProcess> clientResponse = updatePermissionsManyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BusinessProcess> updatePermissionsManyDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BusinessProcess, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BusinessProcess>() { }.getType())
                .build(response);
    }

    /**
     * Transfer ownership - single.
     * Transfer ownership of a content to another user. The user must have the ManageContent UserRight.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    public ContentDetail transferOwnership(String contentId, ContentOwnershipTransferRequest updateRequest) {
        return transferOwnershipWithServiceResponseAsync(contentId, updateRequest).toBlocking().single().body();
    }

    /**
     * Transfer ownership - single.
     * Transfer ownership of a content to another user. The user must have the ManageContent UserRight.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentDetail> transferOwnershipAsync(String contentId, ContentOwnershipTransferRequest updateRequest, final ServiceCallback<ContentDetail> serviceCallback) {
        return ServiceFuture.fromResponse(transferOwnershipWithServiceResponseAsync(contentId, updateRequest), serviceCallback);
    }

    /**
     * Transfer ownership - single.
     * Transfer ownership of a content to another user. The user must have the ManageContent UserRight.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ContentDetail> transferOwnershipAsync(String contentId, ContentOwnershipTransferRequest updateRequest) {
        return transferOwnershipWithServiceResponseAsync(contentId, updateRequest).map(new Func1<ServiceResponse<ContentDetail>, ContentDetail>() {
            // @Override
            public ContentDetail call(ServiceResponse<ContentDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Transfer ownership - single.
     * Transfer ownership of a content to another user. The user must have the ManageContent UserRight.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ServiceResponse<ContentDetail>> transferOwnershipWithServiceResponseAsync(String contentId, ContentOwnershipTransferRequest updateRequest) {
        if (contentId == null) {
            throw new IllegalArgumentException("Parameter contentId is required and cannot be null.");
        }
        if (updateRequest == null) {
            throw new IllegalArgumentException("Parameter updateRequest is required and cannot be null.");
        }
        Validator.validate(updateRequest);
        final String timeout = null;
        return service.transferOwnership(contentId, updateRequest, timeout)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentDetail>>>() {
                // @Override
                public Observable<ServiceResponse<ContentDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentDetail> clientResponse = transferOwnershipDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Transfer ownership - single.
     * Transfer ownership of a content to another user. The user must have the ManageContent UserRight.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @param timeout Maximum time to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentDetail object if successful.
     */
    public ContentDetail transferOwnership(String contentId, ContentOwnershipTransferRequest updateRequest, String timeout) {
        return transferOwnershipWithServiceResponseAsync(contentId, updateRequest, timeout).toBlocking().single().body();
    }

    /**
     * Transfer ownership - single.
     * Transfer ownership of a content to another user. The user must have the ManageContent UserRight.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentDetail> transferOwnershipAsync(String contentId, ContentOwnershipTransferRequest updateRequest, String timeout, final ServiceCallback<ContentDetail> serviceCallback) {
        return ServiceFuture.fromResponse(transferOwnershipWithServiceResponseAsync(contentId, updateRequest, timeout), serviceCallback);
    }

    /**
     * Transfer ownership - single.
     * Transfer ownership of a content to another user. The user must have the ManageContent UserRight.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @param timeout Maximum time to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ContentDetail> transferOwnershipAsync(String contentId, ContentOwnershipTransferRequest updateRequest, String timeout) {
        return transferOwnershipWithServiceResponseAsync(contentId, updateRequest, timeout).map(new Func1<ServiceResponse<ContentDetail>, ContentDetail>() {
            // @Override
            public ContentDetail call(ServiceResponse<ContentDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Transfer ownership - single.
     * Transfer ownership of a content to another user. The user must have the ManageContent UserRight.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @param timeout Maximum time to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentDetail object
     */
    public Observable<ServiceResponse<ContentDetail>> transferOwnershipWithServiceResponseAsync(String contentId, ContentOwnershipTransferRequest updateRequest, String timeout) {
        if (contentId == null) {
            throw new IllegalArgumentException("Parameter contentId is required and cannot be null.");
        }
        if (updateRequest == null) {
            throw new IllegalArgumentException("Parameter updateRequest is required and cannot be null.");
        }
        Validator.validate(updateRequest);
        return service.transferOwnership(contentId, updateRequest, timeout)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentDetail>>>() {
                // @Override
                public Observable<ServiceResponse<ContentDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentDetail> clientResponse = transferOwnershipDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ContentDetail> transferOwnershipDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ContentDetail, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ContentDetail>() { }.getType())
                .build(response);
    }

    /**
     * Transfer ownership - many.
     * Transfer ownership of multiple contents to another user. The user must have the ManageContent UserRight.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentsOwnershipTransferRequest The content ownership transfer request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    public BusinessProcess transferOwnershipMany(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest) {
        return transferOwnershipManyWithServiceResponseAsync(contentsOwnershipTransferRequest).toBlocking().single().body();
    }

    /**
     * Transfer ownership - many.
     * Transfer ownership of multiple contents to another user. The user must have the ManageContent UserRight.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentsOwnershipTransferRequest The content ownership transfer request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BusinessProcess> transferOwnershipManyAsync(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest, final ServiceCallback<BusinessProcess> serviceCallback) {
        return ServiceFuture.fromResponse(transferOwnershipManyWithServiceResponseAsync(contentsOwnershipTransferRequest), serviceCallback);
    }

    /**
     * Transfer ownership - many.
     * Transfer ownership of multiple contents to another user. The user must have the ManageContent UserRight.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentsOwnershipTransferRequest The content ownership transfer request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<BusinessProcess> transferOwnershipManyAsync(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest) {
        return transferOwnershipManyWithServiceResponseAsync(contentsOwnershipTransferRequest).map(new Func1<ServiceResponse<BusinessProcess>, BusinessProcess>() {
            // @Override
            public BusinessProcess call(ServiceResponse<BusinessProcess> response) {
                return response.body();
            }
        });
    }

    /**
     * Transfer ownership - many.
     * Transfer ownership of multiple contents to another user. The user must have the ManageContent UserRight.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param contentsOwnershipTransferRequest The content ownership transfer request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<ServiceResponse<BusinessProcess>> transferOwnershipManyWithServiceResponseAsync(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest) {
        if (contentsOwnershipTransferRequest == null) {
            throw new IllegalArgumentException("Parameter contentsOwnershipTransferRequest is required and cannot be null.");
        }
        Validator.validate(contentsOwnershipTransferRequest);
        return service.transferOwnershipMany(contentsOwnershipTransferRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BusinessProcess>>>() {
                // @Override
                public Observable<ServiceResponse<BusinessProcess>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BusinessProcess> clientResponse = transferOwnershipManyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BusinessProcess> transferOwnershipManyDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BusinessProcess, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BusinessProcess>() { }.getType())
                .build(response);
    }

    /**
     * Batch update fields - by ids.
     * Updates metadata layers of specified contents. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadataMany](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    public BusinessProcess batchUpdateFieldsByIds(ContentFieldsUpdateRequest updateRequest) {
        return batchUpdateFieldsByIdsWithServiceResponseAsync(updateRequest).toBlocking().single().body();
    }

    /**
     * Batch update fields - by ids.
     * Updates metadata layers of specified contents. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadataMany](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BusinessProcess> batchUpdateFieldsByIdsAsync(ContentFieldsUpdateRequest updateRequest, final ServiceCallback<BusinessProcess> serviceCallback) {
        return ServiceFuture.fromResponse(batchUpdateFieldsByIdsWithServiceResponseAsync(updateRequest), serviceCallback);
    }

    /**
     * Batch update fields - by ids.
     * Updates metadata layers of specified contents. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadataMany](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<BusinessProcess> batchUpdateFieldsByIdsAsync(ContentFieldsUpdateRequest updateRequest) {
        return batchUpdateFieldsByIdsWithServiceResponseAsync(updateRequest).map(new Func1<ServiceResponse<BusinessProcess>, BusinessProcess>() {
            // @Override
            public BusinessProcess call(ServiceResponse<BusinessProcess> response) {
                return response.body();
            }
        });
    }

    /**
     * Batch update fields - by ids.
     * Updates metadata layers of specified contents. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadataMany](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<ServiceResponse<BusinessProcess>> batchUpdateFieldsByIdsWithServiceResponseAsync(ContentFieldsUpdateRequest updateRequest) {
        if (updateRequest == null) {
            throw new IllegalArgumentException("Parameter updateRequest is required and cannot be null.");
        }
        Validator.validate(updateRequest);
        return service.batchUpdateFieldsByIds(updateRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BusinessProcess>>>() {
                // @Override
                public Observable<ServiceResponse<BusinessProcess>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BusinessProcess> clientResponse = batchUpdateFieldsByIdsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BusinessProcess> batchUpdateFieldsByIdsDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BusinessProcess, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BusinessProcess>() { }.getType())
                .build(response);
    }

    /**
     * Batch update fields - by filter.
     * Updates metadata layers of specified contents. For file-less contents, the content itself can be updated aswell. A filter must be provided to limit the update to specific contents.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    public BusinessProcess batchUpdateFieldsByFilter(ContentFieldsFilterUpdateRequest updateRequest) {
        return batchUpdateFieldsByFilterWithServiceResponseAsync(updateRequest).toBlocking().single().body();
    }

    /**
     * Batch update fields - by filter.
     * Updates metadata layers of specified contents. For file-less contents, the content itself can be updated aswell. A filter must be provided to limit the update to specific contents.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BusinessProcess> batchUpdateFieldsByFilterAsync(ContentFieldsFilterUpdateRequest updateRequest, final ServiceCallback<BusinessProcess> serviceCallback) {
        return ServiceFuture.fromResponse(batchUpdateFieldsByFilterWithServiceResponseAsync(updateRequest), serviceCallback);
    }

    /**
     * Batch update fields - by filter.
     * Updates metadata layers of specified contents. For file-less contents, the content itself can be updated aswell. A filter must be provided to limit the update to specific contents.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<BusinessProcess> batchUpdateFieldsByFilterAsync(ContentFieldsFilterUpdateRequest updateRequest) {
        return batchUpdateFieldsByFilterWithServiceResponseAsync(updateRequest).map(new Func1<ServiceResponse<BusinessProcess>, BusinessProcess>() {
            // @Override
            public BusinessProcess call(ServiceResponse<BusinessProcess> response) {
                return response.body();
            }
        });
    }

    /**
     * Batch update fields - by filter.
     * Updates metadata layers of specified contents. For file-less contents, the content itself can be updated aswell. A filter must be provided to limit the update to specific contents.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<ServiceResponse<BusinessProcess>> batchUpdateFieldsByFilterWithServiceResponseAsync(ContentFieldsFilterUpdateRequest updateRequest) {
        if (updateRequest == null) {
            throw new IllegalArgumentException("Parameter updateRequest is required and cannot be null.");
        }
        Validator.validate(updateRequest);
        return service.batchUpdateFieldsByFilter(updateRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BusinessProcess>>>() {
                // @Override
                public Observable<ServiceResponse<BusinessProcess>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BusinessProcess> clientResponse = batchUpdateFieldsByFilterDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BusinessProcess> batchUpdateFieldsByFilterDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BusinessProcess, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BusinessProcess>() { }.getType())
                .build(response);
    }

}
