/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import picturepark.models.BusinessProcess;
import picturepark.models.ListItemAggregationRequest;
import picturepark.models.ListItemCreateManyRequest;
import picturepark.models.ListItemCreateRequest;
import picturepark.models.ListItemDeactivateRequest;
import picturepark.models.ListItemDetail;
import picturepark.models.ListItemFieldsFilterUpdateRequest;
import picturepark.models.ListItemFieldsUpdateRequest;
import picturepark.models.ListItemReactivateRequest;
import picturepark.models.ListItemReferences;
import picturepark.models.ListItemSearchRequest;
import picturepark.models.ListItemSearchResult;
import picturepark.models.ListItemUpdateManyRequest;
import picturepark.models.ListItemUpdateRequest;
import picturepark.models.ObjectAggregationResult;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ListItemClients.
 */
public interface ListItemClients {
    /**
     * Get - single.
     *
     * @param listItemId The list item id.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ListItemDetail object if successful.
     */
    ListItemDetail get(String listItemId, String resolve);

    /**
     * Get - single.
     *
     * @param listItemId The list item id.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ListItemDetail> getAsync(String listItemId, String resolve, final ServiceCallback<ListItemDetail> serviceCallback);

    /**
     * Get - single.
     *
     * @param listItemId The list item id.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ListItemDetail> getAsync(String listItemId, String resolve);

    /**
     * Get - single.
     *
     * @param listItemId The list item id.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ServiceResponse<ListItemDetail>> getWithServiceResponseAsync(String listItemId, String resolve);
    /**
     * Get - single.
     *
     * @param listItemId The list item id.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ListItemDetail object if successful.
     */
    ListItemDetail get(String listItemId, String resolve, String patterns);

    /**
     * Get - single.
     *
     * @param listItemId The list item id.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ListItemDetail> getAsync(String listItemId, String resolve, String patterns, final ServiceCallback<ListItemDetail> serviceCallback);

    /**
     * Get - single.
     *
     * @param listItemId The list item id.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ListItemDetail> getAsync(String listItemId, String resolve, String patterns);

    /**
     * Get - single.
     *
     * @param listItemId The list item id.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ServiceResponse<ListItemDetail>> getWithServiceResponseAsync(String listItemId, String resolve, String patterns);

    /**
     * Update - single.
     * Updates a single list item.
     *
     * @param listItemId The list item id.
     * @param updateRequest The list item update request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ListItemDetail object if successful.
     */
    ListItemDetail update(String listItemId, ListItemUpdateRequest updateRequest, String resolve);

    /**
     * Update - single.
     * Updates a single list item.
     *
     * @param listItemId The list item id.
     * @param updateRequest The list item update request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ListItemDetail> updateAsync(String listItemId, ListItemUpdateRequest updateRequest, String resolve, final ServiceCallback<ListItemDetail> serviceCallback);

    /**
     * Update - single.
     * Updates a single list item.
     *
     * @param listItemId The list item id.
     * @param updateRequest The list item update request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ListItemDetail> updateAsync(String listItemId, ListItemUpdateRequest updateRequest, String resolve);

    /**
     * Update - single.
     * Updates a single list item.
     *
     * @param listItemId The list item id.
     * @param updateRequest The list item update request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ServiceResponse<ListItemDetail>> updateWithServiceResponseAsync(String listItemId, ListItemUpdateRequest updateRequest, String resolve);
    /**
     * Update - single.
     * Updates a single list item.
     *
     * @param listItemId The list item id.
     * @param updateRequest The list item update request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param allowMissingDependencies Allow creating list items that refer to list items or contents that don't exist in the system.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ListItemDetail object if successful.
     */
    ListItemDetail update(String listItemId, ListItemUpdateRequest updateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns);

    /**
     * Update - single.
     * Updates a single list item.
     *
     * @param listItemId The list item id.
     * @param updateRequest The list item update request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param allowMissingDependencies Allow creating list items that refer to list items or contents that don't exist in the system.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ListItemDetail> updateAsync(String listItemId, ListItemUpdateRequest updateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns, final ServiceCallback<ListItemDetail> serviceCallback);

    /**
     * Update - single.
     * Updates a single list item.
     *
     * @param listItemId The list item id.
     * @param updateRequest The list item update request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param allowMissingDependencies Allow creating list items that refer to list items or contents that don't exist in the system.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ListItemDetail> updateAsync(String listItemId, ListItemUpdateRequest updateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns);

    /**
     * Update - single.
     * Updates a single list item.
     *
     * @param listItemId The list item id.
     * @param updateRequest The list item update request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param allowMissingDependencies Allow creating list items that refer to list items or contents that don't exist in the system.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ServiceResponse<ListItemDetail>> updateWithServiceResponseAsync(String listItemId, ListItemUpdateRequest updateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns);

    /**
     * Search.
     * Searches list items as specified in the search request.
     *
     * @param listItemSearchRequest The list item search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ListItemSearchResult object if successful.
     */
    ListItemSearchResult search(ListItemSearchRequest listItemSearchRequest);

    /**
     * Search.
     * Searches list items as specified in the search request.
     *
     * @param listItemSearchRequest The list item search request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ListItemSearchResult> searchAsync(ListItemSearchRequest listItemSearchRequest, final ServiceCallback<ListItemSearchResult> serviceCallback);

    /**
     * Search.
     * Searches list items as specified in the search request.
     *
     * @param listItemSearchRequest The list item search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemSearchResult object
     */
    Observable<ListItemSearchResult> searchAsync(ListItemSearchRequest listItemSearchRequest);

    /**
     * Search.
     * Searches list items as specified in the search request.
     *
     * @param listItemSearchRequest The list item search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemSearchResult object
     */
    Observable<ServiceResponse<ListItemSearchResult>> searchWithServiceResponseAsync(ListItemSearchRequest listItemSearchRequest);

    /**
     * Aggregate.
     * Aggregates list items as specified in the aggregation request.
     *
     * @param listItemAggregationRequest The list item aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ObjectAggregationResult object if successful.
     */
    ObjectAggregationResult aggregate(ListItemAggregationRequest listItemAggregationRequest);

    /**
     * Aggregate.
     * Aggregates list items as specified in the aggregation request.
     *
     * @param listItemAggregationRequest The list item aggregation request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ObjectAggregationResult> aggregateAsync(ListItemAggregationRequest listItemAggregationRequest, final ServiceCallback<ObjectAggregationResult> serviceCallback);

    /**
     * Aggregate.
     * Aggregates list items as specified in the aggregation request.
     *
     * @param listItemAggregationRequest The list item aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ObjectAggregationResult object
     */
    Observable<ObjectAggregationResult> aggregateAsync(ListItemAggregationRequest listItemAggregationRequest);

    /**
     * Aggregate.
     * Aggregates list items as specified in the aggregation request.
     *
     * @param listItemAggregationRequest The list item aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ObjectAggregationResult object
     */
    Observable<ServiceResponse<ObjectAggregationResult>> aggregateWithServiceResponseAsync(ListItemAggregationRequest listItemAggregationRequest);

    /**
     * Create - single.
     * Create a single list item.
     *
     * @param listItemCreateRequest List item create request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ListItemDetail object if successful.
     */
    ListItemDetail create(ListItemCreateRequest listItemCreateRequest, String resolve);

    /**
     * Create - single.
     * Create a single list item.
     *
     * @param listItemCreateRequest List item create request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ListItemDetail> createAsync(ListItemCreateRequest listItemCreateRequest, String resolve, final ServiceCallback<ListItemDetail> serviceCallback);

    /**
     * Create - single.
     * Create a single list item.
     *
     * @param listItemCreateRequest List item create request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ListItemDetail> createAsync(ListItemCreateRequest listItemCreateRequest, String resolve);

    /**
     * Create - single.
     * Create a single list item.
     *
     * @param listItemCreateRequest List item create request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ServiceResponse<ListItemDetail>> createWithServiceResponseAsync(ListItemCreateRequest listItemCreateRequest, String resolve);
    /**
     * Create - single.
     * Create a single list item.
     *
     * @param listItemCreateRequest List item create request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param allowMissingDependencies Allow creating list items that refer to list items or contents that don't exist in the system.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ListItemDetail object if successful.
     */
    ListItemDetail create(ListItemCreateRequest listItemCreateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns);

    /**
     * Create - single.
     * Create a single list item.
     *
     * @param listItemCreateRequest List item create request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param allowMissingDependencies Allow creating list items that refer to list items or contents that don't exist in the system.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ListItemDetail> createAsync(ListItemCreateRequest listItemCreateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns, final ServiceCallback<ListItemDetail> serviceCallback);

    /**
     * Create - single.
     * Create a single list item.
     *
     * @param listItemCreateRequest List item create request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param allowMissingDependencies Allow creating list items that refer to list items or contents that don't exist in the system.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ListItemDetail> createAsync(ListItemCreateRequest listItemCreateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns);

    /**
     * Create - single.
     * Create a single list item.
     *
     * @param listItemCreateRequest List item create request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param allowMissingDependencies Allow creating list items that refer to list items or contents that don't exist in the system.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ServiceResponse<ListItemDetail>> createWithServiceResponseAsync(ListItemCreateRequest listItemCreateRequest, String resolve, String allowMissingDependencies, String timeout, String patterns);

    /**
     * Create - many.
     * Create multiple list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param listItemCreateManyRequest List item create many request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    BusinessProcess createMany(ListItemCreateManyRequest listItemCreateManyRequest);

    /**
     * Create - many.
     * Create multiple list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param listItemCreateManyRequest List item create many request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcess> createManyAsync(ListItemCreateManyRequest listItemCreateManyRequest, final ServiceCallback<BusinessProcess> serviceCallback);

    /**
     * Create - many.
     * Create multiple list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param listItemCreateManyRequest List item create many request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<BusinessProcess> createManyAsync(ListItemCreateManyRequest listItemCreateManyRequest);

    /**
     * Create - many.
     * Create multiple list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param listItemCreateManyRequest List item create many request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<ServiceResponse<BusinessProcess>> createManyWithServiceResponseAsync(ListItemCreateManyRequest listItemCreateManyRequest);

    /**
     * Update - many.
     * Updates multiple list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param listItemUpdateManyRequest List item update many request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    BusinessProcess updateMany(ListItemUpdateManyRequest listItemUpdateManyRequest);

    /**
     * Update - many.
     * Updates multiple list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param listItemUpdateManyRequest List item update many request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcess> updateManyAsync(ListItemUpdateManyRequest listItemUpdateManyRequest, final ServiceCallback<BusinessProcess> serviceCallback);

    /**
     * Update - many.
     * Updates multiple list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param listItemUpdateManyRequest List item update many request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<BusinessProcess> updateManyAsync(ListItemUpdateManyRequest listItemUpdateManyRequest);

    /**
     * Update - many.
     * Updates multiple list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param listItemUpdateManyRequest List item update many request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<ServiceResponse<BusinessProcess>> updateManyWithServiceResponseAsync(ListItemUpdateManyRequest listItemUpdateManyRequest);

    /**
     * Deactivate - single.
     * Deactivates a single listitem. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all files will be deleted.
     *
     * @param listItemId the id of the list item to deactivate
     * @param timeout Maximum time to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ListItemDetail object if successful.
     */
    ListItemDetail deactivate(String listItemId, String timeout);

    /**
     * Deactivate - single.
     * Deactivates a single listitem. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all files will be deleted.
     *
     * @param listItemId the id of the list item to deactivate
     * @param timeout Maximum time to wait for the business process completed state.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ListItemDetail> deactivateAsync(String listItemId, String timeout, final ServiceCallback<ListItemDetail> serviceCallback);

    /**
     * Deactivate - single.
     * Deactivates a single listitem. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all files will be deleted.
     *
     * @param listItemId the id of the list item to deactivate
     * @param timeout Maximum time to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ListItemDetail> deactivateAsync(String listItemId, String timeout);

    /**
     * Deactivate - single.
     * Deactivates a single listitem. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all files will be deleted.
     *
     * @param listItemId the id of the list item to deactivate
     * @param timeout Maximum time to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ServiceResponse<ListItemDetail>> deactivateWithServiceResponseAsync(String listItemId, String timeout);
    /**
     * Deactivate - single.
     * Deactivates a single listitem. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all files will be deleted.
     *
     * @param listItemId the id of the list item to deactivate
     * @param timeout Maximum time to wait for the business process completed state.
     * @param forceReferenceRemoval A value indicating whether references to the listitem should be removed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ListItemDetail object if successful.
     */
    ListItemDetail deactivate(String listItemId, String timeout, String forceReferenceRemoval);

    /**
     * Deactivate - single.
     * Deactivates a single listitem. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all files will be deleted.
     *
     * @param listItemId the id of the list item to deactivate
     * @param timeout Maximum time to wait for the business process completed state.
     * @param forceReferenceRemoval A value indicating whether references to the listitem should be removed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ListItemDetail> deactivateAsync(String listItemId, String timeout, String forceReferenceRemoval, final ServiceCallback<ListItemDetail> serviceCallback);

    /**
     * Deactivate - single.
     * Deactivates a single listitem. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all files will be deleted.
     *
     * @param listItemId the id of the list item to deactivate
     * @param timeout Maximum time to wait for the business process completed state.
     * @param forceReferenceRemoval A value indicating whether references to the listitem should be removed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ListItemDetail> deactivateAsync(String listItemId, String timeout, String forceReferenceRemoval);

    /**
     * Deactivate - single.
     * Deactivates a single listitem. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all files will be deleted.
     *
     * @param listItemId the id of the list item to deactivate
     * @param timeout Maximum time to wait for the business process completed state.
     * @param forceReferenceRemoval A value indicating whether references to the listitem should be removed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ServiceResponse<ListItemDetail>> deactivateWithServiceResponseAsync(String listItemId, String timeout, String forceReferenceRemoval);

    /**
     * Deactivate - many.
     * Deactivates multiple list items. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all files will be deleted.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param deactivateRequest The list items deactivate request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    BusinessProcess deactivateMany(ListItemDeactivateRequest deactivateRequest);

    /**
     * Deactivate - many.
     * Deactivates multiple list items. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all files will be deleted.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param deactivateRequest The list items deactivate request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcess> deactivateManyAsync(ListItemDeactivateRequest deactivateRequest, final ServiceCallback<BusinessProcess> serviceCallback);

    /**
     * Deactivate - many.
     * Deactivates multiple list items. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all files will be deleted.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param deactivateRequest The list items deactivate request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<BusinessProcess> deactivateManyAsync(ListItemDeactivateRequest deactivateRequest);

    /**
     * Deactivate - many.
     * Deactivates multiple list items. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all files will be deleted.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param deactivateRequest The list items deactivate request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<ServiceResponse<BusinessProcess>> deactivateManyWithServiceResponseAsync(ListItemDeactivateRequest deactivateRequest);

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated list item.
     *
     * @param listItemId The list item id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ListItemDetail object if successful.
     */
    ListItemDetail reactivate(String listItemId);

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated list item.
     *
     * @param listItemId The list item id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ListItemDetail> reactivateAsync(String listItemId, final ServiceCallback<ListItemDetail> serviceCallback);

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated list item.
     *
     * @param listItemId The list item id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ListItemDetail> reactivateAsync(String listItemId);

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated list item.
     *
     * @param listItemId The list item id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ServiceResponse<ListItemDetail>> reactivateWithServiceResponseAsync(String listItemId);
    /**
     * Reactivate - single.
     * Reactivate a previously deactivated list item.
     *
     * @param listItemId The list item id.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param allowMissingDependencies Allow reactivating list items that refer to list items or contents that don't exist in the system.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ListItemDetail object if successful.
     */
    ListItemDetail reactivate(String listItemId, String timeout, String patterns, String allowMissingDependencies);

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated list item.
     *
     * @param listItemId The list item id.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param allowMissingDependencies Allow reactivating list items that refer to list items or contents that don't exist in the system.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ListItemDetail> reactivateAsync(String listItemId, String timeout, String patterns, String allowMissingDependencies, final ServiceCallback<ListItemDetail> serviceCallback);

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated list item.
     *
     * @param listItemId The list item id.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param allowMissingDependencies Allow reactivating list items that refer to list items or contents that don't exist in the system.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ListItemDetail> reactivateAsync(String listItemId, String timeout, String patterns, String allowMissingDependencies);

    /**
     * Reactivate - single.
     * Reactivate a previously deactivated list item.
     *
     * @param listItemId The list item id.
     * @param timeout Maximum time to wait for the business process completed state.
     * @param patterns List of display pattern types. Resolves display values of referenced list items where the display pattern matches.
     * @param allowMissingDependencies Allow reactivating list items that refer to list items or contents that don't exist in the system.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemDetail object
     */
    Observable<ServiceResponse<ListItemDetail>> reactivateWithServiceResponseAsync(String listItemId, String timeout, String patterns, String allowMissingDependencies);

    /**
     * Reactivate - many.
     * Reactivate previously deactivated list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param reactivateRequest The list items reactivate request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    BusinessProcess reactivateMany(ListItemReactivateRequest reactivateRequest);

    /**
     * Reactivate - many.
     * Reactivate previously deactivated list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param reactivateRequest The list items reactivate request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcess> reactivateManyAsync(ListItemReactivateRequest reactivateRequest, final ServiceCallback<BusinessProcess> serviceCallback);

    /**
     * Reactivate - many.
     * Reactivate previously deactivated list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param reactivateRequest The list items reactivate request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<BusinessProcess> reactivateManyAsync(ListItemReactivateRequest reactivateRequest);

    /**
     * Reactivate - many.
     * Reactivate previously deactivated list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param reactivateRequest The list items reactivate request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<ServiceResponse<BusinessProcess>> reactivateManyWithServiceResponseAsync(ListItemReactivateRequest reactivateRequest);

    /**
     * Batch update fields - by ids.
     * Update fields of multiple list items. A list of listItemIds must be provided to limit the update to specific list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    BusinessProcess batchUpdateFieldsByIds(ListItemFieldsUpdateRequest updateRequest);

    /**
     * Batch update fields - by ids.
     * Update fields of multiple list items. A list of listItemIds must be provided to limit the update to specific list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcess> batchUpdateFieldsByIdsAsync(ListItemFieldsUpdateRequest updateRequest, final ServiceCallback<BusinessProcess> serviceCallback);

    /**
     * Batch update fields - by ids.
     * Update fields of multiple list items. A list of listItemIds must be provided to limit the update to specific list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<BusinessProcess> batchUpdateFieldsByIdsAsync(ListItemFieldsUpdateRequest updateRequest);

    /**
     * Batch update fields - by ids.
     * Update fields of multiple list items. A list of listItemIds must be provided to limit the update to specific list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<ServiceResponse<BusinessProcess>> batchUpdateFieldsByIdsWithServiceResponseAsync(ListItemFieldsUpdateRequest updateRequest);

    /**
     * Batch update fields - by filter.
     * Update fields of multiple list items. A filter must be provided to limit the update to specific list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    BusinessProcess batchUpdateFieldsByFilter(ListItemFieldsFilterUpdateRequest updateRequest);

    /**
     * Batch update fields - by filter.
     * Update fields of multiple list items. A filter must be provided to limit the update to specific list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcess> batchUpdateFieldsByFilterAsync(ListItemFieldsFilterUpdateRequest updateRequest, final ServiceCallback<BusinessProcess> serviceCallback);

    /**
     * Batch update fields - by filter.
     * Update fields of multiple list items. A filter must be provided to limit the update to specific list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<BusinessProcess> batchUpdateFieldsByFilterAsync(ListItemFieldsFilterUpdateRequest updateRequest);

    /**
     * Batch update fields - by filter.
     * Update fields of multiple list items. A filter must be provided to limit the update to specific list items.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<ServiceResponse<BusinessProcess>> batchUpdateFieldsByFilterWithServiceResponseAsync(ListItemFieldsFilterUpdateRequest updateRequest);

    /**
     * Gets the references to a list item.
     *
     * @param listItemId The ID of the list item.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ListItemReferences object if successful.
     */
    ListItemReferences getReferencesToListItem(String listItemId);

    /**
     * Gets the references to a list item.
     *
     * @param listItemId The ID of the list item.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ListItemReferences> getReferencesToListItemAsync(String listItemId, final ServiceCallback<ListItemReferences> serviceCallback);

    /**
     * Gets the references to a list item.
     *
     * @param listItemId The ID of the list item.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemReferences object
     */
    Observable<ListItemReferences> getReferencesToListItemAsync(String listItemId);

    /**
     * Gets the references to a list item.
     *
     * @param listItemId The ID of the list item.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListItemReferences object
     */
    Observable<ServiceResponse<ListItemReferences>> getReferencesToListItemWithServiceResponseAsync(String listItemId);

    /**
     * Gets the references to the specified list items.
     *
     * @param ids The IDs of the list items.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ListItemReferences&gt; object if successful.
     */
    List<ListItemReferences> getReferencesToListItems(String ids);

    /**
     * Gets the references to the specified list items.
     *
     * @param ids The IDs of the list items.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<ListItemReferences>> getReferencesToListItemsAsync(String ids, final ServiceCallback<List<ListItemReferences>> serviceCallback);

    /**
     * Gets the references to the specified list items.
     *
     * @param ids The IDs of the list items.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ListItemReferences&gt; object
     */
    Observable<List<ListItemReferences>> getReferencesToListItemsAsync(String ids);

    /**
     * Gets the references to the specified list items.
     *
     * @param ids The IDs of the list items.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ListItemReferences&gt; object
     */
    Observable<ServiceResponse<List<ListItemReferences>>> getReferencesToListItemsWithServiceResponseAsync(String ids);

}
