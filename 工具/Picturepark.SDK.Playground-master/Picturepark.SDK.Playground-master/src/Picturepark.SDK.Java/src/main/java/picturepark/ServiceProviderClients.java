/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import picturepark.models.CustomerServiceProviderConfiguration;
import picturepark.models.ServiceProviderConfigurationUpdateRequest;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ServiceProviderClients.
 */
public interface ServiceProviderClients {
    /**
     * Get configuration.
     * Gets the customer configuration of a specific service provider instance.
     *
     * @param serviceProviderId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CustomerServiceProviderConfiguration object if successful.
     */
    CustomerServiceProviderConfiguration getConfiguration(String serviceProviderId);

    /**
     * Get configuration.
     * Gets the customer configuration of a specific service provider instance.
     *
     * @param serviceProviderId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<CustomerServiceProviderConfiguration> getConfigurationAsync(String serviceProviderId, final ServiceCallback<CustomerServiceProviderConfiguration> serviceCallback);

    /**
     * Get configuration.
     * Gets the customer configuration of a specific service provider instance.
     *
     * @param serviceProviderId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerServiceProviderConfiguration object
     */
    Observable<CustomerServiceProviderConfiguration> getConfigurationAsync(String serviceProviderId);

    /**
     * Get configuration.
     * Gets the customer configuration of a specific service provider instance.
     *
     * @param serviceProviderId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerServiceProviderConfiguration object
     */
    Observable<ServiceResponse<CustomerServiceProviderConfiguration>> getConfigurationWithServiceResponseAsync(String serviceProviderId);

    /**
     * Update configuration.
     * Updates the customer configuration of a specific service provider instance.
     *
     * @param serviceProviderId the String value
     * @param configuration the ServiceProviderConfigurationUpdateRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CustomerServiceProviderConfiguration object if successful.
     */
    CustomerServiceProviderConfiguration updateConfiguration(String serviceProviderId, ServiceProviderConfigurationUpdateRequest configuration);

    /**
     * Update configuration.
     * Updates the customer configuration of a specific service provider instance.
     *
     * @param serviceProviderId the String value
     * @param configuration the ServiceProviderConfigurationUpdateRequest value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<CustomerServiceProviderConfiguration> updateConfigurationAsync(String serviceProviderId, ServiceProviderConfigurationUpdateRequest configuration, final ServiceCallback<CustomerServiceProviderConfiguration> serviceCallback);

    /**
     * Update configuration.
     * Updates the customer configuration of a specific service provider instance.
     *
     * @param serviceProviderId the String value
     * @param configuration the ServiceProviderConfigurationUpdateRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerServiceProviderConfiguration object
     */
    Observable<CustomerServiceProviderConfiguration> updateConfigurationAsync(String serviceProviderId, ServiceProviderConfigurationUpdateRequest configuration);

    /**
     * Update configuration.
     * Updates the customer configuration of a specific service provider instance.
     *
     * @param serviceProviderId the String value
     * @param configuration the ServiceProviderConfigurationUpdateRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerServiceProviderConfiguration object
     */
    Observable<ServiceResponse<CustomerServiceProviderConfiguration>> updateConfigurationWithServiceResponseAsync(String serviceProviderId, ServiceProviderConfigurationUpdateRequest configuration);

}
