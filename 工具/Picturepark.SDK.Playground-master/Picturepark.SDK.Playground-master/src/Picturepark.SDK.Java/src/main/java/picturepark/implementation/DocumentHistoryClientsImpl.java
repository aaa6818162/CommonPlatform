/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark.implementation;

import retrofit2.Retrofit;
import picturepark.DocumentHistoryClients;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import picturepark.models.DocumentHistory;
import picturepark.models.DocumentHistoryDifference;
import picturepark.models.DocumentHistorySearchRequest;
import picturepark.models.DocumentHistorySearchResult;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in DocumentHistoryClients.
 */
public class DocumentHistoryClientsImpl implements DocumentHistoryClients {
    /** The Retrofit service to perform REST calls. */
    private DocumentHistoryClientsService service;
    /** The service client containing this operation class. */
    private PictureparkAPIV1Impl client;

    /**
     * Initializes an instance of DocumentHistoryClients.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DocumentHistoryClientsImpl(Retrofit retrofit, PictureparkAPIV1Impl client) {
        this.service = retrofit.create(DocumentHistoryClientsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for DocumentHistoryClients to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DocumentHistoryClientsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.DocumentHistoryClients search" })
        @POST("v1/history/search")
        Observable<Response<ResponseBody>> search(@Body DocumentHistorySearchRequest documentHistorySearchRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.DocumentHistoryClients get" })
        @GET("v1/history/{id}")
        Observable<Response<ResponseBody>> get(@Path("id") String id);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.DocumentHistoryClients getVersion" })
        @GET("v1/history/{id}/{version}")
        Observable<Response<ResponseBody>> getVersion(@Path("id") String id, @Path("version") String version);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.DocumentHistoryClients getDifferenceLatest" })
        @GET("v1/history/{id}/difference/{oldVersion}")
        Observable<Response<ResponseBody>> getDifferenceLatest(@Path("id") String id, @Path("oldVersion") long oldVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.DocumentHistoryClients getDifference" })
        @GET("v1/history/{id}/difference/{oldVersion}/{newVersion}")
        Observable<Response<ResponseBody>> getDifference(@Path("id") String id, @Path("oldVersion") long oldVersion, @Path("newVersion") long newVersion);

    }

    /**
     * Search.
     * Search the document history.
     *
     * @param documentHistorySearchRequest The document history search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DocumentHistorySearchResult object if successful.
     */
    public DocumentHistorySearchResult search(DocumentHistorySearchRequest documentHistorySearchRequest) {
        return searchWithServiceResponseAsync(documentHistorySearchRequest).toBlocking().single().body();
    }

    /**
     * Search.
     * Search the document history.
     *
     * @param documentHistorySearchRequest The document history search request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DocumentHistorySearchResult> searchAsync(DocumentHistorySearchRequest documentHistorySearchRequest, final ServiceCallback<DocumentHistorySearchResult> serviceCallback) {
        return ServiceFuture.fromResponse(searchWithServiceResponseAsync(documentHistorySearchRequest), serviceCallback);
    }

    /**
     * Search.
     * Search the document history.
     *
     * @param documentHistorySearchRequest The document history search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DocumentHistorySearchResult object
     */
    public Observable<DocumentHistorySearchResult> searchAsync(DocumentHistorySearchRequest documentHistorySearchRequest) {
        return searchWithServiceResponseAsync(documentHistorySearchRequest).map(new Func1<ServiceResponse<DocumentHistorySearchResult>, DocumentHistorySearchResult>() {
            // @Override
            public DocumentHistorySearchResult call(ServiceResponse<DocumentHistorySearchResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Search.
     * Search the document history.
     *
     * @param documentHistorySearchRequest The document history search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DocumentHistorySearchResult object
     */
    public Observable<ServiceResponse<DocumentHistorySearchResult>> searchWithServiceResponseAsync(DocumentHistorySearchRequest documentHistorySearchRequest) {
        if (documentHistorySearchRequest == null) {
            throw new IllegalArgumentException("Parameter documentHistorySearchRequest is required and cannot be null.");
        }
        Validator.validate(documentHistorySearchRequest);
        return service.search(documentHistorySearchRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DocumentHistorySearchResult>>>() {
                // @Override
                public Observable<ServiceResponse<DocumentHistorySearchResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DocumentHistorySearchResult> clientResponse = searchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DocumentHistorySearchResult> searchDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DocumentHistorySearchResult, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DocumentHistorySearchResult>() { }.getType())
                .build(response);
    }

    /**
     * Get latest.
     * Gets the latest version of a document.
     *
     * @param id The id of the document (e.g. ContentId)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DocumentHistory object if successful.
     */
    public DocumentHistory get(String id) {
        return getWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Get latest.
     * Gets the latest version of a document.
     *
     * @param id The id of the document (e.g. ContentId)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DocumentHistory> getAsync(String id, final ServiceCallback<DocumentHistory> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Get latest.
     * Gets the latest version of a document.
     *
     * @param id The id of the document (e.g. ContentId)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DocumentHistory object
     */
    public Observable<DocumentHistory> getAsync(String id) {
        return getWithServiceResponseAsync(id).map(new Func1<ServiceResponse<DocumentHistory>, DocumentHistory>() {
            // @Override
            public DocumentHistory call(ServiceResponse<DocumentHistory> response) {
                return response.body();
            }
        });
    }

    /**
     * Get latest.
     * Gets the latest version of a document.
     *
     * @param id The id of the document (e.g. ContentId)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DocumentHistory object
     */
    public Observable<ServiceResponse<DocumentHistory>> getWithServiceResponseAsync(String id) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        return service.get(id)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DocumentHistory>>>() {
                // @Override
                public Observable<ServiceResponse<DocumentHistory>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DocumentHistory> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DocumentHistory> getDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DocumentHistory, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DocumentHistory>() { }.getType())
                .build(response);
    }

    /**
     * Get latest by version.
     * Gets the latest version of a document by specifiying a specific document version.
     *
     * @param id The id of the document (e.g. ContentId)
     * @param version The version
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DocumentHistory object if successful.
     */
    public DocumentHistory getVersion(String id, String version) {
        return getVersionWithServiceResponseAsync(id, version).toBlocking().single().body();
    }

    /**
     * Get latest by version.
     * Gets the latest version of a document by specifiying a specific document version.
     *
     * @param id The id of the document (e.g. ContentId)
     * @param version The version
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DocumentHistory> getVersionAsync(String id, String version, final ServiceCallback<DocumentHistory> serviceCallback) {
        return ServiceFuture.fromResponse(getVersionWithServiceResponseAsync(id, version), serviceCallback);
    }

    /**
     * Get latest by version.
     * Gets the latest version of a document by specifiying a specific document version.
     *
     * @param id The id of the document (e.g. ContentId)
     * @param version The version
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DocumentHistory object
     */
    public Observable<DocumentHistory> getVersionAsync(String id, String version) {
        return getVersionWithServiceResponseAsync(id, version).map(new Func1<ServiceResponse<DocumentHistory>, DocumentHistory>() {
            // @Override
            public DocumentHistory call(ServiceResponse<DocumentHistory> response) {
                return response.body();
            }
        });
    }

    /**
     * Get latest by version.
     * Gets the latest version of a document by specifiying a specific document version.
     *
     * @param id The id of the document (e.g. ContentId)
     * @param version The version
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DocumentHistory object
     */
    public Observable<ServiceResponse<DocumentHistory>> getVersionWithServiceResponseAsync(String id, String version) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (version == null) {
            throw new IllegalArgumentException("Parameter version is required and cannot be null.");
        }
        return service.getVersion(id, version)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DocumentHistory>>>() {
                // @Override
                public Observable<ServiceResponse<DocumentHistory>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DocumentHistory> clientResponse = getVersionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DocumentHistory> getVersionDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DocumentHistory, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DocumentHistory>() { }.getType())
                .build(response);
    }

    /**
     * Get latest difference.
     * Gets the difference on a document by comparing the provided version against the latest versions.
     *
     * @param id The id of the document (e.g. ContentId)
     * @param oldVersion The old version
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DocumentHistoryDifference object if successful.
     */
    public DocumentHistoryDifference getDifferenceLatest(String id, long oldVersion) {
        return getDifferenceLatestWithServiceResponseAsync(id, oldVersion).toBlocking().single().body();
    }

    /**
     * Get latest difference.
     * Gets the difference on a document by comparing the provided version against the latest versions.
     *
     * @param id The id of the document (e.g. ContentId)
     * @param oldVersion The old version
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DocumentHistoryDifference> getDifferenceLatestAsync(String id, long oldVersion, final ServiceCallback<DocumentHistoryDifference> serviceCallback) {
        return ServiceFuture.fromResponse(getDifferenceLatestWithServiceResponseAsync(id, oldVersion), serviceCallback);
    }

    /**
     * Get latest difference.
     * Gets the difference on a document by comparing the provided version against the latest versions.
     *
     * @param id The id of the document (e.g. ContentId)
     * @param oldVersion The old version
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DocumentHistoryDifference object
     */
    public Observable<DocumentHistoryDifference> getDifferenceLatestAsync(String id, long oldVersion) {
        return getDifferenceLatestWithServiceResponseAsync(id, oldVersion).map(new Func1<ServiceResponse<DocumentHistoryDifference>, DocumentHistoryDifference>() {
            // @Override
            public DocumentHistoryDifference call(ServiceResponse<DocumentHistoryDifference> response) {
                return response.body();
            }
        });
    }

    /**
     * Get latest difference.
     * Gets the difference on a document by comparing the provided version against the latest versions.
     *
     * @param id The id of the document (e.g. ContentId)
     * @param oldVersion The old version
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DocumentHistoryDifference object
     */
    public Observable<ServiceResponse<DocumentHistoryDifference>> getDifferenceLatestWithServiceResponseAsync(String id, long oldVersion) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        return service.getDifferenceLatest(id, oldVersion)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DocumentHistoryDifference>>>() {
                // @Override
                public Observable<ServiceResponse<DocumentHistoryDifference>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DocumentHistoryDifference> clientResponse = getDifferenceLatestDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DocumentHistoryDifference> getDifferenceLatestDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DocumentHistoryDifference, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DocumentHistoryDifference>() { }.getType())
                .build(response);
    }

    /**
     * Get difference.
     * Gets the difference on a document by comparing two document versions.
     *
     * @param id The id of the document (e.g. ContentId)
     * @param oldVersion The old version
     * @param newVersion The new version
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DocumentHistoryDifference object if successful.
     */
    public DocumentHistoryDifference getDifference(String id, long oldVersion, long newVersion) {
        return getDifferenceWithServiceResponseAsync(id, oldVersion, newVersion).toBlocking().single().body();
    }

    /**
     * Get difference.
     * Gets the difference on a document by comparing two document versions.
     *
     * @param id The id of the document (e.g. ContentId)
     * @param oldVersion The old version
     * @param newVersion The new version
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DocumentHistoryDifference> getDifferenceAsync(String id, long oldVersion, long newVersion, final ServiceCallback<DocumentHistoryDifference> serviceCallback) {
        return ServiceFuture.fromResponse(getDifferenceWithServiceResponseAsync(id, oldVersion, newVersion), serviceCallback);
    }

    /**
     * Get difference.
     * Gets the difference on a document by comparing two document versions.
     *
     * @param id The id of the document (e.g. ContentId)
     * @param oldVersion The old version
     * @param newVersion The new version
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DocumentHistoryDifference object
     */
    public Observable<DocumentHistoryDifference> getDifferenceAsync(String id, long oldVersion, long newVersion) {
        return getDifferenceWithServiceResponseAsync(id, oldVersion, newVersion).map(new Func1<ServiceResponse<DocumentHistoryDifference>, DocumentHistoryDifference>() {
            // @Override
            public DocumentHistoryDifference call(ServiceResponse<DocumentHistoryDifference> response) {
                return response.body();
            }
        });
    }

    /**
     * Get difference.
     * Gets the difference on a document by comparing two document versions.
     *
     * @param id The id of the document (e.g. ContentId)
     * @param oldVersion The old version
     * @param newVersion The new version
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DocumentHistoryDifference object
     */
    public Observable<ServiceResponse<DocumentHistoryDifference>> getDifferenceWithServiceResponseAsync(String id, long oldVersion, long newVersion) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        return service.getDifference(id, oldVersion, newVersion)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DocumentHistoryDifference>>>() {
                // @Override
                public Observable<ServiceResponse<DocumentHistoryDifference>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DocumentHistoryDifference> clientResponse = getDifferenceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DocumentHistoryDifference> getDifferenceDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DocumentHistoryDifference, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DocumentHistoryDifference>() { }.getType())
                .build(response);
    }

}
