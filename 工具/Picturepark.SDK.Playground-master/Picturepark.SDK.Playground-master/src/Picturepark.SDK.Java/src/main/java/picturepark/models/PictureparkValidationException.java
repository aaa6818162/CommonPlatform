/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark.models;

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonSubTypes;

/**
 * The PictureparkValidationException model.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("PictureparkValidationException")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "UserEmailAlreadyExistsException", value = UserEmailAlreadyExistsException.class),
    @JsonSubTypes.Type(name = "UserRoleAssignedException", value = UserRoleAssignedException.class),
    @JsonSubTypes.Type(name = "DefaultChannelDeleteException", value = DefaultChannelDeleteException.class),
    @JsonSubTypes.Type(name = "TokenValidationException", value = TokenValidationException.class),
    @JsonSubTypes.Type(name = "InvalidStateException", value = InvalidStateException.class),
    @JsonSubTypes.Type(name = "PictureparkArgumentNullException", value = PictureparkArgumentNullException.class),
    @JsonSubTypes.Type(name = "InvalidArgumentException", value = InvalidArgumentException.class),
    @JsonSubTypes.Type(name = "OwnerTokenInUseException", value = OwnerTokenInUseException.class),
    @JsonSubTypes.Type(name = "DuplicatedSearchBehaviourException", value = DuplicatedSearchBehaviourException.class),
    @JsonSubTypes.Type(name = "SearchStringLeadingWildcardException", value = SearchStringLeadingWildcardException.class),
    @JsonSubTypes.Type(name = "DuplicateAggregatorException", value = DuplicateAggregatorException.class),
    @JsonSubTypes.Type(name = "InvalidDateTimeFormatException", value = InvalidDateTimeFormatException.class),
    @JsonSubTypes.Type(name = "DuplicateDocumentException", value = DuplicateDocumentException.class),
    @JsonSubTypes.Type(name = "PermissionOwnershipTransferException", value = PermissionOwnershipTransferException.class),
    @JsonSubTypes.Type(name = "DuplicateRightException", value = DuplicateRightException.class),
    @JsonSubTypes.Type(name = "PermissionValidationException", value = PermissionValidationException.class),
    @JsonSubTypes.Type(name = "UnsupportedListItemChangeCommandException", value = UnsupportedListItemChangeCommandException.class),
    @JsonSubTypes.Type(name = "ListItemLayerException", value = ListItemLayerException.class),
    @JsonSubTypes.Type(name = "DeleteListItemsWithReferencesException", value = DeleteListItemsWithReferencesException.class),
    @JsonSubTypes.Type(name = "WrongChunkSizeException", value = WrongChunkSizeException.class),
    @JsonSubTypes.Type(name = "MissingDependenciesException", value = MissingDependenciesException.class),
    @JsonSubTypes.Type(name = "RelationSelfReferencingException", value = RelationSelfReferencingException.class),
    @JsonSubTypes.Type(name = "InvalidChangeCommandFieldTypeInvalidException", value = InvalidChangeCommandFieldTypeInvalidException.class),
    @JsonSubTypes.Type(name = "InvalidChangeCommandFieldNotFoundException", value = InvalidChangeCommandFieldNotFoundException.class),
    @JsonSubTypes.Type(name = "InvalidMetadataException", value = InvalidMetadataException.class),
    @JsonSubTypes.Type(name = "SchemaFieldOverwriteTypeMismatchException", value = SchemaFieldOverwriteTypeMismatchException.class),
    @JsonSubTypes.Type(name = "SchemaFieldOverwriteIdException", value = SchemaFieldOverwriteIdException.class),
    @JsonSubTypes.Type(name = "SchemaFieldIdDuplicatedException", value = SchemaFieldIdDuplicatedException.class),
    @JsonSubTypes.Type(name = "SchemaFieldSchemaIndexInfoSimpleSearchNestingException", value = SchemaFieldSchemaIndexInfoSimpleSearchNestingException.class),
    @JsonSubTypes.Type(name = "SchemaFieldSchemaIndexInfoNestingException", value = SchemaFieldSchemaIndexInfoNestingException.class),
    @JsonSubTypes.Type(name = "SchemaFieldSchemaIndexInfoException", value = SchemaFieldSchemaIndexInfoException.class),
    @JsonSubTypes.Type(name = "SchemaFieldIdUppercaseException", value = SchemaFieldIdUppercaseException.class),
    @JsonSubTypes.Type(name = "SchemaIdLowercaseException", value = SchemaIdLowercaseException.class),
    @JsonSubTypes.Type(name = "IndexedFieldThresholdExceededException", value = IndexedFieldThresholdExceededException.class),
    @JsonSubTypes.Type(name = "SchemaFieldNumberRangeException", value = SchemaFieldNumberRangeException.class),
    @JsonSubTypes.Type(name = "SchemaInUseContentSchemaException", value = SchemaInUseContentSchemaException.class),
    @JsonSubTypes.Type(name = "SchemaInUseListItemException", value = SchemaInUseListItemException.class),
    @JsonSubTypes.Type(name = "SchemaInUseContentException", value = SchemaInUseContentException.class),
    @JsonSubTypes.Type(name = "SchemaInUseFieldException", value = SchemaInUseFieldException.class),
    @JsonSubTypes.Type(name = "SchemaNotFoundInSearchIndexException", value = SchemaNotFoundInSearchIndexException.class),
    @JsonSubTypes.Type(name = "DuplicateMetadataDisplayPatternException", value = DuplicateMetadataDisplayPatternException.class),
    @JsonSubTypes.Type(name = "DuplicateSchemaException", value = DuplicateSchemaException.class),
    @JsonSubTypes.Type(name = "SchemaImportEmptyException", value = SchemaImportEmptyException.class),
    @JsonSubTypes.Type(name = "SchemaImportVersionMismatchException", value = SchemaImportVersionMismatchException.class),
    @JsonSubTypes.Type(name = "SchemaCyclicDependencyException", value = SchemaCyclicDependencyException.class),
    @JsonSubTypes.Type(name = "SchemaInheritanceFieldIndexDeviationException", value = SchemaInheritanceFieldIndexDeviationException.class),
    @JsonSubTypes.Type(name = "SchemaInheritanceTypeDeviationException", value = SchemaInheritanceTypeDeviationException.class),
    @JsonSubTypes.Type(name = "SchemaValidationException", value = SchemaValidationException.class),
    @JsonSubTypes.Type(name = "SchemaSortFieldException", value = SchemaSortFieldException.class),
    @JsonSubTypes.Type(name = "SchemaFieldIdException", value = SchemaFieldIdException.class),
    @JsonSubTypes.Type(name = "SchemaFieldTypeChangeException", value = SchemaFieldTypeChangeException.class),
    @JsonSubTypes.Type(name = "SchemaFixedFieldChangeException", value = SchemaFixedFieldChangeException.class),
    @JsonSubTypes.Type(name = "SchemaFixedFieldDeleteException", value = SchemaFixedFieldDeleteException.class),
    @JsonSubTypes.Type(name = "SchemaFieldIndexException", value = SchemaFieldIndexException.class),
    @JsonSubTypes.Type(name = "SchemaNoContentException", value = SchemaNoContentException.class),
    @JsonSubTypes.Type(name = "SchemaParentChangeException", value = SchemaParentChangeException.class),
    @JsonSubTypes.Type(name = "SchemaMissingTypeException", value = SchemaMissingTypeException.class),
    @JsonSubTypes.Type(name = "SchemaPermissionException", value = SchemaPermissionException.class),
    @JsonSubTypes.Type(name = "SchemaNoLayerException", value = SchemaNoLayerException.class),
    @JsonSubTypes.Type(name = "SchemaIdException", value = SchemaIdException.class),
    @JsonSubTypes.Type(name = "SchemaInUseException", value = SchemaInUseException.class),
    @JsonSubTypes.Type(name = "DeleteContentsWithRelationsException", value = DeleteContentsWithRelationsException.class),
    @JsonSubTypes.Type(name = "SchemaFieldImportMismatchException", value = SchemaFieldImportMismatchException.class),
    @JsonSubTypes.Type(name = "SchemaFieldImportRelatedSchemaMismatchException", value = SchemaFieldImportRelatedSchemaMismatchException.class),
    @JsonSubTypes.Type(name = "SchemaFieldImportTypeMismatchException", value = SchemaFieldImportTypeMismatchException.class)
})
public class PictureparkValidationException extends PictureparkBusinessException {
}
