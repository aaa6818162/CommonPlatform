// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

/**
 * This package contains the classes for PictureparkAPIV1.
 * # Getting started
 Welcome to the reference for the Picturepark REST API.
 ## Client registration
 To use the Picturepark API, you need first to create a new API Client.
 Go to https://{{customerHost}}/Settings/APIClients and create a new API Client based on your desired authentication flow.
 ## Authentication
 The authentication process is based on [OpenID Connect](http://openid.net/connect/).
 The following OAuth 2.0 flows are supported:
 - **Implicit** (Interactive user authentication for SPA Applications)
 - **Hybrid** (Interactive user authentication with server based validation)
 - **Client credentials** (Server to server, create access tokens that do not expire)
 ### Examples
 Example authentication implementations can be found here:
 - Angular: https://github.com/Picturepark/Picturepark.SDK.TypeScript/tree/master/src/picturepark-sdk-v1-angular-app
 - HTML5 Fetch: (TBD)
 - .NET: (TBD)
 ### Access token lifetime
 For **Implicit** and **Hybrid** flow, the access tokens are short-lived (30mins). You need to refresh your access token after it's expired.
 You can silently refresh the token using a hidden Iframe in the browser: [Angular example](https://damienbod.com/2017/06/02/implementing-a-silent-token-renew-in-angular-for-the-openid-connect-implicit-flow/)
 For the **Client credentials** flow, you can create an access token that never expires.
 Go to https://{{customerHost}}/Settings/APIClients
 **Attention: Adding long lived access tokens to a web application (adding token to Javascripts source code) will expose that token to anyone. Use with care and a very limited set of scopes.**
 ### Urls
 - Live: -
 - Preview: https://identity.preview-picturepark.com
 - Stage: https://identity.stage-picturepark.com
 ## SDKs
 To simplify building applications, SDKs for the following languages/frameworks are provided and released as open source under MIT license:
 - .NET
   - [https://github.com/Picturepark/Picturepark.SDK.DotNet](https://github.com/Picturepark/Picturepark.SDK.DotNet)
   - Supports .NET 4.5+ / .NET Standard 1.3+
 - JavaScript / TypeScript
   - [https://github.com/Picturepark/Picturepark.SDK.TypeScript](https://github.com/Picturepark/Picturepark.SDK.TypeScript)
   - Supports [Angular](https://angular.io/) 4.3+ / [HTML 5 Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)
 Clients for other languages can be created using [Autorest](https://github.com/Azure/autorest) using the following OpenAPI provided here:
 - [Picturepark.SDK.Playground](https://github.com/Picturepark/Picturepark.SDK.Playground)
 # Concepts
 ## HTTP Requests
 To perform API calls, you can specify the following HTTP headers:
 | HTTP Header               | Value                | Required |
 | ------------------------- | -------------------- | -------- |
 | Accept                    | application/json     | Yes      |
 | Authorization             | Bearer {accessToken} | Yes (except for publicAccess/* endpoints) |
 | Picturepark-CustomerAlias | Customer identifier  | Yes      |
 | Picturepark-Language      | en / de              | No       |
 ## Error responses
 Errors in Picturepark API are returned using HTTP status codes, as well as a JSON error response object.
 HTTP status 4xx
 - Client errors (e.g. wrong data provided by client)
 HTTP status 5xx
 - Server errors (something went wrong on the server)
 ## Request limits / quota
 To protect the Picturepark API you are limited in the number of API requests per interval.
 If that limit is exceeded you will get an exception with HTTP status code 429 (Too many requests).
 If you need more calls per interval, Pictuepark sales (sales@picturepark.com)
 ## Permissions / Scopes
 In order to be able to perform requests, you need the permissions.
 ### User permissions
 The authenticated user needs the permission in Picturepark to perform the request.
 ### Scopes
 Additionally, your application needs to define which scopes are required.
 For all the scopes requested by your application, the users need to confirm these in the consent screen.
 [List of scopes](#section/Authentication)
 # Search
 Most entities have a search endpoint to search and filter.
 For list items and contents, the search and filters depend on the available schemas and search configurations.
 ## Simple search
 ([Elastic search query string reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html))
 With the simple search a multi field query is executed.
 allow_leading_wildcard is disabled.
 The applicable query string syntax can be found [here](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html).
 The query is executed against all indexed schema fields with a boolean flag *SimpleSearch* set to `true`.
 Running the query against multiple fields enables to put the searched fields under thight control and also to expand each query term to an OR clause (field1="value" or field2="value").
 ## Filtering
 Available filters:
 - AndFilter
 - OrFilter
 - NotFilter
 - DateRangeFilter
 - NumericRangeFilter
 - ExistsFilter
 - PrefixFilter
 - TermFilter
 - TermsFilter
 - GeoBoundingBoxFilter
 - GeoDistanceFilter
 - NestedFilter (Obsolete)
 - ChildFilter
 - ParentFilter.
 */
package picturepark;
