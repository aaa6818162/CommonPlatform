/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import picturepark.models.BusinessProcess;
import picturepark.models.ExistsResponse;
import picturepark.models.SchemaCreateRequest;
import picturepark.models.SchemaDetail;
import picturepark.models.SchemaSearchRequest;
import picturepark.models.SchemaSearchResult;
import picturepark.models.SchemaUpdateRequest;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in SchemaClients.
 */
public interface SchemaClients {
    /**
     * Get - single.
     * Gets the schema detail information by the schema id.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SchemaDetail object if successful.
     */
    SchemaDetail get(String schemaId);

    /**
     * Get - single.
     * Gets the schema detail information by the schema id.
     *
     * @param schemaId The schema id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SchemaDetail> getAsync(String schemaId, final ServiceCallback<SchemaDetail> serviceCallback);

    /**
     * Get - single.
     * Gets the schema detail information by the schema id.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaDetail object
     */
    Observable<SchemaDetail> getAsync(String schemaId);

    /**
     * Get - single.
     * Gets the schema detail information by the schema id.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaDetail object
     */
    Observable<ServiceResponse<SchemaDetail>> getWithServiceResponseAsync(String schemaId);

    /**
     * Update - single.
     * Updates an existing schema.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schemaId The schema id.
     * @param schema The schema update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    BusinessProcess update(String schemaId, SchemaUpdateRequest schema);

    /**
     * Update - single.
     * Updates an existing schema.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schemaId The schema id.
     * @param schema The schema update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcess> updateAsync(String schemaId, SchemaUpdateRequest schema, final ServiceCallback<BusinessProcess> serviceCallback);

    /**
     * Update - single.
     * Updates an existing schema.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schemaId The schema id.
     * @param schema The schema update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<BusinessProcess> updateAsync(String schemaId, SchemaUpdateRequest schema);

    /**
     * Update - single.
     * Updates an existing schema.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schemaId The schema id.
     * @param schema The schema update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<ServiceResponse<BusinessProcess>> updateWithServiceResponseAsync(String schemaId, SchemaUpdateRequest schema);

    /**
     * Delete - single.
     * Delete a single schemas.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    BusinessProcess delete(String schemaId);

    /**
     * Delete - single.
     * Delete a single schemas.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schemaId The schema id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcess> deleteAsync(String schemaId, final ServiceCallback<BusinessProcess> serviceCallback);

    /**
     * Delete - single.
     * Delete a single schemas.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<BusinessProcess> deleteAsync(String schemaId);

    /**
     * Delete - single.
     * Delete a single schemas.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<ServiceResponse<BusinessProcess>> deleteWithServiceResponseAsync(String schemaId);

    /**
     * Get - many.
     * Gets the schema detail informations by given schema ids.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;SchemaDetail&gt; object if successful.
     */
    List<SchemaDetail> getMany();

    /**
     * Get - many.
     * Gets the schema detail informations by given schema ids.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<SchemaDetail>> getManyAsync(final ServiceCallback<List<SchemaDetail>> serviceCallback);

    /**
     * Get - many.
     * Gets the schema detail informations by given schema ids.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SchemaDetail&gt; object
     */
    Observable<List<SchemaDetail>> getManyAsync();

    /**
     * Get - many.
     * Gets the schema detail informations by given schema ids.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SchemaDetail&gt; object
     */
    Observable<ServiceResponse<List<SchemaDetail>>> getManyWithServiceResponseAsync();
    /**
     * Get - many.
     * Gets the schema detail informations by given schema ids.
     *
     * @param ids Comma separated list of schema ids
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;SchemaDetail&gt; object if successful.
     */
    List<SchemaDetail> getMany(String ids);

    /**
     * Get - many.
     * Gets the schema detail informations by given schema ids.
     *
     * @param ids Comma separated list of schema ids
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<SchemaDetail>> getManyAsync(String ids, final ServiceCallback<List<SchemaDetail>> serviceCallback);

    /**
     * Get - many.
     * Gets the schema detail informations by given schema ids.
     *
     * @param ids Comma separated list of schema ids
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SchemaDetail&gt; object
     */
    Observable<List<SchemaDetail>> getManyAsync(String ids);

    /**
     * Get - many.
     * Gets the schema detail informations by given schema ids.
     *
     * @param ids Comma separated list of schema ids
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SchemaDetail&gt; object
     */
    Observable<ServiceResponse<List<SchemaDetail>>> getManyWithServiceResponseAsync(String ids);

    /**
     * Create - single.
     * Create a new schema.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schema The schema create request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    BusinessProcess create(SchemaCreateRequest schema);

    /**
     * Create - single.
     * Create a new schema.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schema The schema create request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BusinessProcess> createAsync(SchemaCreateRequest schema, final ServiceCallback<BusinessProcess> serviceCallback);

    /**
     * Create - single.
     * Create a new schema.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schema The schema create request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<BusinessProcess> createAsync(SchemaCreateRequest schema);

    /**
     * Create - single.
     * Create a new schema.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schema The schema create request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    Observable<ServiceResponse<BusinessProcess>> createWithServiceResponseAsync(SchemaCreateRequest schema);

    /**
     * Search.
     * Searches schemas as specified in the search request.
     *
     * @param schemaSearchRequest The schema search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SchemaSearchResult object if successful.
     */
    SchemaSearchResult search(SchemaSearchRequest schemaSearchRequest);

    /**
     * Search.
     * Searches schemas as specified in the search request.
     *
     * @param schemaSearchRequest The schema search request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SchemaSearchResult> searchAsync(SchemaSearchRequest schemaSearchRequest, final ServiceCallback<SchemaSearchResult> serviceCallback);

    /**
     * Search.
     * Searches schemas as specified in the search request.
     *
     * @param schemaSearchRequest The schema search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaSearchResult object
     */
    Observable<SchemaSearchResult> searchAsync(SchemaSearchRequest schemaSearchRequest);

    /**
     * Search.
     * Searches schemas as specified in the search request.
     *
     * @param schemaSearchRequest The schema search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaSearchResult object
     */
    Observable<ServiceResponse<SchemaSearchResult>> searchWithServiceResponseAsync(SchemaSearchRequest schemaSearchRequest);

    /**
     * Exists.
     * Checks if the schema and optionally the schema's field already exists within this schema.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ExistsResponse object if successful.
     */
    ExistsResponse exists(String schemaId);

    /**
     * Exists.
     * Checks if the schema and optionally the schema's field already exists within this schema.
     *
     * @param schemaId The schema id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ExistsResponse> existsAsync(String schemaId, final ServiceCallback<ExistsResponse> serviceCallback);

    /**
     * Exists.
     * Checks if the schema and optionally the schema's field already exists within this schema.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExistsResponse object
     */
    Observable<ExistsResponse> existsAsync(String schemaId);

    /**
     * Exists.
     * Checks if the schema and optionally the schema's field already exists within this schema.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExistsResponse object
     */
    Observable<ServiceResponse<ExistsResponse>> existsWithServiceResponseAsync(String schemaId);
    /**
     * Exists.
     * Checks if the schema and optionally the schema's field already exists within this schema.
     *
     * @param schemaId The schema id.
     * @param fieldId The optional field id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ExistsResponse object if successful.
     */
    ExistsResponse exists(String schemaId, String fieldId);

    /**
     * Exists.
     * Checks if the schema and optionally the schema's field already exists within this schema.
     *
     * @param schemaId The schema id.
     * @param fieldId The optional field id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ExistsResponse> existsAsync(String schemaId, String fieldId, final ServiceCallback<ExistsResponse> serviceCallback);

    /**
     * Exists.
     * Checks if the schema and optionally the schema's field already exists within this schema.
     *
     * @param schemaId The schema id.
     * @param fieldId The optional field id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExistsResponse object
     */
    Observable<ExistsResponse> existsAsync(String schemaId, String fieldId);

    /**
     * Exists.
     * Checks if the schema and optionally the schema's field already exists within this schema.
     *
     * @param schemaId The schema id.
     * @param fieldId The optional field id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExistsResponse object
     */
    Observable<ServiceResponse<ExistsResponse>> existsWithServiceResponseAsync(String schemaId, String fieldId);

}
