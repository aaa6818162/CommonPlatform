/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark.implementation;

import retrofit2.Retrofit;
import picturepark.UserClients;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import picturepark.models.Channel;
import picturepark.models.UserDetail;
import picturepark.models.UserSearchRequest;
import picturepark.models.UserSearchResult;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in UserClients.
 */
public class UserClientsImpl implements UserClients {
    /** The Retrofit service to perform REST calls. */
    private UserClientsService service;
    /** The service client containing this operation class. */
    private PictureparkAPIV1Impl client;

    /**
     * Initializes an instance of UserClients.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public UserClientsImpl(Retrofit retrofit, PictureparkAPIV1Impl client) {
        this.service = retrofit.create(UserClientsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for UserClients to be
     * used by Retrofit to perform actually REST calls.
     */
    interface UserClientsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.UserClients get" })
        @GET("v1/users/{userId}")
        Observable<Response<ResponseBody>> get(@Path("userId") String userId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.UserClients search" })
        @POST("v1/users/search")
        Observable<Response<ResponseBody>> search(@Body UserSearchRequest searchRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.UserClients getByOwnerToken" })
        @GET("v1/users/owner/{tokenId}")
        Observable<Response<ResponseBody>> getByOwnerToken(@Path("tokenId") String tokenId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.UserClients getChannels" })
        @GET("v1/users/channels")
        Observable<Response<ResponseBody>> getChannels();

    }

    /**
     * Get by id.
     *
     * @param userId The user id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UserDetail object if successful.
     */
    public UserDetail get(String userId) {
        return getWithServiceResponseAsync(userId).toBlocking().single().body();
    }

    /**
     * Get by id.
     *
     * @param userId The user id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UserDetail> getAsync(String userId, final ServiceCallback<UserDetail> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(userId), serviceCallback);
    }

    /**
     * Get by id.
     *
     * @param userId The user id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserDetail object
     */
    public Observable<UserDetail> getAsync(String userId) {
        return getWithServiceResponseAsync(userId).map(new Func1<ServiceResponse<UserDetail>, UserDetail>() {
            // // @Override
            public UserDetail call(ServiceResponse<UserDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Get by id.
     *
     * @param userId The user id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserDetail object
     */
    public Observable<ServiceResponse<UserDetail>> getWithServiceResponseAsync(String userId) {
        if (userId == null) {
            throw new IllegalArgumentException("Parameter userId is required and cannot be null.");
        }
        return service.get(userId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UserDetail>>>() {
                // // @Override
                public Observable<ServiceResponse<UserDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UserDetail> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UserDetail> getDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UserDetail, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<UserDetail>() { }.getType())
                .build(response);
    }

    /**
     * Search for users.
     *
     * @param searchRequest The user search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UserSearchResult object if successful.
     */
    public UserSearchResult search(UserSearchRequest searchRequest) {
        return searchWithServiceResponseAsync(searchRequest).toBlocking().single().body();
    }

    /**
     * Search for users.
     *
     * @param searchRequest The user search request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UserSearchResult> searchAsync(UserSearchRequest searchRequest, final ServiceCallback<UserSearchResult> serviceCallback) {
        return ServiceFuture.fromResponse(searchWithServiceResponseAsync(searchRequest), serviceCallback);
    }

    /**
     * Search for users.
     *
     * @param searchRequest The user search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserSearchResult object
     */
    public Observable<UserSearchResult> searchAsync(UserSearchRequest searchRequest) {
        return searchWithServiceResponseAsync(searchRequest).map(new Func1<ServiceResponse<UserSearchResult>, UserSearchResult>() {
            // // @Override
            public UserSearchResult call(ServiceResponse<UserSearchResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Search for users.
     *
     * @param searchRequest The user search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserSearchResult object
     */
    public Observable<ServiceResponse<UserSearchResult>> searchWithServiceResponseAsync(UserSearchRequest searchRequest) {
        if (searchRequest == null) {
            throw new IllegalArgumentException("Parameter searchRequest is required and cannot be null.");
        }
        Validator.validate(searchRequest);
        return service.search(searchRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UserSearchResult>>>() {
                // // @Override
                public Observable<ServiceResponse<UserSearchResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UserSearchResult> clientResponse = searchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UserSearchResult> searchDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UserSearchResult, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<UserSearchResult>() { }.getType())
                .build(response);
    }

    /**
     * Get by owner token.
     *
     * @param tokenId The token id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UserDetail object if successful.
     */
    public UserDetail getByOwnerToken(String tokenId) {
        return getByOwnerTokenWithServiceResponseAsync(tokenId).toBlocking().single().body();
    }

    /**
     * Get by owner token.
     *
     * @param tokenId The token id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UserDetail> getByOwnerTokenAsync(String tokenId, final ServiceCallback<UserDetail> serviceCallback) {
        return ServiceFuture.fromResponse(getByOwnerTokenWithServiceResponseAsync(tokenId), serviceCallback);
    }

    /**
     * Get by owner token.
     *
     * @param tokenId The token id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserDetail object
     */
    public Observable<UserDetail> getByOwnerTokenAsync(String tokenId) {
        return getByOwnerTokenWithServiceResponseAsync(tokenId).map(new Func1<ServiceResponse<UserDetail>, UserDetail>() {
            // // @Override
            public UserDetail call(ServiceResponse<UserDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Get by owner token.
     *
     * @param tokenId The token id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserDetail object
     */
    public Observable<ServiceResponse<UserDetail>> getByOwnerTokenWithServiceResponseAsync(String tokenId) {
        if (tokenId == null) {
            throw new IllegalArgumentException("Parameter tokenId is required and cannot be null.");
        }
        return service.getByOwnerToken(tokenId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UserDetail>>>() {
                // // @Override
                public Observable<ServiceResponse<UserDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UserDetail> clientResponse = getByOwnerTokenDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UserDetail> getByOwnerTokenDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UserDetail, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<UserDetail>() { }.getType())
                .build(response);
    }

    /**
     * Get list of channels.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Channel&gt; object if successful.
     */
    public List<Channel> getChannels() {
        return getChannelsWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Get list of channels.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Channel>> getChannelsAsync(final ServiceCallback<List<Channel>> serviceCallback) {
        return ServiceFuture.fromResponse(getChannelsWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get list of channels.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Channel&gt; object
     */
    public Observable<List<Channel>> getChannelsAsync() {
        return getChannelsWithServiceResponseAsync().map(new Func1<ServiceResponse<List<Channel>>, List<Channel>>() {
            // // @Override
            public List<Channel> call(ServiceResponse<List<Channel>> response) {
                return response.body();
            }
        });
    }

    /**
     * Get list of channels.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Channel&gt; object
     */
    public Observable<ServiceResponse<List<Channel>>> getChannelsWithServiceResponseAsync() {
        return service.getChannels()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<Channel>>>>() {
                // // @Override
                public Observable<ServiceResponse<List<Channel>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<Channel>> clientResponse = getChannelsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<Channel>> getChannelsDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<List<Channel>, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<Channel>>() { }.getType())
                .build(response);
    }

}
