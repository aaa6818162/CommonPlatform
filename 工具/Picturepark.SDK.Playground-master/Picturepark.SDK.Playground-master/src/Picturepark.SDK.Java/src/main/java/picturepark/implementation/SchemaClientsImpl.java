/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark.implementation;

import retrofit2.Retrofit;
import picturepark.SchemaClients;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import picturepark.models.BusinessProcess;
import picturepark.models.ExistsResponse;
import picturepark.models.SchemaCreateRequest;
import picturepark.models.SchemaDetail;
import picturepark.models.SchemaSearchRequest;
import picturepark.models.SchemaSearchResult;
import picturepark.models.SchemaUpdateRequest;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in SchemaClients.
 */
public class SchemaClientsImpl implements SchemaClients {
    /** The Retrofit service to perform REST calls. */
    private SchemaClientsService service;
    /** The service client containing this operation class. */
    private PictureparkAPIV1Impl client;

    /**
     * Initializes an instance of SchemaClients.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SchemaClientsImpl(Retrofit retrofit, PictureparkAPIV1Impl client) {
        this.service = retrofit.create(SchemaClientsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for SchemaClients to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SchemaClientsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.SchemaClients get" })
        @GET("v1/schemas/{schemaId}")
        Observable<Response<ResponseBody>> get(@Path("schemaId") String schemaId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.SchemaClients update" })
        @PUT("v1/schemas/{schemaId}")
        Observable<Response<ResponseBody>> update(@Path("schemaId") String schemaId, @Body SchemaUpdateRequest schema);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.SchemaClients delete" })
        @HTTP(path = "v1/schemas/{schemaId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("schemaId") String schemaId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.SchemaClients getMany" })
        @GET("v1/schemas")
        Observable<Response<ResponseBody>> getMany(@Query("ids") String ids);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.SchemaClients create" })
        @POST("v1/schemas")
        Observable<Response<ResponseBody>> create(@Body SchemaCreateRequest schema);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.SchemaClients search" })
        @POST("v1/schemas/search")
        Observable<Response<ResponseBody>> search(@Body SchemaSearchRequest schemaSearchRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.SchemaClients exists" })
        @GET("v1/schemas/{schemaId}/exists")
        Observable<Response<ResponseBody>> exists(@Path("schemaId") String schemaId, @Query("fieldId") String fieldId);

    }

    /**
     * Get - single.
     * Gets the schema detail information by the schema id.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SchemaDetail object if successful.
     */
    public SchemaDetail get(String schemaId) {
        return getWithServiceResponseAsync(schemaId).toBlocking().single().body();
    }

    /**
     * Get - single.
     * Gets the schema detail information by the schema id.
     *
     * @param schemaId The schema id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SchemaDetail> getAsync(String schemaId, final ServiceCallback<SchemaDetail> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(schemaId), serviceCallback);
    }

    /**
     * Get - single.
     * Gets the schema detail information by the schema id.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaDetail object
     */
    public Observable<SchemaDetail> getAsync(String schemaId) {
        return getWithServiceResponseAsync(schemaId).map(new Func1<ServiceResponse<SchemaDetail>, SchemaDetail>() {
            // @Override
            public SchemaDetail call(ServiceResponse<SchemaDetail> response) {
                return response.body();
            }
        });
    }

    /**
     * Get - single.
     * Gets the schema detail information by the schema id.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaDetail object
     */
    public Observable<ServiceResponse<SchemaDetail>> getWithServiceResponseAsync(String schemaId) {
        if (schemaId == null) {
            throw new IllegalArgumentException("Parameter schemaId is required and cannot be null.");
        }
        return service.get(schemaId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SchemaDetail>>>() {
                // @Override
                public Observable<ServiceResponse<SchemaDetail>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SchemaDetail> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SchemaDetail> getDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SchemaDetail, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SchemaDetail>() { }.getType())
                .build(response);
    }

    /**
     * Update - single.
     * Updates an existing schema.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schemaId The schema id.
     * @param schema The schema update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    public BusinessProcess update(String schemaId, SchemaUpdateRequest schema) {
        return updateWithServiceResponseAsync(schemaId, schema).toBlocking().single().body();
    }

    /**
     * Update - single.
     * Updates an existing schema.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schemaId The schema id.
     * @param schema The schema update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BusinessProcess> updateAsync(String schemaId, SchemaUpdateRequest schema, final ServiceCallback<BusinessProcess> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(schemaId, schema), serviceCallback);
    }

    /**
     * Update - single.
     * Updates an existing schema.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schemaId The schema id.
     * @param schema The schema update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<BusinessProcess> updateAsync(String schemaId, SchemaUpdateRequest schema) {
        return updateWithServiceResponseAsync(schemaId, schema).map(new Func1<ServiceResponse<BusinessProcess>, BusinessProcess>() {
            // @Override
            public BusinessProcess call(ServiceResponse<BusinessProcess> response) {
                return response.body();
            }
        });
    }

    /**
     * Update - single.
     * Updates an existing schema.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schemaId The schema id.
     * @param schema The schema update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<ServiceResponse<BusinessProcess>> updateWithServiceResponseAsync(String schemaId, SchemaUpdateRequest schema) {
        if (schemaId == null) {
            throw new IllegalArgumentException("Parameter schemaId is required and cannot be null.");
        }
        if (schema == null) {
            throw new IllegalArgumentException("Parameter schema is required and cannot be null.");
        }
        Validator.validate(schema);
        return service.update(schemaId, schema)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BusinessProcess>>>() {
                // @Override
                public Observable<ServiceResponse<BusinessProcess>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BusinessProcess> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BusinessProcess> updateDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BusinessProcess, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BusinessProcess>() { }.getType())
                .build(response);
    }

    /**
     * Delete - single.
     * Delete a single schemas.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    public BusinessProcess delete(String schemaId) {
        return deleteWithServiceResponseAsync(schemaId).toBlocking().single().body();
    }

    /**
     * Delete - single.
     * Delete a single schemas.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schemaId The schema id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BusinessProcess> deleteAsync(String schemaId, final ServiceCallback<BusinessProcess> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(schemaId), serviceCallback);
    }

    /**
     * Delete - single.
     * Delete a single schemas.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<BusinessProcess> deleteAsync(String schemaId) {
        return deleteWithServiceResponseAsync(schemaId).map(new Func1<ServiceResponse<BusinessProcess>, BusinessProcess>() {
            // @Override
            public BusinessProcess call(ServiceResponse<BusinessProcess> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete - single.
     * Delete a single schemas.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<ServiceResponse<BusinessProcess>> deleteWithServiceResponseAsync(String schemaId) {
        if (schemaId == null) {
            throw new IllegalArgumentException("Parameter schemaId is required and cannot be null.");
        }
        return service.delete(schemaId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BusinessProcess>>>() {
                // @Override
                public Observable<ServiceResponse<BusinessProcess>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BusinessProcess> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BusinessProcess> deleteDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BusinessProcess, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BusinessProcess>() { }.getType())
                .build(response);
    }

    /**
     * Get - many.
     * Gets the schema detail informations by given schema ids.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;SchemaDetail&gt; object if successful.
     */
    public List<SchemaDetail> getMany() {
        return getManyWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Get - many.
     * Gets the schema detail informations by given schema ids.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SchemaDetail>> getManyAsync(final ServiceCallback<List<SchemaDetail>> serviceCallback) {
        return ServiceFuture.fromResponse(getManyWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get - many.
     * Gets the schema detail informations by given schema ids.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SchemaDetail&gt; object
     */
    public Observable<List<SchemaDetail>> getManyAsync() {
        return getManyWithServiceResponseAsync().map(new Func1<ServiceResponse<List<SchemaDetail>>, List<SchemaDetail>>() {
            // @Override
            public List<SchemaDetail> call(ServiceResponse<List<SchemaDetail>> response) {
                return response.body();
            }
        });
    }

    /**
     * Get - many.
     * Gets the schema detail informations by given schema ids.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SchemaDetail&gt; object
     */
    public Observable<ServiceResponse<List<SchemaDetail>>> getManyWithServiceResponseAsync() {
        final String ids = null;
        return service.getMany(ids)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<SchemaDetail>>>>() {
                // @Override
                public Observable<ServiceResponse<List<SchemaDetail>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<SchemaDetail>> clientResponse = getManyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get - many.
     * Gets the schema detail informations by given schema ids.
     *
     * @param ids Comma separated list of schema ids
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;SchemaDetail&gt; object if successful.
     */
    public List<SchemaDetail> getMany(String ids) {
        return getManyWithServiceResponseAsync(ids).toBlocking().single().body();
    }

    /**
     * Get - many.
     * Gets the schema detail informations by given schema ids.
     *
     * @param ids Comma separated list of schema ids
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SchemaDetail>> getManyAsync(String ids, final ServiceCallback<List<SchemaDetail>> serviceCallback) {
        return ServiceFuture.fromResponse(getManyWithServiceResponseAsync(ids), serviceCallback);
    }

    /**
     * Get - many.
     * Gets the schema detail informations by given schema ids.
     *
     * @param ids Comma separated list of schema ids
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SchemaDetail&gt; object
     */
    public Observable<List<SchemaDetail>> getManyAsync(String ids) {
        return getManyWithServiceResponseAsync(ids).map(new Func1<ServiceResponse<List<SchemaDetail>>, List<SchemaDetail>>() {
            // @Override
            public List<SchemaDetail> call(ServiceResponse<List<SchemaDetail>> response) {
                return response.body();
            }
        });
    }

    /**
     * Get - many.
     * Gets the schema detail informations by given schema ids.
     *
     * @param ids Comma separated list of schema ids
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SchemaDetail&gt; object
     */
    public Observable<ServiceResponse<List<SchemaDetail>>> getManyWithServiceResponseAsync(String ids) {
        return service.getMany(ids)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<SchemaDetail>>>>() {
                // @Override
                public Observable<ServiceResponse<List<SchemaDetail>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<SchemaDetail>> clientResponse = getManyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<SchemaDetail>> getManyDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<List<SchemaDetail>, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<SchemaDetail>>() { }.getType())
                .build(response);
    }

    /**
     * Create - single.
     * Create a new schema.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schema The schema create request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BusinessProcess object if successful.
     */
    public BusinessProcess create(SchemaCreateRequest schema) {
        return createWithServiceResponseAsync(schema).toBlocking().single().body();
    }

    /**
     * Create - single.
     * Create a new schema.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schema The schema create request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BusinessProcess> createAsync(SchemaCreateRequest schema, final ServiceCallback<BusinessProcess> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(schema), serviceCallback);
    }

    /**
     * Create - single.
     * Create a new schema.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schema The schema create request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<BusinessProcess> createAsync(SchemaCreateRequest schema) {
        return createWithServiceResponseAsync(schema).map(new Func1<ServiceResponse<BusinessProcess>, BusinessProcess>() {
            // @Override
            public BusinessProcess call(ServiceResponse<BusinessProcess> response) {
                return response.body();
            }
        });
    }

    /**
     * Create - single.
     * Create a new schema.
     The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
     *
     * @param schema The schema create request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BusinessProcess object
     */
    public Observable<ServiceResponse<BusinessProcess>> createWithServiceResponseAsync(SchemaCreateRequest schema) {
        if (schema == null) {
            throw new IllegalArgumentException("Parameter schema is required and cannot be null.");
        }
        Validator.validate(schema);
        return service.create(schema)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BusinessProcess>>>() {
                // @Override
                public Observable<ServiceResponse<BusinessProcess>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BusinessProcess> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BusinessProcess> createDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BusinessProcess, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BusinessProcess>() { }.getType())
                .build(response);
    }

    /**
     * Search.
     * Searches schemas as specified in the search request.
     *
     * @param schemaSearchRequest The schema search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SchemaSearchResult object if successful.
     */
    public SchemaSearchResult search(SchemaSearchRequest schemaSearchRequest) {
        return searchWithServiceResponseAsync(schemaSearchRequest).toBlocking().single().body();
    }

    /**
     * Search.
     * Searches schemas as specified in the search request.
     *
     * @param schemaSearchRequest The schema search request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SchemaSearchResult> searchAsync(SchemaSearchRequest schemaSearchRequest, final ServiceCallback<SchemaSearchResult> serviceCallback) {
        return ServiceFuture.fromResponse(searchWithServiceResponseAsync(schemaSearchRequest), serviceCallback);
    }

    /**
     * Search.
     * Searches schemas as specified in the search request.
     *
     * @param schemaSearchRequest The schema search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaSearchResult object
     */
    public Observable<SchemaSearchResult> searchAsync(SchemaSearchRequest schemaSearchRequest) {
        return searchWithServiceResponseAsync(schemaSearchRequest).map(new Func1<ServiceResponse<SchemaSearchResult>, SchemaSearchResult>() {
            // @Override
            public SchemaSearchResult call(ServiceResponse<SchemaSearchResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Search.
     * Searches schemas as specified in the search request.
     *
     * @param schemaSearchRequest The schema search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaSearchResult object
     */
    public Observable<ServiceResponse<SchemaSearchResult>> searchWithServiceResponseAsync(SchemaSearchRequest schemaSearchRequest) {
        if (schemaSearchRequest == null) {
            throw new IllegalArgumentException("Parameter schemaSearchRequest is required and cannot be null.");
        }
        Validator.validate(schemaSearchRequest);
        return service.search(schemaSearchRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SchemaSearchResult>>>() {
                // @Override
                public Observable<ServiceResponse<SchemaSearchResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SchemaSearchResult> clientResponse = searchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SchemaSearchResult> searchDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SchemaSearchResult, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SchemaSearchResult>() { }.getType())
                .build(response);
    }

    /**
     * Exists.
     * Checks if the schema and optionally the schema's field already exists within this schema.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ExistsResponse object if successful.
     */
    public ExistsResponse exists(String schemaId) {
        return existsWithServiceResponseAsync(schemaId).toBlocking().single().body();
    }

    /**
     * Exists.
     * Checks if the schema and optionally the schema's field already exists within this schema.
     *
     * @param schemaId The schema id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ExistsResponse> existsAsync(String schemaId, final ServiceCallback<ExistsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(existsWithServiceResponseAsync(schemaId), serviceCallback);
    }

    /**
     * Exists.
     * Checks if the schema and optionally the schema's field already exists within this schema.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExistsResponse object
     */
    public Observable<ExistsResponse> existsAsync(String schemaId) {
        return existsWithServiceResponseAsync(schemaId).map(new Func1<ServiceResponse<ExistsResponse>, ExistsResponse>() {
            // @Override
            public ExistsResponse call(ServiceResponse<ExistsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Exists.
     * Checks if the schema and optionally the schema's field already exists within this schema.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExistsResponse object
     */
    public Observable<ServiceResponse<ExistsResponse>> existsWithServiceResponseAsync(String schemaId) {
        if (schemaId == null) {
            throw new IllegalArgumentException("Parameter schemaId is required and cannot be null.");
        }
        final String fieldId = null;
        return service.exists(schemaId, fieldId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ExistsResponse>>>() {
                // @Override
                public Observable<ServiceResponse<ExistsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ExistsResponse> clientResponse = existsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Exists.
     * Checks if the schema and optionally the schema's field already exists within this schema.
     *
     * @param schemaId The schema id.
     * @param fieldId The optional field id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ExistsResponse object if successful.
     */
    public ExistsResponse exists(String schemaId, String fieldId) {
        return existsWithServiceResponseAsync(schemaId, fieldId).toBlocking().single().body();
    }

    /**
     * Exists.
     * Checks if the schema and optionally the schema's field already exists within this schema.
     *
     * @param schemaId The schema id.
     * @param fieldId The optional field id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ExistsResponse> existsAsync(String schemaId, String fieldId, final ServiceCallback<ExistsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(existsWithServiceResponseAsync(schemaId, fieldId), serviceCallback);
    }

    /**
     * Exists.
     * Checks if the schema and optionally the schema's field already exists within this schema.
     *
     * @param schemaId The schema id.
     * @param fieldId The optional field id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExistsResponse object
     */
    public Observable<ExistsResponse> existsAsync(String schemaId, String fieldId) {
        return existsWithServiceResponseAsync(schemaId, fieldId).map(new Func1<ServiceResponse<ExistsResponse>, ExistsResponse>() {
            // @Override
            public ExistsResponse call(ServiceResponse<ExistsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Exists.
     * Checks if the schema and optionally the schema's field already exists within this schema.
     *
     * @param schemaId The schema id.
     * @param fieldId The optional field id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExistsResponse object
     */
    public Observable<ServiceResponse<ExistsResponse>> existsWithServiceResponseAsync(String schemaId, String fieldId) {
        if (schemaId == null) {
            throw new IllegalArgumentException("Parameter schemaId is required and cannot be null.");
        }
        return service.exists(schemaId, fieldId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ExistsResponse>>>() {
                // @Override
                public Observable<ServiceResponse<ExistsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ExistsResponse> clientResponse = existsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ExistsResponse> existsDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ExistsResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ExistsResponse>() { }.getType())
                .build(response);
    }

}
