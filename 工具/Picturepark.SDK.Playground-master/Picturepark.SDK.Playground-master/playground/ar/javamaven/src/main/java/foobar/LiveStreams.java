/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package foobar;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import foobar.models.LiveStreamSearchRequest;
import java.io.IOException;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in LiveStreams.
 */
public interface LiveStreams {
    /**
     * Search LiveStream.
     *
     * @param liveStreamSearchRequest The livestream search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object search(LiveStreamSearchRequest liveStreamSearchRequest);

    /**
     * Search LiveStream.
     *
     * @param liveStreamSearchRequest The livestream search request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> searchAsync(LiveStreamSearchRequest liveStreamSearchRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Search LiveStream.
     *
     * @param liveStreamSearchRequest The livestream search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> searchAsync(LiveStreamSearchRequest liveStreamSearchRequest);

    /**
     * Search LiveStream.
     *
     * @param liveStreamSearchRequest The livestream search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> searchWithServiceResponseAsync(LiveStreamSearchRequest liveStreamSearchRequest);

}
