/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package foobar;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import foobar.models.BusinessProcessSearchRequest;
import foobar.models.PictureparkException;
import foobar.models.SendMessageRequest;
import foobar.models.StartProcessRequest;
import java.io.IOException;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in BusinessProcess.
 */
public interface BusinessProcess {
    /**
     * Search.
     * Search for business processes.
     *
     * @param businessProcessSearchRequest The business process request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object search(BusinessProcessSearchRequest businessProcessSearchRequest);

    /**
     * Search.
     * Search for business processes.
     *
     * @param businessProcessSearchRequest The business process request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> searchAsync(BusinessProcessSearchRequest businessProcessSearchRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Search.
     * Search for business processes.
     *
     * @param businessProcessSearchRequest The business process request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> searchAsync(BusinessProcessSearchRequest businessProcessSearchRequest);

    /**
     * Search.
     * Search for business processes.
     *
     * @param businessProcessSearchRequest The business process request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> searchWithServiceResponseAsync(BusinessProcessSearchRequest businessProcessSearchRequest);

    /**
     * Start.
     * Starts a process with given definition.
     *
     * @param processDefinitionId The process definition id
     * @param request The start process request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object start(String processDefinitionId, StartProcessRequest request);

    /**
     * Start.
     * Starts a process with given definition.
     *
     * @param processDefinitionId The process definition id
     * @param request The start process request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> startAsync(String processDefinitionId, StartProcessRequest request, final ServiceCallback<Object> serviceCallback);

    /**
     * Start.
     * Starts a process with given definition.
     *
     * @param processDefinitionId The process definition id
     * @param request The start process request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> startAsync(String processDefinitionId, StartProcessRequest request);

    /**
     * Start.
     * Starts a process with given definition.
     *
     * @param processDefinitionId The process definition id
     * @param request The start process request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> startWithServiceResponseAsync(String processDefinitionId, StartProcessRequest request);

    /**
     * Mark as ended.
     * Mark a given process as ended.
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PictureparkException object if successful.
     */
    PictureparkException markAsEnded(String processId);

    /**
     * Mark as ended.
     * Mark a given process as ended.
     *
     * @param processId The process id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PictureparkException> markAsEndedAsync(String processId, final ServiceCallback<PictureparkException> serviceCallback);

    /**
     * Mark as ended.
     * Mark a given process as ended.
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    Observable<PictureparkException> markAsEndedAsync(String processId);

    /**
     * Mark as ended.
     * Mark a given process as ended.
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    Observable<ServiceResponse<PictureparkException>> markAsEndedWithServiceResponseAsync(String processId);

    /**
     * Send message.
     * Send message to given process.
     *
     * @param processId The process id
     * @param request The send message request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PictureparkException object if successful.
     */
    PictureparkException sendMessage(String processId, SendMessageRequest request);

    /**
     * Send message.
     * Send message to given process.
     *
     * @param processId The process id
     * @param request The send message request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PictureparkException> sendMessageAsync(String processId, SendMessageRequest request, final ServiceCallback<PictureparkException> serviceCallback);

    /**
     * Send message.
     * Send message to given process.
     *
     * @param processId The process id
     * @param request The send message request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    Observable<PictureparkException> sendMessageAsync(String processId, SendMessageRequest request);

    /**
     * Send message.
     * Send message to given process.
     *
     * @param processId The process id
     * @param request The send message request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    Observable<ServiceResponse<PictureparkException>> sendMessageWithServiceResponseAsync(String processId, SendMessageRequest request);

    /**
     * Wait for states.
     * Wait for given process states.
     *
     * @param processId The process id
     * @param states The states to wait for
     * @param timeout The timeout in ms
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object waitForStates(String processId, String states, int timeout);

    /**
     * Wait for states.
     * Wait for given process states.
     *
     * @param processId The process id
     * @param states The states to wait for
     * @param timeout The timeout in ms
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> waitForStatesAsync(String processId, String states, int timeout, final ServiceCallback<Object> serviceCallback);

    /**
     * Wait for states.
     * Wait for given process states.
     *
     * @param processId The process id
     * @param states The states to wait for
     * @param timeout The timeout in ms
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> waitForStatesAsync(String processId, String states, int timeout);

    /**
     * Wait for states.
     * Wait for given process states.
     *
     * @param processId The process id
     * @param states The states to wait for
     * @param timeout The timeout in ms
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> waitForStatesWithServiceResponseAsync(String processId, String states, int timeout);

}
