/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package foobar;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import foobar.models.ShareAggregationRequest;
import foobar.models.ShareBaseCreateRequest;
import foobar.models.ShareBaseUpdateRequest;
import foobar.models.ShareSearchRequest;
import java.io.IOException;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Shares.
 */
public interface Shares {
    /**
     * Update single.
     * The update of share is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param id The share id.
     * @param updateRequest The share update request.
     * @param resolve Resolves the data of referenced list items into the shares content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object update(String id, ShareBaseUpdateRequest updateRequest, boolean resolve);

    /**
     * Update single.
     * The update of share is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param id The share id.
     * @param updateRequest The share update request.
     * @param resolve Resolves the data of referenced list items into the shares content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateAsync(String id, ShareBaseUpdateRequest updateRequest, boolean resolve, final ServiceCallback<Object> serviceCallback);

    /**
     * Update single.
     * The update of share is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param id The share id.
     * @param updateRequest The share update request.
     * @param resolve Resolves the data of referenced list items into the shares content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateAsync(String id, ShareBaseUpdateRequest updateRequest, boolean resolve);

    /**
     * Update single.
     * The update of share is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param id The share id.
     * @param updateRequest The share update request.
     * @param resolve Resolves the data of referenced list items into the shares content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateWithServiceResponseAsync(String id, ShareBaseUpdateRequest updateRequest, boolean resolve);
    /**
     * Update single.
     * The update of share is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param id The share id.
     * @param updateRequest The share update request.
     * @param resolve Resolves the data of referenced list items into the shares content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object update(String id, ShareBaseUpdateRequest updateRequest, boolean resolve, Integer timeout);

    /**
     * Update single.
     * The update of share is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param id The share id.
     * @param updateRequest The share update request.
     * @param resolve Resolves the data of referenced list items into the shares content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateAsync(String id, ShareBaseUpdateRequest updateRequest, boolean resolve, Integer timeout, final ServiceCallback<Object> serviceCallback);

    /**
     * Update single.
     * The update of share is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param id The share id.
     * @param updateRequest The share update request.
     * @param resolve Resolves the data of referenced list items into the shares content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateAsync(String id, ShareBaseUpdateRequest updateRequest, boolean resolve, Integer timeout);

    /**
     * Update single.
     * The update of share is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param id The share id.
     * @param updateRequest The share update request.
     * @param resolve Resolves the data of referenced list items into the shares content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateWithServiceResponseAsync(String id, ShareBaseUpdateRequest updateRequest, boolean resolve, Integer timeout);

    /**
     * Get single.
     * Get share by id (basic or embed).
     *
     * @param id Share Id (not token, use PublicAccess to get share by token)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object get(String id);

    /**
     * Get single.
     * Get share by id (basic or embed).
     *
     * @param id Share Id (not token, use PublicAccess to get share by token)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAsync(String id, final ServiceCallback<Object> serviceCallback);

    /**
     * Get single.
     * Get share by id (basic or embed).
     *
     * @param id Share Id (not token, use PublicAccess to get share by token)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAsync(String id);

    /**
     * Get single.
     * Get share by id (basic or embed).
     *
     * @param id Share Id (not token, use PublicAccess to get share by token)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getWithServiceResponseAsync(String id);

    /**
     * Aggregate.
     * Aggregates own shares.
     *
     * @param request Aggregation request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object aggregate(ShareAggregationRequest request);

    /**
     * Aggregate.
     * Aggregates own shares.
     *
     * @param request Aggregation request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> aggregateAsync(ShareAggregationRequest request, final ServiceCallback<Object> serviceCallback);

    /**
     * Aggregate.
     * Aggregates own shares.
     *
     * @param request Aggregation request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> aggregateAsync(ShareAggregationRequest request);

    /**
     * Aggregate.
     * Aggregates own shares.
     *
     * @param request Aggregation request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> aggregateWithServiceResponseAsync(ShareAggregationRequest request);

    /**
     * Create single.
     * Create a new share (basic or embed).
     *
     * @param request Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object create(ShareBaseCreateRequest request);

    /**
     * Create single.
     * Create a new share (basic or embed).
     *
     * @param request Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createAsync(ShareBaseCreateRequest request, final ServiceCallback<Object> serviceCallback);

    /**
     * Create single.
     * Create a new share (basic or embed).
     *
     * @param request Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createAsync(ShareBaseCreateRequest request);

    /**
     * Create single.
     * Create a new share (basic or embed).
     *
     * @param request Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createWithServiceResponseAsync(ShareBaseCreateRequest request);

    /**
     * Search.
     * Search own shares.
     *
     * @param request Search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object search(ShareSearchRequest request);

    /**
     * Search.
     * Search own shares.
     *
     * @param request Search request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> searchAsync(ShareSearchRequest request, final ServiceCallback<Object> serviceCallback);

    /**
     * Search.
     * Search own shares.
     *
     * @param request Search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> searchAsync(ShareSearchRequest request);

    /**
     * Search.
     * Search own shares.
     *
     * @param request Search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> searchWithServiceResponseAsync(ShareSearchRequest request);

}
