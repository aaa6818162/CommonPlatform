/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package foobar;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import foobar.models.ContentAggregationRequest;
import foobar.models.ContentBatchDownloadRequest;
import foobar.models.ContentDeactivationRequest;
import foobar.models.ContentFileUpdateRequest;
import foobar.models.ContentOwnershipTransferRequest;
import foobar.models.ContentReactivationRequest;
import foobar.models.ContentSearchRequest;
import foobar.models.ContentsMetadataUpdateRequest;
import foobar.models.ContentsOwnershipTransferRequest;
import foobar.models.CreateContentRequest;
import foobar.models.FilterContentsMetadataUpdateRequest;
import foobar.models.PictureparkException;
import foobar.models.UpdateContentMetadataRequest;
import foobar.models.UpdateContentPermissionsRequest;
import java.io.IOException;
import java.util.List;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Contents.
 */
public interface Contents {
    /**
     * Update Single - OwnershipTransfer.
     * The update of content transfer is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateTransferOwnership(String contentId, ContentOwnershipTransferRequest updateRequest);

    /**
     * Update Single - OwnershipTransfer.
     * The update of content transfer is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateTransferOwnershipAsync(String contentId, ContentOwnershipTransferRequest updateRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Update Single - OwnershipTransfer.
     * The update of content transfer is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateTransferOwnershipAsync(String contentId, ContentOwnershipTransferRequest updateRequest);

    /**
     * Update Single - OwnershipTransfer.
     * The update of content transfer is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateTransferOwnershipWithServiceResponseAsync(String contentId, ContentOwnershipTransferRequest updateRequest);
    /**
     * Update Single - OwnershipTransfer.
     * The update of content transfer is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateTransferOwnership(String contentId, ContentOwnershipTransferRequest updateRequest, Integer timeout);

    /**
     * Update Single - OwnershipTransfer.
     * The update of content transfer is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateTransferOwnershipAsync(String contentId, ContentOwnershipTransferRequest updateRequest, Integer timeout, final ServiceCallback<Object> serviceCallback);

    /**
     * Update Single - OwnershipTransfer.
     * The update of content transfer is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateTransferOwnershipAsync(String contentId, ContentOwnershipTransferRequest updateRequest, Integer timeout);

    /**
     * Update Single - OwnershipTransfer.
     * The update of content transfer is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The content ownership transfer request update request.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateTransferOwnershipWithServiceResponseAsync(String contentId, ContentOwnershipTransferRequest updateRequest, Integer timeout);

    /**
     * Get Many.
     * Gets multiple content documents by ids.
     *
     * @param ids Comma-separated list of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getMany(List<String> ids, boolean resolve);

    /**
     * Get Many.
     * Gets multiple content documents by ids.
     *
     * @param ids Comma-separated list of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getManyAsync(List<String> ids, boolean resolve, final ServiceCallback<Object> serviceCallback);

    /**
     * Get Many.
     * Gets multiple content documents by ids.
     *
     * @param ids Comma-separated list of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getManyAsync(List<String> ids, boolean resolve);

    /**
     * Get Many.
     * Gets multiple content documents by ids.
     *
     * @param ids Comma-separated list of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getManyWithServiceResponseAsync(List<String> ids, boolean resolve);
    /**
     * Get Many.
     * Gets multiple content documents by ids.
     *
     * @param ids Comma-separated list of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getMany(List<String> ids, boolean resolve, List<String> patterns);

    /**
     * Get Many.
     * Gets multiple content documents by ids.
     *
     * @param ids Comma-separated list of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getManyAsync(List<String> ids, boolean resolve, List<String> patterns, final ServiceCallback<Object> serviceCallback);

    /**
     * Get Many.
     * Gets multiple content documents by ids.
     *
     * @param ids Comma-separated list of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getManyAsync(List<String> ids, boolean resolve, List<String> patterns);

    /**
     * Get Many.
     * Gets multiple content documents by ids.
     *
     * @param ids Comma-separated list of contentIds
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getManyWithServiceResponseAsync(List<String> ids, boolean resolve, List<String> patterns);

    /**
     * Process many ownership trasnfer request.
     *
     * @param contentsOwnershipTransferRequest The content ownership transfer request request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object transferOwnershipMany(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest);

    /**
     * Process many ownership trasnfer request.
     *
     * @param contentsOwnershipTransferRequest The content ownership transfer request request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> transferOwnershipManyAsync(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Process many ownership trasnfer request.
     *
     * @param contentsOwnershipTransferRequest The content ownership transfer request request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> transferOwnershipManyAsync(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest);

    /**
     * Process many ownership trasnfer request.
     *
     * @param contentsOwnershipTransferRequest The content ownership transfer request request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> transferOwnershipManyWithServiceResponseAsync(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest);

    /**
     * Aggregate.
     * Aggregates content as specified in the aggregation request.
     *
     * @param contentAggregationRequest The aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object aggregate(ContentAggregationRequest contentAggregationRequest);

    /**
     * Aggregate.
     * Aggregates content as specified in the aggregation request.
     *
     * @param contentAggregationRequest The aggregation request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> aggregateAsync(ContentAggregationRequest contentAggregationRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Aggregate.
     * Aggregates content as specified in the aggregation request.
     *
     * @param contentAggregationRequest The aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> aggregateAsync(ContentAggregationRequest contentAggregationRequest);

    /**
     * Aggregate.
     * Aggregates content as specified in the aggregation request.
     *
     * @param contentAggregationRequest The aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> aggregateWithServiceResponseAsync(ContentAggregationRequest contentAggregationRequest);

    /**
     * Aggregate by Channel.
     * Aggregates content as specified in the aggregation request and limits the aggregation results to the specified channel.
     *
     * @param channelId The channel id
     * @param contentAggregationRequest The content aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object aggregateByChannel(String channelId, ContentAggregationRequest contentAggregationRequest);

    /**
     * Aggregate by Channel.
     * Aggregates content as specified in the aggregation request and limits the aggregation results to the specified channel.
     *
     * @param channelId The channel id
     * @param contentAggregationRequest The content aggregation request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> aggregateByChannelAsync(String channelId, ContentAggregationRequest contentAggregationRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Aggregate by Channel.
     * Aggregates content as specified in the aggregation request and limits the aggregation results to the specified channel.
     *
     * @param channelId The channel id
     * @param contentAggregationRequest The content aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> aggregateByChannelAsync(String channelId, ContentAggregationRequest contentAggregationRequest);

    /**
     * Aggregate by Channel.
     * Aggregates content as specified in the aggregation request and limits the aggregation results to the specified channel.
     *
     * @param channelId The channel id
     * @param contentAggregationRequest The content aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> aggregateByChannelWithServiceResponseAsync(String channelId, ContentAggregationRequest contentAggregationRequest);

    /**
     * Creates a content batch download.
     *
     * @param request The content batch download request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createDownloadLink(ContentBatchDownloadRequest request);

    /**
     * Creates a content batch download.
     *
     * @param request The content batch download request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createDownloadLinkAsync(ContentBatchDownloadRequest request, final ServiceCallback<Object> serviceCallback);

    /**
     * Creates a content batch download.
     *
     * @param request The content batch download request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createDownloadLinkAsync(ContentBatchDownloadRequest request);

    /**
     * Creates a content batch download.
     *
     * @param request The content batch download request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createDownloadLinkWithServiceResponseAsync(ContentBatchDownloadRequest request);

    /**
     * Create Single.
     * The creation of content is executed asynchronous. However, for the specified timeout completion of the creation process is awaited.
     If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     *
     * @param createRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createContent(CreateContentRequest createRequest, boolean resolve);

    /**
     * Create Single.
     * The creation of content is executed asynchronous. However, for the specified timeout completion of the creation process is awaited.
     If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     *
     * @param createRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createContentAsync(CreateContentRequest createRequest, boolean resolve, final ServiceCallback<Object> serviceCallback);

    /**
     * Create Single.
     * The creation of content is executed asynchronous. However, for the specified timeout completion of the creation process is awaited.
     If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     *
     * @param createRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createContentAsync(CreateContentRequest createRequest, boolean resolve);

    /**
     * Create Single.
     * The creation of content is executed asynchronous. However, for the specified timeout completion of the creation process is awaited.
     If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     *
     * @param createRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createContentWithServiceResponseAsync(CreateContentRequest createRequest, boolean resolve);
    /**
     * Create Single.
     * The creation of content is executed asynchronous. However, for the specified timeout completion of the creation process is awaited.
     If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     *
     * @param createRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createContent(CreateContentRequest createRequest, boolean resolve, Integer timeout, List<String> patterns);

    /**
     * Create Single.
     * The creation of content is executed asynchronous. However, for the specified timeout completion of the creation process is awaited.
     If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     *
     * @param createRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createContentAsync(CreateContentRequest createRequest, boolean resolve, Integer timeout, List<String> patterns, final ServiceCallback<Object> serviceCallback);

    /**
     * Create Single.
     * The creation of content is executed asynchronous. However, for the specified timeout completion of the creation process is awaited.
     If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     *
     * @param createRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createContentAsync(CreateContentRequest createRequest, boolean resolve, Integer timeout, List<String> patterns);

    /**
     * Create Single.
     * The creation of content is executed asynchronous. However, for the specified timeout completion of the creation process is awaited.
     If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     *
     * @param createRequest The content create request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createContentWithServiceResponseAsync(CreateContentRequest createRequest, boolean resolve, Integer timeout, List<String> patterns);

    /**
     * Downloads content in a specific outputformat.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object download(String contentId, String outputFormatId);

    /**
     * Downloads content in a specific outputformat.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> downloadAsync(String contentId, String outputFormatId, final ServiceCallback<Object> serviceCallback);

    /**
     * Downloads content in a specific outputformat.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> downloadAsync(String contentId, String outputFormatId);

    /**
     * Downloads content in a specific outputformat.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> downloadWithServiceResponseAsync(String contentId, String outputFormatId);
    /**
     * Downloads content in a specific outputformat.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @param range the range
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object download(String contentId, String outputFormatId, String range);

    /**
     * Downloads content in a specific outputformat.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @param range the range
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> downloadAsync(String contentId, String outputFormatId, String range, final ServiceCallback<Object> serviceCallback);

    /**
     * Downloads content in a specific outputformat.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @param range the range
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> downloadAsync(String contentId, String outputFormatId, String range);

    /**
     * Downloads content in a specific outputformat.
     *
     * @param contentId The content id
     * @param outputFormatId The output format id
     * @param range the range
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> downloadWithServiceResponseAsync(String contentId, String outputFormatId, String range);

    /**
     * Get Thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object downloadThumbnail(String contentId, String size);

    /**
     * Get Thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> downloadThumbnailAsync(String contentId, String size, final ServiceCallback<Object> serviceCallback);

    /**
     * Get Thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> downloadThumbnailAsync(String contentId, String size);

    /**
     * Get Thumbnail.
     * Provides a lightweight endpoint to get content thumbnails.
     *
     * @param contentId The Content id
     * @param size Thumbnail size. Either small, medium or large
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> downloadThumbnailWithServiceResponseAsync(String contentId, String size);

    /**
     * Download resized content.
     * Provides a endpoint to get reseized content.
     *
     * @param contentId The Content id
     * @param outputFormatId The output format id
     * @param width The content width
     * @param height The content height
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object downloadResized(String contentId, String outputFormatId, int width, int height);

    /**
     * Download resized content.
     * Provides a endpoint to get reseized content.
     *
     * @param contentId The Content id
     * @param outputFormatId The output format id
     * @param width The content width
     * @param height The content height
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> downloadResizedAsync(String contentId, String outputFormatId, int width, int height, final ServiceCallback<Object> serviceCallback);

    /**
     * Download resized content.
     * Provides a endpoint to get reseized content.
     *
     * @param contentId The Content id
     * @param outputFormatId The output format id
     * @param width The content width
     * @param height The content height
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> downloadResizedAsync(String contentId, String outputFormatId, int width, int height);

    /**
     * Download resized content.
     * Provides a endpoint to get reseized content.
     *
     * @param contentId The Content id
     * @param outputFormatId The output format id
     * @param width The content width
     * @param height The content height
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> downloadResizedWithServiceResponseAsync(String contentId, String outputFormatId, int width, int height);

    /**
     * Get Single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object get(String contentId, boolean resolve);

    /**
     * Get Single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAsync(String contentId, boolean resolve, final ServiceCallback<Object> serviceCallback);

    /**
     * Get Single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAsync(String contentId, boolean resolve);

    /**
     * Get Single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getWithServiceResponseAsync(String contentId, boolean resolve);
    /**
     * Get Single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object get(String contentId, boolean resolve, List<String> patterns);

    /**
     * Get Single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAsync(String contentId, boolean resolve, List<String> patterns, final ServiceCallback<Object> serviceCallback);

    /**
     * Get Single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAsync(String contentId, boolean resolve, List<String> patterns);

    /**
     * Get Single.
     * Gets a content document by id.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getWithServiceResponseAsync(String contentId, boolean resolve, List<String> patterns);

    /**
     * Update Single - Metadata.
     * The update of content metadata is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateMetadata(String contentId, UpdateContentMetadataRequest updateRequest, boolean resolve);

    /**
     * Update Single - Metadata.
     * The update of content metadata is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateMetadataAsync(String contentId, UpdateContentMetadataRequest updateRequest, boolean resolve, final ServiceCallback<Object> serviceCallback);

    /**
     * Update Single - Metadata.
     * The update of content metadata is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateMetadataAsync(String contentId, UpdateContentMetadataRequest updateRequest, boolean resolve);

    /**
     * Update Single - Metadata.
     * The update of content metadata is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateMetadataWithServiceResponseAsync(String contentId, UpdateContentMetadataRequest updateRequest, boolean resolve);
    /**
     * Update Single - Metadata.
     * The update of content metadata is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateMetadata(String contentId, UpdateContentMetadataRequest updateRequest, boolean resolve, Integer timeout, List<String> patterns);

    /**
     * Update Single - Metadata.
     * The update of content metadata is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateMetadataAsync(String contentId, UpdateContentMetadataRequest updateRequest, boolean resolve, Integer timeout, List<String> patterns, final ServiceCallback<Object> serviceCallback);

    /**
     * Update Single - Metadata.
     * The update of content metadata is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateMetadataAsync(String contentId, UpdateContentMetadataRequest updateRequest, boolean resolve, Integer timeout, List<String> patterns);

    /**
     * Update Single - Metadata.
     * The update of content metadata is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The metadata update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateMetadataWithServiceResponseAsync(String contentId, UpdateContentMetadataRequest updateRequest, boolean resolve, Integer timeout, List<String> patterns);

    /**
     * Update Single - Permissions.
     * The update of content permissions is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updatePermissions(String contentId, UpdateContentPermissionsRequest updateRequest, boolean resolve);

    /**
     * Update Single - Permissions.
     * The update of content permissions is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updatePermissionsAsync(String contentId, UpdateContentPermissionsRequest updateRequest, boolean resolve, final ServiceCallback<Object> serviceCallback);

    /**
     * Update Single - Permissions.
     * The update of content permissions is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updatePermissionsAsync(String contentId, UpdateContentPermissionsRequest updateRequest, boolean resolve);

    /**
     * Update Single - Permissions.
     * The update of content permissions is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updatePermissionsWithServiceResponseAsync(String contentId, UpdateContentPermissionsRequest updateRequest, boolean resolve);
    /**
     * Update Single - Permissions.
     * The update of content permissions is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updatePermissions(String contentId, UpdateContentPermissionsRequest updateRequest, boolean resolve, Integer timeout, List<String> patterns);

    /**
     * Update Single - Permissions.
     * The update of content permissions is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updatePermissionsAsync(String contentId, UpdateContentPermissionsRequest updateRequest, boolean resolve, Integer timeout, List<String> patterns, final ServiceCallback<Object> serviceCallback);

    /**
     * Update Single - Permissions.
     * The update of content permissions is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updatePermissionsAsync(String contentId, UpdateContentPermissionsRequest updateRequest, boolean resolve, Integer timeout, List<String> patterns);

    /**
     * Update Single - Permissions.
     * The update of content permissions is executed asynchronous. However, for the specified timeout completion of the update process is awaited.
     If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param updateRequest The content permission update request.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updatePermissionsWithServiceResponseAsync(String contentId, UpdateContentPermissionsRequest updateRequest, boolean resolve, Integer timeout, List<String> patterns);

    /**
     * Search.
     * Searches contents as specified in the search request.
     *
     * @param contentSearchRequest The content search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object search(ContentSearchRequest contentSearchRequest);

    /**
     * Search.
     * Searches contents as specified in the search request.
     *
     * @param contentSearchRequest The content search request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> searchAsync(ContentSearchRequest contentSearchRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Search.
     * Searches contents as specified in the search request.
     *
     * @param contentSearchRequest The content search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> searchAsync(ContentSearchRequest contentSearchRequest);

    /**
     * Search.
     * Searches contents as specified in the search request.
     *
     * @param contentSearchRequest The content search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> searchWithServiceResponseAsync(ContentSearchRequest contentSearchRequest);

    /**
     * Search By Channel.
     * Searches contents as specified in the search request and limits the search results to the specified channel.
     *
     * @param channelId The channel id.
     * @param contentSearchRequest The content search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object searchByChannel(String channelId, ContentSearchRequest contentSearchRequest);

    /**
     * Search By Channel.
     * Searches contents as specified in the search request and limits the search results to the specified channel.
     *
     * @param channelId The channel id.
     * @param contentSearchRequest The content search request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> searchByChannelAsync(String channelId, ContentSearchRequest contentSearchRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Search By Channel.
     * Searches contents as specified in the search request and limits the search results to the specified channel.
     *
     * @param channelId The channel id.
     * @param contentSearchRequest The content search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> searchByChannelAsync(String channelId, ContentSearchRequest contentSearchRequest);

    /**
     * Search By Channel.
     * Searches contents as specified in the search request and limits the search results to the specified channel.
     *
     * @param channelId The channel id.
     * @param contentSearchRequest The content search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> searchByChannelWithServiceResponseAsync(String channelId, ContentSearchRequest contentSearchRequest);

    /**
     * Deactivates a content.
     *
     * @param contentId the id of the content to deactivate
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PictureparkException object if successful.
     */
    PictureparkException deactivate(String contentId, int timeout);

    /**
     * Deactivates a content.
     *
     * @param contentId the id of the content to deactivate
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PictureparkException> deactivateAsync(String contentId, int timeout, final ServiceCallback<PictureparkException> serviceCallback);

    /**
     * Deactivates a content.
     *
     * @param contentId the id of the content to deactivate
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    Observable<PictureparkException> deactivateAsync(String contentId, int timeout);

    /**
     * Deactivates a content.
     *
     * @param contentId the id of the content to deactivate
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    Observable<ServiceResponse<PictureparkException>> deactivateWithServiceResponseAsync(String contentId, int timeout);

    /**
     * Update Single - File.
     * Update binary file of existing content. The file must already be uploaded before calling this endpoint.
     *
     * @param contentId The id of the content to replace
     * @param updateRequest Update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateFile(String contentId, ContentFileUpdateRequest updateRequest);

    /**
     * Update Single - File.
     * Update binary file of existing content. The file must already be uploaded before calling this endpoint.
     *
     * @param contentId The id of the content to replace
     * @param updateRequest Update request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateFileAsync(String contentId, ContentFileUpdateRequest updateRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Update Single - File.
     * Update binary file of existing content. The file must already be uploaded before calling this endpoint.
     *
     * @param contentId The id of the content to replace
     * @param updateRequest Update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateFileAsync(String contentId, ContentFileUpdateRequest updateRequest);

    /**
     * Update Single - File.
     * Update binary file of existing content. The file must already be uploaded before calling this endpoint.
     *
     * @param contentId The id of the content to replace
     * @param updateRequest Update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateFileWithServiceResponseAsync(String contentId, ContentFileUpdateRequest updateRequest);

    /**
     * Reactivate - Content.
     * The reactivation of content is executed asynchronous. However, for the specified timeout completion of the reactivation process is awaited.
     If the reactivation process is not completed by reaching the specified timeout, the reactivation process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object reactivate(String contentId, boolean resolve);

    /**
     * Reactivate - Content.
     * The reactivation of content is executed asynchronous. However, for the specified timeout completion of the reactivation process is awaited.
     If the reactivation process is not completed by reaching the specified timeout, the reactivation process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> reactivateAsync(String contentId, boolean resolve, final ServiceCallback<Object> serviceCallback);

    /**
     * Reactivate - Content.
     * The reactivation of content is executed asynchronous. However, for the specified timeout completion of the reactivation process is awaited.
     If the reactivation process is not completed by reaching the specified timeout, the reactivation process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> reactivateAsync(String contentId, boolean resolve);

    /**
     * Reactivate - Content.
     * The reactivation of content is executed asynchronous. However, for the specified timeout completion of the reactivation process is awaited.
     If the reactivation process is not completed by reaching the specified timeout, the reactivation process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> reactivateWithServiceResponseAsync(String contentId, boolean resolve);
    /**
     * Reactivate - Content.
     * The reactivation of content is executed asynchronous. However, for the specified timeout completion of the reactivation process is awaited.
     If the reactivation process is not completed by reaching the specified timeout, the reactivation process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object reactivate(String contentId, boolean resolve, Integer timeout, List<String> patterns);

    /**
     * Reactivate - Content.
     * The reactivation of content is executed asynchronous. However, for the specified timeout completion of the reactivation process is awaited.
     If the reactivation process is not completed by reaching the specified timeout, the reactivation process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> reactivateAsync(String contentId, boolean resolve, Integer timeout, List<String> patterns, final ServiceCallback<Object> serviceCallback);

    /**
     * Reactivate - Content.
     * The reactivation of content is executed asynchronous. However, for the specified timeout completion of the reactivation process is awaited.
     If the reactivation process is not completed by reaching the specified timeout, the reactivation process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> reactivateAsync(String contentId, boolean resolve, Integer timeout, List<String> patterns);

    /**
     * Reactivate - Content.
     * The reactivation of content is executed asynchronous. However, for the specified timeout completion of the reactivation process is awaited.
     If the reactivation process is not completed by reaching the specified timeout, the reactivation process continues, but null is returned.
     *
     * @param contentId The content id.
     * @param resolve Resolves the data of referenced list items into the contents's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> reactivateWithServiceResponseAsync(String contentId, boolean resolve, Integer timeout, List<String> patterns);

    /**
     * Dactivate Many - Content.
     *
     * @param deactivationRequest The deactivation request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deactivateMany(ContentDeactivationRequest deactivationRequest);

    /**
     * Dactivate Many - Content.
     *
     * @param deactivationRequest The deactivation request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deactivateManyAsync(ContentDeactivationRequest deactivationRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Dactivate Many - Content.
     *
     * @param deactivationRequest The deactivation request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deactivateManyAsync(ContentDeactivationRequest deactivationRequest);

    /**
     * Dactivate Many - Content.
     *
     * @param deactivationRequest The deactivation request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deactivateManyWithServiceResponseAsync(ContentDeactivationRequest deactivationRequest);

    /**
     * Reactivate Many - Content.
     * The reactivation multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param reactivationRequest The content reactivation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object reactivateMany(ContentReactivationRequest reactivationRequest);

    /**
     * Reactivate Many - Content.
     * The reactivation multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param reactivationRequest The content reactivation request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> reactivateManyAsync(ContentReactivationRequest reactivationRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Reactivate Many - Content.
     * The reactivation multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param reactivationRequest The content reactivation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> reactivateManyAsync(ContentReactivationRequest reactivationRequest);

    /**
     * Reactivate Many - Content.
     * The reactivation multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param reactivationRequest The content reactivation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> reactivateManyWithServiceResponseAsync(ContentReactivationRequest reactivationRequest);

    /**
     * Update Many - Metadata.
     * The metadata update of multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateMetadataMany(ContentsMetadataUpdateRequest updateRequest);

    /**
     * Update Many - Metadata.
     * The metadata update of multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param updateRequest The metadata update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateMetadataManyAsync(ContentsMetadataUpdateRequest updateRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Update Many - Metadata.
     * The metadata update of multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateMetadataManyAsync(ContentsMetadataUpdateRequest updateRequest);

    /**
     * Update Many - Metadata.
     * The metadata update of multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateMetadataManyWithServiceResponseAsync(ContentsMetadataUpdateRequest updateRequest);

    /**
     * Update by filter - Metadata.
     * Update metadata of multiple contents. A filter must be provided to limit the update to specific contents.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateMetadataByFilter(FilterContentsMetadataUpdateRequest updateRequest);

    /**
     * Update by filter - Metadata.
     * Update metadata of multiple contents. A filter must be provided to limit the update to specific contents.
     *
     * @param updateRequest The metadata update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateMetadataByFilterAsync(FilterContentsMetadataUpdateRequest updateRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Update by filter - Metadata.
     * Update metadata of multiple contents. A filter must be provided to limit the update to specific contents.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateMetadataByFilterAsync(FilterContentsMetadataUpdateRequest updateRequest);

    /**
     * Update by filter - Metadata.
     * Update metadata of multiple contents. A filter must be provided to limit the update to specific contents.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateMetadataByFilterWithServiceResponseAsync(FilterContentsMetadataUpdateRequest updateRequest);

    /**
     * Update Many - Permissions.
     * The permission update of multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param updateRequest The permissions update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updatePermissionsMany(List<UpdateContentPermissionsRequest> updateRequest);

    /**
     * Update Many - Permissions.
     * The permission update of multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param updateRequest The permissions update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updatePermissionsManyAsync(List<UpdateContentPermissionsRequest> updateRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Update Many - Permissions.
     * The permission update of multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param updateRequest The permissions update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updatePermissionsManyAsync(List<UpdateContentPermissionsRequest> updateRequest);

    /**
     * Update Many - Permissions.
     * The permission update of multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param updateRequest The permissions update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updatePermissionsManyWithServiceResponseAsync(List<UpdateContentPermissionsRequest> updateRequest);

}
