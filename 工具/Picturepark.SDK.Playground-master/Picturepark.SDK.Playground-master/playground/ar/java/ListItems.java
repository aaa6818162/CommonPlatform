/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package foobar;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import foobar.models.ListItemAggregationRequest;
import foobar.models.ListItemCreateRequest;
import foobar.models.ListItemFieldsFilterUpdateRequest;
import foobar.models.ListItemFieldsUpdateRequest;
import foobar.models.ListItemSearchRequest;
import foobar.models.ListItemUpdateRequest;
import foobar.models.PictureparkException;
import java.io.IOException;
import java.util.List;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ListItems.
 */
public interface ListItems {
    /**
     * Create Single.
     * The creation of a single list item is executed asynchronous. However, for the specified timeout completion of the creation process is awaited.
     If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     *
     * @param listItem List item create request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object create(ListItemCreateRequest listItem, boolean resolve);

    /**
     * Create Single.
     * The creation of a single list item is executed asynchronous. However, for the specified timeout completion of the creation process is awaited.
     If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     *
     * @param listItem List item create request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createAsync(ListItemCreateRequest listItem, boolean resolve, final ServiceCallback<Object> serviceCallback);

    /**
     * Create Single.
     * The creation of a single list item is executed asynchronous. However, for the specified timeout completion of the creation process is awaited.
     If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     *
     * @param listItem List item create request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createAsync(ListItemCreateRequest listItem, boolean resolve);

    /**
     * Create Single.
     * The creation of a single list item is executed asynchronous. However, for the specified timeout completion of the creation process is awaited.
     If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     *
     * @param listItem List item create request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createWithServiceResponseAsync(ListItemCreateRequest listItem, boolean resolve);
    /**
     * Create Single.
     * The creation of a single list item is executed asynchronous. However, for the specified timeout completion of the creation process is awaited.
     If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     *
     * @param listItem List item create request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object create(ListItemCreateRequest listItem, boolean resolve, Integer timeout, List<String> patterns);

    /**
     * Create Single.
     * The creation of a single list item is executed asynchronous. However, for the specified timeout completion of the creation process is awaited.
     If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     *
     * @param listItem List item create request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createAsync(ListItemCreateRequest listItem, boolean resolve, Integer timeout, List<String> patterns, final ServiceCallback<Object> serviceCallback);

    /**
     * Create Single.
     * The creation of a single list item is executed asynchronous. However, for the specified timeout completion of the creation process is awaited.
     If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     *
     * @param listItem List item create request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createAsync(ListItemCreateRequest listItem, boolean resolve, Integer timeout, List<String> patterns);

    /**
     * Create Single.
     * The creation of a single list item is executed asynchronous. However, for the specified timeout completion of the creation process is awaited.
     If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     *
     * @param listItem List item create request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createWithServiceResponseAsync(ListItemCreateRequest listItem, boolean resolve, Integer timeout, List<String> patterns);

    /**
     * Create Many.
     * The creation of multiple list items is executed asynchronous. To keep track of the creation progress a business process is returned.
     *
     * @param objects A list of ListItemCreateRequests.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createMany(List<ListItemCreateRequest> objects);

    /**
     * Create Many.
     * The creation of multiple list items is executed asynchronous. To keep track of the creation progress a business process is returned.
     *
     * @param objects A list of ListItemCreateRequests.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createManyAsync(List<ListItemCreateRequest> objects, final ServiceCallback<Object> serviceCallback);

    /**
     * Create Many.
     * The creation of multiple list items is executed asynchronous. To keep track of the creation progress a business process is returned.
     *
     * @param objects A list of ListItemCreateRequests.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createManyAsync(List<ListItemCreateRequest> objects);

    /**
     * Create Many.
     * The creation of multiple list items is executed asynchronous. To keep track of the creation progress a business process is returned.
     *
     * @param objects A list of ListItemCreateRequests.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createManyWithServiceResponseAsync(List<ListItemCreateRequest> objects);

    /**
     * Delete Many.
     * The deletion of multiple list items is executed asynchronous. To keep track of the deletion progress a business process is returned.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteMany();

    /**
     * Delete Many.
     * The deletion of multiple list items is executed asynchronous. To keep track of the deletion progress a business process is returned.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteManyAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Delete Many.
     * The deletion of multiple list items is executed asynchronous. To keep track of the deletion progress a business process is returned.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteManyAsync();

    /**
     * Delete Many.
     * The deletion of multiple list items is executed asynchronous. To keep track of the deletion progress a business process is returned.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteManyWithServiceResponseAsync();
    /**
     * Delete Many.
     * The deletion of multiple list items is executed asynchronous. To keep track of the deletion progress a business process is returned.
     *
     * @param ids The list item id list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteMany(List<String> ids);

    /**
     * Delete Many.
     * The deletion of multiple list items is executed asynchronous. To keep track of the deletion progress a business process is returned.
     *
     * @param ids The list item id list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteManyAsync(List<String> ids, final ServiceCallback<Object> serviceCallback);

    /**
     * Delete Many.
     * The deletion of multiple list items is executed asynchronous. To keep track of the deletion progress a business process is returned.
     *
     * @param ids The list item id list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteManyAsync(List<String> ids);

    /**
     * Delete Many.
     * The deletion of multiple list items is executed asynchronous. To keep track of the deletion progress a business process is returned.
     *
     * @param ids The list item id list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteManyWithServiceResponseAsync(List<String> ids);

    /**
     * Update Many.
     * The update of multiple list items is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param objects A list of ListItemUpdateRequests.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateMany(List<ListItemUpdateRequest> objects);

    /**
     * Update Many.
     * The update of multiple list items is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param objects A list of ListItemUpdateRequests.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateManyAsync(List<ListItemUpdateRequest> objects, final ServiceCallback<Object> serviceCallback);

    /**
     * Update Many.
     * The update of multiple list items is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param objects A list of ListItemUpdateRequests.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateManyAsync(List<ListItemUpdateRequest> objects);

    /**
     * Update Many.
     * The update of multiple list items is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param objects A list of ListItemUpdateRequests.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateManyWithServiceResponseAsync(List<ListItemUpdateRequest> objects);

    /**
     * Aggregate.
     * Aggregates list items as specified in the aggregation request.
     *
     * @param listItemAggregationRequest The list item aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object aggregate(ListItemAggregationRequest listItemAggregationRequest);

    /**
     * Aggregate.
     * Aggregates list items as specified in the aggregation request.
     *
     * @param listItemAggregationRequest The list item aggregation request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> aggregateAsync(ListItemAggregationRequest listItemAggregationRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Aggregate.
     * Aggregates list items as specified in the aggregation request.
     *
     * @param listItemAggregationRequest The list item aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> aggregateAsync(ListItemAggregationRequest listItemAggregationRequest);

    /**
     * Aggregate.
     * Aggregates list items as specified in the aggregation request.
     *
     * @param listItemAggregationRequest The list item aggregation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> aggregateWithServiceResponseAsync(ListItemAggregationRequest listItemAggregationRequest);

    /**
     * Search.
     * Searches list items as specified in the search request.
     *
     * @param listItemSearchRequest The list item search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object search(ListItemSearchRequest listItemSearchRequest);

    /**
     * Search.
     * Searches list items as specified in the search request.
     *
     * @param listItemSearchRequest The list item search request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> searchAsync(ListItemSearchRequest listItemSearchRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Search.
     * Searches list items as specified in the search request.
     *
     * @param listItemSearchRequest The list item search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> searchAsync(ListItemSearchRequest listItemSearchRequest);

    /**
     * Search.
     * Searches list items as specified in the search request.
     *
     * @param listItemSearchRequest The list item search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> searchWithServiceResponseAsync(ListItemSearchRequest listItemSearchRequest);

    /**
     * Get Single.
     *
     * @param listItemId The list item id.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object get(String listItemId, boolean resolve);

    /**
     * Get Single.
     *
     * @param listItemId The list item id.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAsync(String listItemId, boolean resolve, final ServiceCallback<Object> serviceCallback);

    /**
     * Get Single.
     *
     * @param listItemId The list item id.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAsync(String listItemId, boolean resolve);

    /**
     * Get Single.
     *
     * @param listItemId The list item id.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getWithServiceResponseAsync(String listItemId, boolean resolve);
    /**
     * Get Single.
     *
     * @param listItemId The list item id.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object get(String listItemId, boolean resolve, List<String> patterns);

    /**
     * Get Single.
     *
     * @param listItemId The list item id.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAsync(String listItemId, boolean resolve, List<String> patterns, final ServiceCallback<Object> serviceCallback);

    /**
     * Get Single.
     *
     * @param listItemId The list item id.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAsync(String listItemId, boolean resolve, List<String> patterns);

    /**
     * Get Single.
     *
     * @param listItemId The list item id.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getWithServiceResponseAsync(String listItemId, boolean resolve, List<String> patterns);

    /**
     * Update Single.
     *
     * @param listItemId The list item id.
     * @param updateRequest The list item update request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object update(String listItemId, ListItemUpdateRequest updateRequest, boolean resolve);

    /**
     * Update Single.
     *
     * @param listItemId The list item id.
     * @param updateRequest The list item update request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateAsync(String listItemId, ListItemUpdateRequest updateRequest, boolean resolve, final ServiceCallback<Object> serviceCallback);

    /**
     * Update Single.
     *
     * @param listItemId The list item id.
     * @param updateRequest The list item update request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateAsync(String listItemId, ListItemUpdateRequest updateRequest, boolean resolve);

    /**
     * Update Single.
     *
     * @param listItemId The list item id.
     * @param updateRequest The list item update request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateWithServiceResponseAsync(String listItemId, ListItemUpdateRequest updateRequest, boolean resolve);
    /**
     * Update Single.
     *
     * @param listItemId The list item id.
     * @param updateRequest The list item update request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object update(String listItemId, ListItemUpdateRequest updateRequest, boolean resolve, Integer timeout, List<String> patterns);

    /**
     * Update Single.
     *
     * @param listItemId The list item id.
     * @param updateRequest The list item update request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateAsync(String listItemId, ListItemUpdateRequest updateRequest, boolean resolve, Integer timeout, List<String> patterns, final ServiceCallback<Object> serviceCallback);

    /**
     * Update Single.
     *
     * @param listItemId The list item id.
     * @param updateRequest The list item update request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateAsync(String listItemId, ListItemUpdateRequest updateRequest, boolean resolve, Integer timeout, List<String> patterns);

    /**
     * Update Single.
     *
     * @param listItemId The list item id.
     * @param updateRequest The list item update request.
     * @param resolve Resolves the data of referenced list items into the list item's content.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateWithServiceResponseAsync(String listItemId, ListItemUpdateRequest updateRequest, boolean resolve, Integer timeout, List<String> patterns);

    /**
     * Update by filter - Fields.
     * Update fields of multiple list items. A filter must be provided to limit the update to specific list items.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateFieldsByFilter(ListItemFieldsFilterUpdateRequest updateRequest);

    /**
     * Update by filter - Fields.
     * Update fields of multiple list items. A filter must be provided to limit the update to specific list items.
     *
     * @param updateRequest The metadata update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateFieldsByFilterAsync(ListItemFieldsFilterUpdateRequest updateRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Update by filter - Fields.
     * Update fields of multiple list items. A filter must be provided to limit the update to specific list items.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateFieldsByFilterAsync(ListItemFieldsFilterUpdateRequest updateRequest);

    /**
     * Update by filter - Fields.
     * Update fields of multiple list items. A filter must be provided to limit the update to specific list items.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateFieldsByFilterWithServiceResponseAsync(ListItemFieldsFilterUpdateRequest updateRequest);

    /**
     * Update - Fields.
     * Update fields of multiple list items. A list of listItemIds must be provided to limit the update to specific list items.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateFields(ListItemFieldsUpdateRequest updateRequest);

    /**
     * Update - Fields.
     * Update fields of multiple list items. A list of listItemIds must be provided to limit the update to specific list items.
     *
     * @param updateRequest The metadata update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateFieldsAsync(ListItemFieldsUpdateRequest updateRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Update - Fields.
     * Update fields of multiple list items. A list of listItemIds must be provided to limit the update to specific list items.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateFieldsAsync(ListItemFieldsUpdateRequest updateRequest);

    /**
     * Update - Fields.
     * Update fields of multiple list items. A list of listItemIds must be provided to limit the update to specific list items.
     *
     * @param updateRequest The metadata update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateFieldsWithServiceResponseAsync(ListItemFieldsUpdateRequest updateRequest);

    /**
     * Wait For States.
     * Waits for any specified business process states to be hit. If the timeout is reached, the wait process will be stopped and the wait result returned.
     *
     * @param processId The business process id.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object waitForStates(String processId, int timeout);

    /**
     * Wait For States.
     * Waits for any specified business process states to be hit. If the timeout is reached, the wait process will be stopped and the wait result returned.
     *
     * @param processId The business process id.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> waitForStatesAsync(String processId, int timeout, final ServiceCallback<Object> serviceCallback);

    /**
     * Wait For States.
     * Waits for any specified business process states to be hit. If the timeout is reached, the wait process will be stopped and the wait result returned.
     *
     * @param processId The business process id.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> waitForStatesAsync(String processId, int timeout);

    /**
     * Wait For States.
     * Waits for any specified business process states to be hit. If the timeout is reached, the wait process will be stopped and the wait result returned.
     *
     * @param processId The business process id.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> waitForStatesWithServiceResponseAsync(String processId, int timeout);
    /**
     * Wait For States.
     * Waits for any specified business process states to be hit. If the timeout is reached, the wait process will be stopped and the wait result returned.
     *
     * @param processId The business process id.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param states Comma-separated list of business process states to wait for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object waitForStates(String processId, int timeout, List<String> states);

    /**
     * Wait For States.
     * Waits for any specified business process states to be hit. If the timeout is reached, the wait process will be stopped and the wait result returned.
     *
     * @param processId The business process id.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param states Comma-separated list of business process states to wait for.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> waitForStatesAsync(String processId, int timeout, List<String> states, final ServiceCallback<Object> serviceCallback);

    /**
     * Wait For States.
     * Waits for any specified business process states to be hit. If the timeout is reached, the wait process will be stopped and the wait result returned.
     *
     * @param processId The business process id.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param states Comma-separated list of business process states to wait for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> waitForStatesAsync(String processId, int timeout, List<String> states);

    /**
     * Wait For States.
     * Waits for any specified business process states to be hit. If the timeout is reached, the wait process will be stopped and the wait result returned.
     *
     * @param processId The business process id.
     * @param timeout Maximum time in milliseconds to wait for the business process completed state.
     * @param states Comma-separated list of business process states to wait for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> waitForStatesWithServiceResponseAsync(String processId, int timeout, List<String> states);

    /**
     * Import.
     * Imports all schemas and optionally list items as specified in the json file. Duplicate schemas or list items in the target system will be omitted.
     *
     * @param contentId The content id.
     * @param fileTransferId The file transfer id.
     * @param includeObjects Imports list items defined in the json import file.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PictureparkException object if successful.
     */
    PictureparkException importMethod(String contentId, String fileTransferId, boolean includeObjects);

    /**
     * Import.
     * Imports all schemas and optionally list items as specified in the json file. Duplicate schemas or list items in the target system will be omitted.
     *
     * @param contentId The content id.
     * @param fileTransferId The file transfer id.
     * @param includeObjects Imports list items defined in the json import file.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PictureparkException> importMethodAsync(String contentId, String fileTransferId, boolean includeObjects, final ServiceCallback<PictureparkException> serviceCallback);

    /**
     * Import.
     * Imports all schemas and optionally list items as specified in the json file. Duplicate schemas or list items in the target system will be omitted.
     *
     * @param contentId The content id.
     * @param fileTransferId The file transfer id.
     * @param includeObjects Imports list items defined in the json import file.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    Observable<PictureparkException> importMethodAsync(String contentId, String fileTransferId, boolean includeObjects);

    /**
     * Import.
     * Imports all schemas and optionally list items as specified in the json file. Duplicate schemas or list items in the target system will be omitted.
     *
     * @param contentId The content id.
     * @param fileTransferId The file transfer id.
     * @param includeObjects Imports list items defined in the json import file.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    Observable<ServiceResponse<PictureparkException>> importMethodWithServiceResponseAsync(String contentId, String fileTransferId, boolean includeObjects);

}
