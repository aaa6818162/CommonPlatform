/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package foobar.implementation;

import retrofit2.Retrofit;
import foobar.Permissions;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import foobar.models.ContentPermissionSetDetail;
import foobar.models.PermissionSetSearchRequest;
import foobar.models.PermissionSetSearchResult;
import foobar.models.PictureparkException;
import foobar.models.SchemaPermissionSetDetail;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Permissions.
 */
public class PermissionsImpl implements Permissions {
    /** The Retrofit service to perform REST calls. */
    private PermissionsService service;
    /** The service client containing this operation class. */
    private WebAPISwaggerspecificationImpl client;

    /**
     * Initializes an instance of Permissions.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PermissionsImpl(Retrofit retrofit, WebAPISwaggerspecificationImpl client) {
        this.service = retrofit.create(PermissionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Permissions to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PermissionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: foobar.Permissions getUserPermissions" })
        @GET("V1/Permission/UserPermissions/{Permission}")
        Observable<Response<ResponseBody>> getUserPermissions(@Path("Permission") String permission);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: foobar.Permissions searchContentPermissions" })
        @POST("V1/Permission/ContentPermissionSets/Search")
        Observable<Response<ResponseBody>> searchContentPermissions(@Body PermissionSetSearchRequest request);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: foobar.Permissions getContentPermissions" })
        @GET("V1/Permission/ContentPermissionSets/{PermissionSetId}")
        Observable<Response<ResponseBody>> getContentPermissions(@Path("PermissionSetId") String permissionSetId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: foobar.Permissions searchSchemaPermissions" })
        @POST("V1/Permission/SchemaPermissionSets/Search")
        Observable<Response<ResponseBody>> searchSchemaPermissions(@Body PermissionSetSearchRequest request);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: foobar.Permissions getSchemaPermissions" })
        @GET("V1/Permission/SchemaPermissionSets/{PermissionSetId}")
        Observable<Response<ResponseBody>> getSchemaPermissions(@Path("PermissionSetId") String permissionSetId);

    }

    /**
     * Get UserRight validation result.
     * Validates if the User has a given UserRight.
     *
     * @param permission The UserRight to validate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object getUserPermissions(String permission) {
        return getUserPermissionsWithServiceResponseAsync(permission).toBlocking().single().body();
    }

    /**
     * Get UserRight validation result.
     * Validates if the User has a given UserRight.
     *
     * @param permission The UserRight to validate
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> getUserPermissionsAsync(String permission, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(getUserPermissionsWithServiceResponseAsync(permission), serviceCallback);
    }

    /**
     * Get UserRight validation result.
     * Validates if the User has a given UserRight.
     *
     * @param permission The UserRight to validate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> getUserPermissionsAsync(String permission) {
        return getUserPermissionsWithServiceResponseAsync(permission).map(new Func1<ServiceResponse<Object>, Object>() {
            
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Get UserRight validation result.
     * Validates if the User has a given UserRight.
     *
     * @param permission The UserRight to validate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> getUserPermissionsWithServiceResponseAsync(String permission) {
        if (permission == null) {
            throw new IllegalArgumentException("Parameter permission is required and cannot be null.");
        }
        return service.getUserPermissions(permission)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = getUserPermissionsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> getUserPermissionsDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Object, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Boolean>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(429, new TypeToken<Void>() { }.getType())
                .register(500, new TypeToken<PictureparkException>() { }.getType())
                .build(response);
    }

    /**
     * Search Content Permissions.
     * Searches content permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object searchContentPermissions(PermissionSetSearchRequest request) {
        return searchContentPermissionsWithServiceResponseAsync(request).toBlocking().single().body();
    }

    /**
     * Search Content Permissions.
     * Searches content permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> searchContentPermissionsAsync(PermissionSetSearchRequest request, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(searchContentPermissionsWithServiceResponseAsync(request), serviceCallback);
    }

    /**
     * Search Content Permissions.
     * Searches content permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> searchContentPermissionsAsync(PermissionSetSearchRequest request) {
        return searchContentPermissionsWithServiceResponseAsync(request).map(new Func1<ServiceResponse<Object>, Object>() {
            
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Search Content Permissions.
     * Searches content permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> searchContentPermissionsWithServiceResponseAsync(PermissionSetSearchRequest request) {
        if (request == null) {
            throw new IllegalArgumentException("Parameter request is required and cannot be null.");
        }
        Validator.validate(request);
        return service.searchContentPermissions(request)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = searchContentPermissionsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> searchContentPermissionsDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Object, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PermissionSetSearchResult>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(429, new TypeToken<Void>() { }.getType())
                .register(500, new TypeToken<PictureparkException>() { }.getType())
                .build(response);
    }

    /**
     * Get Content Permission Single.
     * Gets the content permission set detail information by the content permission set id.
     *
     * @param permissionSetId The content permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object getContentPermissions(String permissionSetId) {
        return getContentPermissionsWithServiceResponseAsync(permissionSetId).toBlocking().single().body();
    }

    /**
     * Get Content Permission Single.
     * Gets the content permission set detail information by the content permission set id.
     *
     * @param permissionSetId The content permission set id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> getContentPermissionsAsync(String permissionSetId, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(getContentPermissionsWithServiceResponseAsync(permissionSetId), serviceCallback);
    }

    /**
     * Get Content Permission Single.
     * Gets the content permission set detail information by the content permission set id.
     *
     * @param permissionSetId The content permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> getContentPermissionsAsync(String permissionSetId) {
        return getContentPermissionsWithServiceResponseAsync(permissionSetId).map(new Func1<ServiceResponse<Object>, Object>() {
            
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Get Content Permission Single.
     * Gets the content permission set detail information by the content permission set id.
     *
     * @param permissionSetId The content permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> getContentPermissionsWithServiceResponseAsync(String permissionSetId) {
        if (permissionSetId == null) {
            throw new IllegalArgumentException("Parameter permissionSetId is required and cannot be null.");
        }
        return service.getContentPermissions(permissionSetId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = getContentPermissionsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> getContentPermissionsDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Object, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ContentPermissionSetDetail>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(429, new TypeToken<Void>() { }.getType())
                .register(500, new TypeToken<PictureparkException>() { }.getType())
                .build(response);
    }

    /**
     * Search Schema Permissions.
     * Searches schema permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object searchSchemaPermissions(PermissionSetSearchRequest request) {
        return searchSchemaPermissionsWithServiceResponseAsync(request).toBlocking().single().body();
    }

    /**
     * Search Schema Permissions.
     * Searches schema permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> searchSchemaPermissionsAsync(PermissionSetSearchRequest request, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(searchSchemaPermissionsWithServiceResponseAsync(request), serviceCallback);
    }

    /**
     * Search Schema Permissions.
     * Searches schema permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> searchSchemaPermissionsAsync(PermissionSetSearchRequest request) {
        return searchSchemaPermissionsWithServiceResponseAsync(request).map(new Func1<ServiceResponse<Object>, Object>() {
            
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Search Schema Permissions.
     * Searches schema permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> searchSchemaPermissionsWithServiceResponseAsync(PermissionSetSearchRequest request) {
        if (request == null) {
            throw new IllegalArgumentException("Parameter request is required and cannot be null.");
        }
        Validator.validate(request);
        return service.searchSchemaPermissions(request)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = searchSchemaPermissionsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> searchSchemaPermissionsDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Object, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PermissionSetSearchResult>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(429, new TypeToken<Void>() { }.getType())
                .register(500, new TypeToken<PictureparkException>() { }.getType())
                .build(response);
    }

    /**
     * Get Schema Permission Single.
     * Gets the schema permission set detail information by the schema permission set id.
     *
     * @param permissionSetId The schema permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object getSchemaPermissions(String permissionSetId) {
        return getSchemaPermissionsWithServiceResponseAsync(permissionSetId).toBlocking().single().body();
    }

    /**
     * Get Schema Permission Single.
     * Gets the schema permission set detail information by the schema permission set id.
     *
     * @param permissionSetId The schema permission set id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> getSchemaPermissionsAsync(String permissionSetId, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(getSchemaPermissionsWithServiceResponseAsync(permissionSetId), serviceCallback);
    }

    /**
     * Get Schema Permission Single.
     * Gets the schema permission set detail information by the schema permission set id.
     *
     * @param permissionSetId The schema permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> getSchemaPermissionsAsync(String permissionSetId) {
        return getSchemaPermissionsWithServiceResponseAsync(permissionSetId).map(new Func1<ServiceResponse<Object>, Object>() {
            
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Get Schema Permission Single.
     * Gets the schema permission set detail information by the schema permission set id.
     *
     * @param permissionSetId The schema permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> getSchemaPermissionsWithServiceResponseAsync(String permissionSetId) {
        if (permissionSetId == null) {
            throw new IllegalArgumentException("Parameter permissionSetId is required and cannot be null.");
        }
        return service.getSchemaPermissions(permissionSetId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = getSchemaPermissionsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> getSchemaPermissionsDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Object, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SchemaPermissionSetDetail>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(429, new TypeToken<Void>() { }.getType())
                .register(500, new TypeToken<PictureparkException>() { }.getType())
                .build(response);
    }

}
