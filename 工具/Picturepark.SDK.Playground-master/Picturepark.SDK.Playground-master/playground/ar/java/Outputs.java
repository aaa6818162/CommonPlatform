/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package foobar;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import foobar.models.ContentsByIdsRequest;
import java.io.IOException;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Outputs.
 */
public interface Outputs {
    /**
     * Get outputs by contentIds.
     * Gets output documents related for given contentids.
     *
     * @param contentsByIdsRequest Contains the list of contentIds for which the outputs are requested
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getByContentIds(ContentsByIdsRequest contentsByIdsRequest);

    /**
     * Get outputs by contentIds.
     * Gets output documents related for given contentids.
     *
     * @param contentsByIdsRequest Contains the list of contentIds for which the outputs are requested
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getByContentIdsAsync(ContentsByIdsRequest contentsByIdsRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Get outputs by contentIds.
     * Gets output documents related for given contentids.
     *
     * @param contentsByIdsRequest Contains the list of contentIds for which the outputs are requested
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getByContentIdsAsync(ContentsByIdsRequest contentsByIdsRequest);

    /**
     * Get outputs by contentIds.
     * Gets output documents related for given contentids.
     *
     * @param contentsByIdsRequest Contains the list of contentIds for which the outputs are requested
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getByContentIdsWithServiceResponseAsync(ContentsByIdsRequest contentsByIdsRequest);

    /**
     * Get Single.
     * Gets a output document by id.
     *
     * @param outputId The output id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object get(String outputId);

    /**
     * Get Single.
     * Gets a output document by id.
     *
     * @param outputId The output id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAsync(String outputId, final ServiceCallback<Object> serviceCallback);

    /**
     * Get Single.
     * Gets a output document by id.
     *
     * @param outputId The output id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAsync(String outputId);

    /**
     * Get Single.
     * Gets a output document by id.
     *
     * @param outputId The output id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getWithServiceResponseAsync(String outputId);

}
