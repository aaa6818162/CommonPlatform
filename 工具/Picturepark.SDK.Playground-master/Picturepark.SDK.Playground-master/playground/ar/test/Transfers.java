/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import picturepark.models.CreateTransferRequest;
import picturepark.models.FileTransfer2ContentCreateRequest;
import picturepark.models.FileTransferDeleteRequest;
import picturepark.models.FileTransferPartial2ContentCreateRequest;
import picturepark.models.FileTransferSearchRequest;
import picturepark.models.PictureparkException;
import picturepark.models.TransferSearchRequest;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Transfers.
 */
public interface Transfers {
    /**
     * Delete Files.
     *
     * @param request The filetransfer delete request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PictureparkException object if successful.
     */
    PictureparkException deleteFiles(FileTransferDeleteRequest request);

    /**
     * Delete Files.
     *
     * @param request The filetransfer delete request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PictureparkException> deleteFilesAsync(FileTransferDeleteRequest request, final ServiceCallback<PictureparkException> serviceCallback);

    /**
     * Delete Files.
     *
     * @param request The filetransfer delete request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    Observable<PictureparkException> deleteFilesAsync(FileTransferDeleteRequest request);

    /**
     * Delete Files.
     *
     * @param request The filetransfer delete request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    Observable<ServiceResponse<PictureparkException>> deleteFilesWithServiceResponseAsync(FileTransferDeleteRequest request);

    /**
     * Get Blacklist.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getBlacklist();

    /**
     * Get Blacklist.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getBlacklistAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Get Blacklist.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getBlacklistAsync();

    /**
     * Get Blacklist.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getBlacklistWithServiceResponseAsync();

    /**
     * Cancels an active transfer. Valid states: TODO.
     *
     * @param transferId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PictureparkException object if successful.
     */
    PictureparkException cancelTransfer(String transferId);

    /**
     * Cancels an active transfer. Valid states: TODO.
     *
     * @param transferId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PictureparkException> cancelTransferAsync(String transferId, final ServiceCallback<PictureparkException> serviceCallback);

    /**
     * Cancels an active transfer. Valid states: TODO.
     *
     * @param transferId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    Observable<PictureparkException> cancelTransferAsync(String transferId);

    /**
     * Cancels an active transfer. Valid states: TODO.
     *
     * @param transferId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    Observable<ServiceResponse<PictureparkException>> cancelTransferWithServiceResponseAsync(String transferId);

    /**
     * Create Transfer.
     *
     * @param request The create transfer request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object create(CreateTransferRequest request);

    /**
     * Create Transfer.
     *
     * @param request The create transfer request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createAsync(CreateTransferRequest request, final ServiceCallback<Object> serviceCallback);

    /**
     * Create Transfer.
     *
     * @param request The create transfer request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createAsync(CreateTransferRequest request);

    /**
     * Create Transfer.
     *
     * @param request The create transfer request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createWithServiceResponseAsync(CreateTransferRequest request);

    /**
     * Delete Transfer.
     *
     * @param transferId The tranfer id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PictureparkException object if successful.
     */
    PictureparkException delete(String transferId);

    /**
     * Delete Transfer.
     *
     * @param transferId The tranfer id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PictureparkException> deleteAsync(String transferId, final ServiceCallback<PictureparkException> serviceCallback);

    /**
     * Delete Transfer.
     *
     * @param transferId The tranfer id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    Observable<PictureparkException> deleteAsync(String transferId);

    /**
     * Delete Transfer.
     *
     * @param transferId The tranfer id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    Observable<ServiceResponse<PictureparkException>> deleteWithServiceResponseAsync(String transferId);

    /**
     * Get Transferdetail.
     *
     * @param transferId The tranfer id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object get(String transferId);

    /**
     * Get Transferdetail.
     *
     * @param transferId The tranfer id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAsync(String transferId, final ServiceCallback<Object> serviceCallback);

    /**
     * Get Transferdetail.
     *
     * @param transferId The tranfer id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAsync(String transferId);

    /**
     * Get Transferdetail.
     *
     * @param transferId The tranfer id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getWithServiceResponseAsync(String transferId);

    /**
     * Get File.
     *
     * @param fileTransferId The filetransfer id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getFile(String fileTransferId);

    /**
     * Get File.
     *
     * @param fileTransferId The filetransfer id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getFileAsync(String fileTransferId, final ServiceCallback<Object> serviceCallback);

    /**
     * Get File.
     *
     * @param fileTransferId The filetransfer id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getFileAsync(String fileTransferId);

    /**
     * Get File.
     *
     * @param fileTransferId The filetransfer id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getFileWithServiceResponseAsync(String fileTransferId);

    /**
     * Delete Transfer.
     *
     * @param transferId The tranfer id
     * @param request The filetransfer to content create request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object importTransfer(String transferId, FileTransfer2ContentCreateRequest request);

    /**
     * Delete Transfer.
     *
     * @param transferId The tranfer id
     * @param request The filetransfer to content create request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> importTransferAsync(String transferId, FileTransfer2ContentCreateRequest request, final ServiceCallback<Object> serviceCallback);

    /**
     * Delete Transfer.
     *
     * @param transferId The tranfer id
     * @param request The filetransfer to content create request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> importTransferAsync(String transferId, FileTransfer2ContentCreateRequest request);

    /**
     * Delete Transfer.
     *
     * @param transferId The tranfer id
     * @param request The filetransfer to content create request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> importTransferWithServiceResponseAsync(String transferId, FileTransfer2ContentCreateRequest request);

    /**
     * Create a partial import.
     *
     * @param transferId The transfer id
     * @param request The filetransfer partial to content create request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object partialImport(String transferId, FileTransferPartial2ContentCreateRequest request);

    /**
     * Create a partial import.
     *
     * @param transferId The transfer id
     * @param request The filetransfer partial to content create request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> partialImportAsync(String transferId, FileTransferPartial2ContentCreateRequest request, final ServiceCallback<Object> serviceCallback);

    /**
     * Create a partial import.
     *
     * @param transferId The transfer id
     * @param request The filetransfer partial to content create request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> partialImportAsync(String transferId, FileTransferPartial2ContentCreateRequest request);

    /**
     * Create a partial import.
     *
     * @param transferId The transfer id
     * @param request The filetransfer partial to content create request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> partialImportWithServiceResponseAsync(String transferId, FileTransferPartial2ContentCreateRequest request);

    /**
     * Search.
     *
     * @param request The transfer search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object search(TransferSearchRequest request);

    /**
     * Search.
     *
     * @param request The transfer search request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> searchAsync(TransferSearchRequest request, final ServiceCallback<Object> serviceCallback);

    /**
     * Search.
     *
     * @param request The transfer search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> searchAsync(TransferSearchRequest request);

    /**
     * Search.
     *
     * @param request The transfer search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> searchWithServiceResponseAsync(TransferSearchRequest request);

    /**
     * Search for files.
     *
     * @param request The file transfer search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object searchFiles(FileTransferSearchRequest request);

    /**
     * Search for files.
     *
     * @param request The file transfer search request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> searchFilesAsync(FileTransferSearchRequest request, final ServiceCallback<Object> serviceCallback);

    /**
     * Search for files.
     *
     * @param request The file transfer search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> searchFilesAsync(FileTransferSearchRequest request);

    /**
     * Search for files.
     *
     * @param request The file transfer search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> searchFilesWithServiceResponseAsync(FileTransferSearchRequest request);

    /**
     * Upload file.
     *
     * @param transferId the String value
     * @param identifier the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PictureparkException object if successful.
     */
    PictureparkException uploadFile(String transferId, String identifier);

    /**
     * Upload file.
     *
     * @param transferId the String value
     * @param identifier the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PictureparkException> uploadFileAsync(String transferId, String identifier, final ServiceCallback<PictureparkException> serviceCallback);

    /**
     * Upload file.
     *
     * @param transferId the String value
     * @param identifier the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    Observable<PictureparkException> uploadFileAsync(String transferId, String identifier);

    /**
     * Upload file.
     *
     * @param transferId the String value
     * @param identifier the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    Observable<ServiceResponse<PictureparkException>> uploadFileWithServiceResponseAsync(String transferId, String identifier);
    /**
     * Upload file.
     *
     * @param transferId the String value
     * @param identifier the String value
     * @param formFile Gets or sets the form file.
     * @param relativePath Relative path of the uploading file
     * @param chunkNumber Current chunk number. starts with 1
     * @param currentChunkSize Size in bytes of the current chunk
     * @param totalSize Total size in bytes of the uploading file
     * @param totalChunks Total chunks of the uploading file
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PictureparkException object if successful.
     */
    PictureparkException uploadFile(String transferId, String identifier, byte[] formFile, String relativePath, Long chunkNumber, Long currentChunkSize, Long totalSize, Long totalChunks);

    /**
     * Upload file.
     *
     * @param transferId the String value
     * @param identifier the String value
     * @param formFile Gets or sets the form file.
     * @param relativePath Relative path of the uploading file
     * @param chunkNumber Current chunk number. starts with 1
     * @param currentChunkSize Size in bytes of the current chunk
     * @param totalSize Total size in bytes of the uploading file
     * @param totalChunks Total chunks of the uploading file
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PictureparkException> uploadFileAsync(String transferId, String identifier, byte[] formFile, String relativePath, Long chunkNumber, Long currentChunkSize, Long totalSize, Long totalChunks, final ServiceCallback<PictureparkException> serviceCallback);

    /**
     * Upload file.
     *
     * @param transferId the String value
     * @param identifier the String value
     * @param formFile Gets or sets the form file.
     * @param relativePath Relative path of the uploading file
     * @param chunkNumber Current chunk number. starts with 1
     * @param currentChunkSize Size in bytes of the current chunk
     * @param totalSize Total size in bytes of the uploading file
     * @param totalChunks Total chunks of the uploading file
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    Observable<PictureparkException> uploadFileAsync(String transferId, String identifier, byte[] formFile, String relativePath, Long chunkNumber, Long currentChunkSize, Long totalSize, Long totalChunks);

    /**
     * Upload file.
     *
     * @param transferId the String value
     * @param identifier the String value
     * @param formFile Gets or sets the form file.
     * @param relativePath Relative path of the uploading file
     * @param chunkNumber Current chunk number. starts with 1
     * @param currentChunkSize Size in bytes of the current chunk
     * @param totalSize Total size in bytes of the uploading file
     * @param totalChunks Total chunks of the uploading file
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    Observable<ServiceResponse<PictureparkException>> uploadFileWithServiceResponseAsync(String transferId, String identifier, byte[] formFile, String relativePath, Long chunkNumber, Long currentChunkSize, Long totalSize, Long totalChunks);

}
