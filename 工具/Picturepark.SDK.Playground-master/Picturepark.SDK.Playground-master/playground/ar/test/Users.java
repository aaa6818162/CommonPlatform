/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import picturepark.models.UserSearchRequest;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Users.
 */
public interface Users {
    /**
     * Search for users.
     *
     * @param searchRequest The user search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object search(UserSearchRequest searchRequest);

    /**
     * Search for users.
     *
     * @param searchRequest The user search request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> searchAsync(UserSearchRequest searchRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Search for users.
     *
     * @param searchRequest The user search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> searchAsync(UserSearchRequest searchRequest);

    /**
     * Search for users.
     *
     * @param searchRequest The user search request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> searchWithServiceResponseAsync(UserSearchRequest searchRequest);

    /**
     * Get Userdetail by id.
     *
     * @param userId The user id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getUser(String userId);

    /**
     * Get Userdetail by id.
     *
     * @param userId The user id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getUserAsync(String userId, final ServiceCallback<Object> serviceCallback);

    /**
     * Get Userdetail by id.
     *
     * @param userId The user id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getUserAsync(String userId);

    /**
     * Get Userdetail by id.
     *
     * @param userId The user id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getUserWithServiceResponseAsync(String userId);

    /**
     * Get userdetail by owner token.
     *
     * @param tokenId The token id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getByOwnerToken(String tokenId);

    /**
     * Get userdetail by owner token.
     *
     * @param tokenId The token id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getByOwnerTokenAsync(String tokenId, final ServiceCallback<Object> serviceCallback);

    /**
     * Get userdetail by owner token.
     *
     * @param tokenId The token id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getByOwnerTokenAsync(String tokenId);

    /**
     * Get userdetail by owner token.
     *
     * @param tokenId The token id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getByOwnerTokenWithServiceResponseAsync(String tokenId);

    /**
     * Get List of Channels.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getChannels();

    /**
     * Get List of Channels.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getChannelsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Get List of Channels.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getChannelsAsync();

    /**
     * Get List of Channels.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getChannelsWithServiceResponseAsync();

}
