/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import picturepark.models.BusinessProcess;
import picturepark.models.BusinessProcessSearchRequest;
import picturepark.models.BusinessProcessSearchResult;
import picturepark.models.BusinessProcessWaitResult;
import picturepark.models.PictureparkException;
import picturepark.models.SendMessageRequest;
import picturepark.models.StartProcessRequest;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in BusinessProcess.
 */
public class BusinessProcessImpl implements picturepark.BusinessProcess {
    /** The Retrofit service to perform REST calls. */
    private BusinessProcessService service;
    /** The service client containing this operation class. */
    private WebAPISwaggerspecificationImpl client;

    /**
     * Initializes an instance of BusinessProcess.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public BusinessProcessImpl(Retrofit retrofit, WebAPISwaggerspecificationImpl client) {
        this.service = retrofit.create(BusinessProcessService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for BusinessProcess to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BusinessProcessService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.BusinessProcess search" })
        @POST("v1/businessProcesses/search")
        Observable<Response<ResponseBody>> search(@Body BusinessProcessSearchRequest businessProcessSearchRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.BusinessProcess start" })
        @POST("v1/businessProcesses/processDefinitions/{processDefinitionId}/start")
        Observable<Response<ResponseBody>> start(@Path("processDefinitionId") String processDefinitionId, @Body StartProcessRequest request);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.BusinessProcess markAsEnded" })
        @POST("v1/businessProcesses/processes/{processId}/markAsEnded")
        Observable<Response<ResponseBody>> markAsEnded(@Path("processId") String processId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.BusinessProcess sendMessage" })
        @POST("v1/businessProcesses/processes/{processId}/message")
        Observable<Response<ResponseBody>> sendMessage(@Path("processId") String processId, @Body SendMessageRequest request);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: picturepark.BusinessProcess waitForStates" })
        @GET("v1/businessProcesses/{processId}/wait")
        Observable<Response<ResponseBody>> waitForStates(@Path("processId") String processId, @Query("states") String states, @Query("timeout") int timeout);

    }

    /**
     * Search.
     * Search for business processes.
     *
     * @param businessProcessSearchRequest The business process request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object search(BusinessProcessSearchRequest businessProcessSearchRequest) {
        return searchWithServiceResponseAsync(businessProcessSearchRequest).toBlocking().single().body();
    }

    /**
     * Search.
     * Search for business processes.
     *
     * @param businessProcessSearchRequest The business process request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> searchAsync(BusinessProcessSearchRequest businessProcessSearchRequest, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(searchWithServiceResponseAsync(businessProcessSearchRequest), serviceCallback);
    }

    /**
     * Search.
     * Search for business processes.
     *
     * @param businessProcessSearchRequest The business process request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> searchAsync(BusinessProcessSearchRequest businessProcessSearchRequest) {
        return searchWithServiceResponseAsync(businessProcessSearchRequest).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Search.
     * Search for business processes.
     *
     * @param businessProcessSearchRequest The business process request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> searchWithServiceResponseAsync(BusinessProcessSearchRequest businessProcessSearchRequest) {
        if (businessProcessSearchRequest == null) {
            throw new IllegalArgumentException("Parameter businessProcessSearchRequest is required and cannot be null.");
        }
        Validator.validate(businessProcessSearchRequest);
        return service.search(businessProcessSearchRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = searchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> searchDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Object, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BusinessProcessSearchResult>() { }.getType())
                .register(500, new TypeToken<PictureparkException>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(429, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Start.
     * Starts a process with given definition.
     *
     * @param processDefinitionId The process definition id
     * @param request The start process request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object start(String processDefinitionId, StartProcessRequest request) {
        return startWithServiceResponseAsync(processDefinitionId, request).toBlocking().single().body();
    }

    /**
     * Start.
     * Starts a process with given definition.
     *
     * @param processDefinitionId The process definition id
     * @param request The start process request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> startAsync(String processDefinitionId, StartProcessRequest request, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(startWithServiceResponseAsync(processDefinitionId, request), serviceCallback);
    }

    /**
     * Start.
     * Starts a process with given definition.
     *
     * @param processDefinitionId The process definition id
     * @param request The start process request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> startAsync(String processDefinitionId, StartProcessRequest request) {
        return startWithServiceResponseAsync(processDefinitionId, request).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Start.
     * Starts a process with given definition.
     *
     * @param processDefinitionId The process definition id
     * @param request The start process request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> startWithServiceResponseAsync(String processDefinitionId, StartProcessRequest request) {
        if (processDefinitionId == null) {
            throw new IllegalArgumentException("Parameter processDefinitionId is required and cannot be null.");
        }
        if (request == null) {
            throw new IllegalArgumentException("Parameter request is required and cannot be null.");
        }
        Validator.validate(request);
        return service.start(processDefinitionId, request)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = startDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> startDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Object, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BusinessProcess>() { }.getType())
                .register(500, new TypeToken<PictureparkException>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(429, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Mark as ended.
     * Mark a given process as ended.
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PictureparkException object if successful.
     */
    public PictureparkException markAsEnded(String processId) {
        return markAsEndedWithServiceResponseAsync(processId).toBlocking().single().body();
    }

    /**
     * Mark as ended.
     * Mark a given process as ended.
     *
     * @param processId The process id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PictureparkException> markAsEndedAsync(String processId, final ServiceCallback<PictureparkException> serviceCallback) {
        return ServiceFuture.fromResponse(markAsEndedWithServiceResponseAsync(processId), serviceCallback);
    }

    /**
     * Mark as ended.
     * Mark a given process as ended.
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    public Observable<PictureparkException> markAsEndedAsync(String processId) {
        return markAsEndedWithServiceResponseAsync(processId).map(new Func1<ServiceResponse<PictureparkException>, PictureparkException>() {
            @Override
            public PictureparkException call(ServiceResponse<PictureparkException> response) {
                return response.body();
            }
        });
    }

    /**
     * Mark as ended.
     * Mark a given process as ended.
     *
     * @param processId The process id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    public Observable<ServiceResponse<PictureparkException>> markAsEndedWithServiceResponseAsync(String processId) {
        if (processId == null) {
            throw new IllegalArgumentException("Parameter processId is required and cannot be null.");
        }
        return service.markAsEnded(processId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PictureparkException>>>() {
                @Override
                public Observable<ServiceResponse<PictureparkException>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PictureparkException> clientResponse = markAsEndedDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PictureparkException> markAsEndedDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PictureparkException, RestException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .register(500, new TypeToken<PictureparkException>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(429, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Send message.
     * Send message to given process.
     *
     * @param processId The process id
     * @param request The send message request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PictureparkException object if successful.
     */
    public PictureparkException sendMessage(String processId, SendMessageRequest request) {
        return sendMessageWithServiceResponseAsync(processId, request).toBlocking().single().body();
    }

    /**
     * Send message.
     * Send message to given process.
     *
     * @param processId The process id
     * @param request The send message request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PictureparkException> sendMessageAsync(String processId, SendMessageRequest request, final ServiceCallback<PictureparkException> serviceCallback) {
        return ServiceFuture.fromResponse(sendMessageWithServiceResponseAsync(processId, request), serviceCallback);
    }

    /**
     * Send message.
     * Send message to given process.
     *
     * @param processId The process id
     * @param request The send message request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    public Observable<PictureparkException> sendMessageAsync(String processId, SendMessageRequest request) {
        return sendMessageWithServiceResponseAsync(processId, request).map(new Func1<ServiceResponse<PictureparkException>, PictureparkException>() {
            @Override
            public PictureparkException call(ServiceResponse<PictureparkException> response) {
                return response.body();
            }
        });
    }

    /**
     * Send message.
     * Send message to given process.
     *
     * @param processId The process id
     * @param request The send message request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PictureparkException object
     */
    public Observable<ServiceResponse<PictureparkException>> sendMessageWithServiceResponseAsync(String processId, SendMessageRequest request) {
        if (processId == null) {
            throw new IllegalArgumentException("Parameter processId is required and cannot be null.");
        }
        if (request == null) {
            throw new IllegalArgumentException("Parameter request is required and cannot be null.");
        }
        Validator.validate(request);
        return service.sendMessage(processId, request)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PictureparkException>>>() {
                @Override
                public Observable<ServiceResponse<PictureparkException>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PictureparkException> clientResponse = sendMessageDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PictureparkException> sendMessageDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PictureparkException, RestException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .register(500, new TypeToken<PictureparkException>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(429, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Wait for states.
     * Wait for given process states.
     *
     * @param processId The process id
     * @param states The states to wait for
     * @param timeout The timeout in ms
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object waitForStates(String processId, String states, int timeout) {
        return waitForStatesWithServiceResponseAsync(processId, states, timeout).toBlocking().single().body();
    }

    /**
     * Wait for states.
     * Wait for given process states.
     *
     * @param processId The process id
     * @param states The states to wait for
     * @param timeout The timeout in ms
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> waitForStatesAsync(String processId, String states, int timeout, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(waitForStatesWithServiceResponseAsync(processId, states, timeout), serviceCallback);
    }

    /**
     * Wait for states.
     * Wait for given process states.
     *
     * @param processId The process id
     * @param states The states to wait for
     * @param timeout The timeout in ms
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> waitForStatesAsync(String processId, String states, int timeout) {
        return waitForStatesWithServiceResponseAsync(processId, states, timeout).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Wait for states.
     * Wait for given process states.
     *
     * @param processId The process id
     * @param states The states to wait for
     * @param timeout The timeout in ms
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> waitForStatesWithServiceResponseAsync(String processId, String states, int timeout) {
        if (processId == null) {
            throw new IllegalArgumentException("Parameter processId is required and cannot be null.");
        }
        if (states == null) {
            throw new IllegalArgumentException("Parameter states is required and cannot be null.");
        }
        return service.waitForStates(processId, states, timeout)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = waitForStatesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> waitForStatesDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Object, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BusinessProcessWaitResult>() { }.getType())
                .register(500, new TypeToken<PictureparkException>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(429, new TypeToken<Void>() { }.getType())
                .build(response);
    }

}
