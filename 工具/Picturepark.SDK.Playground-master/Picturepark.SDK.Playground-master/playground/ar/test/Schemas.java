/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import picturepark.models.SchemaCreateRequest;
import picturepark.models.SchemaSearchRequest;
import picturepark.models.SchemaUpdateRequest;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Schemas.
 */
public interface Schemas {
    /**
     * Get Many.
     * Gets the schema detail informations by given schema ids.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getMany();

    /**
     * Get Many.
     * Gets the schema detail informations by given schema ids.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getManyAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Get Many.
     * Gets the schema detail informations by given schema ids.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getManyAsync();

    /**
     * Get Many.
     * Gets the schema detail informations by given schema ids.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getManyWithServiceResponseAsync();
    /**
     * Get Many.
     * Gets the schema detail informations by given schema ids.
     *
     * @param ids Comma separated list of schema ids
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getMany(List<String> ids);

    /**
     * Get Many.
     * Gets the schema detail informations by given schema ids.
     *
     * @param ids Comma separated list of schema ids
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getManyAsync(List<String> ids, final ServiceCallback<Object> serviceCallback);

    /**
     * Get Many.
     * Gets the schema detail informations by given schema ids.
     *
     * @param ids Comma separated list of schema ids
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getManyAsync(List<String> ids);

    /**
     * Get Many.
     * Gets the schema detail informations by given schema ids.
     *
     * @param ids Comma separated list of schema ids
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getManyWithServiceResponseAsync(List<String> ids);

    /**
     * Create Single.
     * The creation of a single schema is executed asynchronous. To keep track of the creation progress a business process is returned.
     *
     * @param schema The schema create request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object create(SchemaCreateRequest schema);

    /**
     * Create Single.
     * The creation of a single schema is executed asynchronous. To keep track of the creation progress a business process is returned.
     *
     * @param schema The schema create request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createAsync(SchemaCreateRequest schema, final ServiceCallback<Object> serviceCallback);

    /**
     * Create Single.
     * The creation of a single schema is executed asynchronous. To keep track of the creation progress a business process is returned.
     *
     * @param schema The schema create request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createAsync(SchemaCreateRequest schema);

    /**
     * Create Single.
     * The creation of a single schema is executed asynchronous. To keep track of the creation progress a business process is returned.
     *
     * @param schema The schema create request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createWithServiceResponseAsync(SchemaCreateRequest schema);

    /**
     * Get Single.
     * Gets the schema detail information by the schema id.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object get(String schemaId);

    /**
     * Get Single.
     * Gets the schema detail information by the schema id.
     *
     * @param schemaId The schema id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAsync(String schemaId, final ServiceCallback<Object> serviceCallback);

    /**
     * Get Single.
     * Gets the schema detail information by the schema id.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAsync(String schemaId);

    /**
     * Get Single.
     * Gets the schema detail information by the schema id.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getWithServiceResponseAsync(String schemaId);

    /**
     * Update Single.
     * The update of a single schema is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param schemaId The schema id.
     * @param schema The schema update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object update(String schemaId, SchemaUpdateRequest schema);

    /**
     * Update Single.
     * The update of a single schema is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param schemaId The schema id.
     * @param schema The schema update request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateAsync(String schemaId, SchemaUpdateRequest schema, final ServiceCallback<Object> serviceCallback);

    /**
     * Update Single.
     * The update of a single schema is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param schemaId The schema id.
     * @param schema The schema update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateAsync(String schemaId, SchemaUpdateRequest schema);

    /**
     * Update Single.
     * The update of a single schema is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @param schemaId The schema id.
     * @param schema The schema update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateWithServiceResponseAsync(String schemaId, SchemaUpdateRequest schema);

    /**
     * Delete Single.
     * The deletion of a single schema is executed asynchronous. To keep track of the deletion progress a business process is returned.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object delete(String schemaId);

    /**
     * Delete Single.
     * The deletion of a single schema is executed asynchronous. To keep track of the deletion progress a business process is returned.
     *
     * @param schemaId The schema id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteAsync(String schemaId, final ServiceCallback<Object> serviceCallback);

    /**
     * Delete Single.
     * The deletion of a single schema is executed asynchronous. To keep track of the deletion progress a business process is returned.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteAsync(String schemaId);

    /**
     * Delete Single.
     * The deletion of a single schema is executed asynchronous. To keep track of the deletion progress a business process is returned.
     *
     * @param schemaId The schema id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteWithServiceResponseAsync(String schemaId);

    /**
     * Exists.
     * Checks if the schema or optionally the schema's field already exists.
     *
     * @param schemaId The schema id.
     * @param fieldId The optional field id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object exists(String schemaId, String fieldId);

    /**
     * Exists.
     * Checks if the schema or optionally the schema's field already exists.
     *
     * @param schemaId The schema id.
     * @param fieldId The optional field id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> existsAsync(String schemaId, String fieldId, final ServiceCallback<Object> serviceCallback);

    /**
     * Exists.
     * Checks if the schema or optionally the schema's field already exists.
     *
     * @param schemaId The schema id.
     * @param fieldId The optional field id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> existsAsync(String schemaId, String fieldId);

    /**
     * Exists.
     * Checks if the schema or optionally the schema's field already exists.
     *
     * @param schemaId The schema id.
     * @param fieldId The optional field id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> existsWithServiceResponseAsync(String schemaId, String fieldId);

    /**
     * Search.
     * Searches schemas as specified in the search request.
     *
     * @param schemaSearchRequest The schema search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object search(SchemaSearchRequest schemaSearchRequest);

    /**
     * Search.
     * Searches schemas as specified in the search request.
     *
     * @param schemaSearchRequest The schema search request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> searchAsync(SchemaSearchRequest schemaSearchRequest, final ServiceCallback<Object> serviceCallback);

    /**
     * Search.
     * Searches schemas as specified in the search request.
     *
     * @param schemaSearchRequest The schema search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> searchAsync(SchemaSearchRequest schemaSearchRequest);

    /**
     * Search.
     * Searches schemas as specified in the search request.
     *
     * @param schemaSearchRequest The schema search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> searchWithServiceResponseAsync(SchemaSearchRequest schemaSearchRequest);

}
