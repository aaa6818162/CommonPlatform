/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package picturepark;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import picturepark.models.PermissionSetSearchRequest;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Permissions.
 */
public interface Permissions {
    /**
     * Get UserRight validation result.
     * Validates if the User has a given UserRight.
     *
     * @param permission The UserRight to validate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getUserPermissions(String permission);

    /**
     * Get UserRight validation result.
     * Validates if the User has a given UserRight.
     *
     * @param permission The UserRight to validate
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getUserPermissionsAsync(String permission, final ServiceCallback<Object> serviceCallback);

    /**
     * Get UserRight validation result.
     * Validates if the User has a given UserRight.
     *
     * @param permission The UserRight to validate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getUserPermissionsAsync(String permission);

    /**
     * Get UserRight validation result.
     * Validates if the User has a given UserRight.
     *
     * @param permission The UserRight to validate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getUserPermissionsWithServiceResponseAsync(String permission);

    /**
     * Search Content Permissions.
     * Searches content permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object searchContentPermissions(PermissionSetSearchRequest request);

    /**
     * Search Content Permissions.
     * Searches content permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> searchContentPermissionsAsync(PermissionSetSearchRequest request, final ServiceCallback<Object> serviceCallback);

    /**
     * Search Content Permissions.
     * Searches content permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> searchContentPermissionsAsync(PermissionSetSearchRequest request);

    /**
     * Search Content Permissions.
     * Searches content permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> searchContentPermissionsWithServiceResponseAsync(PermissionSetSearchRequest request);

    /**
     * Get Content Permission Single.
     * Gets the content permission set detail information by the content permission set id.
     *
     * @param permissionSetId The content permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getContentPermissions(String permissionSetId);

    /**
     * Get Content Permission Single.
     * Gets the content permission set detail information by the content permission set id.
     *
     * @param permissionSetId The content permission set id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getContentPermissionsAsync(String permissionSetId, final ServiceCallback<Object> serviceCallback);

    /**
     * Get Content Permission Single.
     * Gets the content permission set detail information by the content permission set id.
     *
     * @param permissionSetId The content permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getContentPermissionsAsync(String permissionSetId);

    /**
     * Get Content Permission Single.
     * Gets the content permission set detail information by the content permission set id.
     *
     * @param permissionSetId The content permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getContentPermissionsWithServiceResponseAsync(String permissionSetId);

    /**
     * Search Schema Permissions.
     * Searches schema permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object searchSchemaPermissions(PermissionSetSearchRequest request);

    /**
     * Search Schema Permissions.
     * Searches schema permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> searchSchemaPermissionsAsync(PermissionSetSearchRequest request, final ServiceCallback<Object> serviceCallback);

    /**
     * Search Schema Permissions.
     * Searches schema permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> searchSchemaPermissionsAsync(PermissionSetSearchRequest request);

    /**
     * Search Schema Permissions.
     * Searches schema permission sets as specified in the search request.
     *
     * @param request The permission search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> searchSchemaPermissionsWithServiceResponseAsync(PermissionSetSearchRequest request);

    /**
     * Get Schema Permission Single.
     * Gets the schema permission set detail information by the schema permission set id.
     *
     * @param permissionSetId The schema permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getSchemaPermissions(String permissionSetId);

    /**
     * Get Schema Permission Single.
     * Gets the schema permission set detail information by the schema permission set id.
     *
     * @param permissionSetId The schema permission set id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getSchemaPermissionsAsync(String permissionSetId, final ServiceCallback<Object> serviceCallback);

    /**
     * Get Schema Permission Single.
     * Gets the schema permission set detail information by the schema permission set id.
     *
     * @param permissionSetId The schema permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getSchemaPermissionsAsync(String permissionSetId);

    /**
     * Get Schema Permission Single.
     * Gets the schema permission set detail information by the schema permission set id.
     *
     * @param permissionSetId The schema permission set id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getSchemaPermissionsWithServiceResponseAsync(String permissionSetId);

}
