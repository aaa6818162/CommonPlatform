/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BaseResultOfShareBase;
import io.swagger.client.model.ContentNotFoundException;
import io.swagger.client.model.CreateShareResult;
import io.swagger.client.model.ObjectAggregationResult;
import io.swagger.client.model.PictureparkException;
import io.swagger.client.model.ShareAggregationRequest;
import io.swagger.client.model.ShareBaseCreateRequest;
import io.swagger.client.model.ShareBaseDetail;
import io.swagger.client.model.ShareBaseUpdateRequest;
import io.swagger.client.model.ShareSearchRequest;
import io.swagger.client.model.ShareSearchResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ShareApi {
    private ApiClient apiClient;

    public ShareApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ShareApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for shareAggregate
     * @param request Aggregation request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call shareAggregateCall(ShareAggregationRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/V1/Shares/Aggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call shareAggregateValidateBeforeCall(ShareAggregationRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling shareAggregate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = shareAggregateCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Aggregate
     * Aggregates own shares
     * @param request Aggregation request (required)
     * @return ObjectAggregationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectAggregationResult shareAggregate(ShareAggregationRequest request) throws ApiException {
        ApiResponse<ObjectAggregationResult> resp = shareAggregateWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Aggregate
     * Aggregates own shares
     * @param request Aggregation request (required)
     * @return ApiResponse&lt;ObjectAggregationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectAggregationResult> shareAggregateWithHttpInfo(ShareAggregationRequest request) throws ApiException {
        com.squareup.okhttp.Call call = shareAggregateValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<ObjectAggregationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Aggregate (asynchronously)
     * Aggregates own shares
     * @param request Aggregation request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call shareAggregateAsync(ShareAggregationRequest request, final ApiCallback<ObjectAggregationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = shareAggregateValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectAggregationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for shareCreate
     * @param request Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call shareCreateCall(ShareBaseCreateRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/V1/Shares";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call shareCreateValidateBeforeCall(ShareBaseCreateRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling shareCreate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = shareCreateCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create single
     * Create a new share (basic or embed).
     * @param request Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest (required)
     * @return CreateShareResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateShareResult shareCreate(ShareBaseCreateRequest request) throws ApiException {
        ApiResponse<CreateShareResult> resp = shareCreateWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Create single
     * Create a new share (basic or embed).
     * @param request Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest (required)
     * @return ApiResponse&lt;CreateShareResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateShareResult> shareCreateWithHttpInfo(ShareBaseCreateRequest request) throws ApiException {
        com.squareup.okhttp.Call call = shareCreateValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<CreateShareResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create single (asynchronously)
     * Create a new share (basic or embed).
     * @param request Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call shareCreateAsync(ShareBaseCreateRequest request, final ApiCallback<CreateShareResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = shareCreateValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateShareResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for shareGet
     * @param id Share Id (not token, use PublicAccess to get share by token) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call shareGetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Shares/{Id}"
            .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call shareGetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling shareGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = shareGetCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get single
     * Get share by id (basic or embed)
     * @param id Share Id (not token, use PublicAccess to get share by token) (required)
     * @return ShareBaseDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShareBaseDetail shareGet(String id) throws ApiException {
        ApiResponse<ShareBaseDetail> resp = shareGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get single
     * Get share by id (basic or embed)
     * @param id Share Id (not token, use PublicAccess to get share by token) (required)
     * @return ApiResponse&lt;ShareBaseDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShareBaseDetail> shareGetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = shareGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<ShareBaseDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get single (asynchronously)
     * Get share by id (basic or embed)
     * @param id Share Id (not token, use PublicAccess to get share by token) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call shareGetAsync(String id, final ApiCallback<ShareBaseDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = shareGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ShareBaseDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for shareSearch
     * @param request Search request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call shareSearchCall(ShareSearchRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/V1/Shares/Search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call shareSearchValidateBeforeCall(ShareSearchRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling shareSearch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = shareSearchCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search
     * Search own shares
     * @param request Search request (required)
     * @return ShareSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShareSearchResult shareSearch(ShareSearchRequest request) throws ApiException {
        ApiResponse<ShareSearchResult> resp = shareSearchWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Search
     * Search own shares
     * @param request Search request (required)
     * @return ApiResponse&lt;ShareSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShareSearchResult> shareSearchWithHttpInfo(ShareSearchRequest request) throws ApiException {
        com.squareup.okhttp.Call call = shareSearchValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<ShareSearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search (asynchronously)
     * Search own shares
     * @param request Search request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call shareSearchAsync(ShareSearchRequest request, final ApiCallback<ShareSearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = shareSearchValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ShareSearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for shareUpdate
     * @param id The share id. (required)
     * @param updateRequest The share update request. (required)
     * @param resolve Resolves the data of referenced list items into the shares content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call shareUpdateCall(String id, ShareBaseUpdateRequest updateRequest, Boolean resolve, Integer timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateRequest;
        
        // create path and map variables
        String localVarPath = "/V1/Shares/{Id}"
            .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (resolve != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resolve", resolve));
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeout", timeout));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call shareUpdateValidateBeforeCall(String id, ShareBaseUpdateRequest updateRequest, Boolean resolve, Integer timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling shareUpdate(Async)");
        }
        
        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling shareUpdate(Async)");
        }
        
        // verify the required parameter 'resolve' is set
        if (resolve == null) {
            throw new ApiException("Missing the required parameter 'resolve' when calling shareUpdate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = shareUpdateCall(id, updateRequest, resolve, timeout, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update single
     * The update of share is executed asynchronous. However, for the specified timeout completion of the update process is awaited. If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     * @param id The share id. (required)
     * @param updateRequest The share update request. (required)
     * @param resolve Resolves the data of referenced list items into the shares content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @return BaseResultOfShareBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResultOfShareBase shareUpdate(String id, ShareBaseUpdateRequest updateRequest, Boolean resolve, Integer timeout) throws ApiException {
        ApiResponse<BaseResultOfShareBase> resp = shareUpdateWithHttpInfo(id, updateRequest, resolve, timeout);
        return resp.getData();
    }

    /**
     * Update single
     * The update of share is executed asynchronous. However, for the specified timeout completion of the update process is awaited. If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     * @param id The share id. (required)
     * @param updateRequest The share update request. (required)
     * @param resolve Resolves the data of referenced list items into the shares content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @return ApiResponse&lt;BaseResultOfShareBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResultOfShareBase> shareUpdateWithHttpInfo(String id, ShareBaseUpdateRequest updateRequest, Boolean resolve, Integer timeout) throws ApiException {
        com.squareup.okhttp.Call call = shareUpdateValidateBeforeCall(id, updateRequest, resolve, timeout, null, null);
        Type localVarReturnType = new TypeToken<BaseResultOfShareBase>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update single (asynchronously)
     * The update of share is executed asynchronous. However, for the specified timeout completion of the update process is awaited. If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     * @param id The share id. (required)
     * @param updateRequest The share update request. (required)
     * @param resolve Resolves the data of referenced list items into the shares content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call shareUpdateAsync(String id, ShareBaseUpdateRequest updateRequest, Boolean resolve, Integer timeout, final ApiCallback<BaseResultOfShareBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = shareUpdateValidateBeforeCall(id, updateRequest, resolve, timeout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResultOfShareBase>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
