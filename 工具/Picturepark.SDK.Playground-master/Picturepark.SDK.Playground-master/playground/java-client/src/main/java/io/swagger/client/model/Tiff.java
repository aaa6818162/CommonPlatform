/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Compression;
import io.swagger.client.model.Orientation;
import io.swagger.client.model.PhotometricInterpretation;
import io.swagger.client.model.PlanarConfiguration;
import io.swagger.client.model.ResolutionUnit;
import io.swagger.client.model.YCbCrPositioning;
import io.swagger.client.model.YCbCrSubSampling;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.joda.time.DateTime;

/**
 * Tiff
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-04T14:36:42.044Z")
public class Tiff {
  @SerializedName("artist")
  private String artist = null;

  @SerializedName("bitsPerSample")
  private List<Integer> bitsPerSample = null;

  @SerializedName("compression")
  private Compression compression = null;

  @SerializedName("copyright")
  private Map<String, String> copyright = null;

  @SerializedName("dateTime")
  private DateTime dateTime = null;

  @SerializedName("imageDescription")
  private Map<String, String> imageDescription = null;

  @SerializedName("imageLength")
  private Integer imageLength = null;

  @SerializedName("imageWidth")
  private Integer imageWidth = null;

  @SerializedName("make")
  private String make = null;

  @SerializedName("model")
  private String model = null;

  @SerializedName("orientation")
  private Orientation orientation = null;

  @SerializedName("photometricInterpretation")
  private PhotometricInterpretation photometricInterpretation = null;

  @SerializedName("planarConfiguration")
  private PlanarConfiguration planarConfiguration = null;

  @SerializedName("primaryChromaticities")
  private List<String> primaryChromaticities = null;

  @SerializedName("referenceBlackWhite")
  private List<String> referenceBlackWhite = null;

  @SerializedName("resolutionUnit")
  private ResolutionUnit resolutionUnit = null;

  @SerializedName("samplesPerPixel")
  private Integer samplesPerPixel = null;

  @SerializedName("software")
  private String software = null;

  @SerializedName("transferFunction")
  private List<Integer> transferFunction = null;

  @SerializedName("whitePoint")
  private List<String> whitePoint = null;

  @SerializedName("xResolution")
  private String xResolution = null;

  @SerializedName("yResolution")
  private String yResolution = null;

  @SerializedName("yCbCrCoefficients")
  private List<String> yCbCrCoefficients = null;

  @SerializedName("yCbCrPositioning")
  private YCbCrPositioning yCbCrPositioning = null;

  @SerializedName("yCbCrSubSampling")
  private YCbCrSubSampling yCbCrSubSampling = null;

  @SerializedName("nativeDigest")
  private String nativeDigest = null;

  public Tiff artist(String artist) {
    this.artist = artist;
    return this;
  }

   /**
   * Get artist
   * @return artist
  **/
  @ApiModelProperty(value = "")
  public String getArtist() {
    return artist;
  }

  public void setArtist(String artist) {
    this.artist = artist;
  }

  public Tiff bitsPerSample(List<Integer> bitsPerSample) {
    this.bitsPerSample = bitsPerSample;
    return this;
  }

  public Tiff addBitsPerSampleItem(Integer bitsPerSampleItem) {
    if (this.bitsPerSample == null) {
      this.bitsPerSample = new ArrayList<Integer>();
    }
    this.bitsPerSample.add(bitsPerSampleItem);
    return this;
  }

   /**
   * Get bitsPerSample
   * @return bitsPerSample
  **/
  @ApiModelProperty(value = "")
  public List<Integer> getBitsPerSample() {
    return bitsPerSample;
  }

  public void setBitsPerSample(List<Integer> bitsPerSample) {
    this.bitsPerSample = bitsPerSample;
  }

  public Tiff compression(Compression compression) {
    this.compression = compression;
    return this;
  }

   /**
   * Get compression
   * @return compression
  **/
  @ApiModelProperty(value = "")
  public Compression getCompression() {
    return compression;
  }

  public void setCompression(Compression compression) {
    this.compression = compression;
  }

  public Tiff copyright(Map<String, String> copyright) {
    this.copyright = copyright;
    return this;
  }

  public Tiff putCopyrightItem(String key, String copyrightItem) {
    if (this.copyright == null) {
      this.copyright = new HashMap<String, String>();
    }
    this.copyright.put(key, copyrightItem);
    return this;
  }

   /**
   * Get copyright
   * @return copyright
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getCopyright() {
    return copyright;
  }

  public void setCopyright(Map<String, String> copyright) {
    this.copyright = copyright;
  }

  public Tiff dateTime(DateTime dateTime) {
    this.dateTime = dateTime;
    return this;
  }

   /**
   * Get dateTime
   * @return dateTime
  **/
  @ApiModelProperty(value = "")
  public DateTime getDateTime() {
    return dateTime;
  }

  public void setDateTime(DateTime dateTime) {
    this.dateTime = dateTime;
  }

  public Tiff imageDescription(Map<String, String> imageDescription) {
    this.imageDescription = imageDescription;
    return this;
  }

  public Tiff putImageDescriptionItem(String key, String imageDescriptionItem) {
    if (this.imageDescription == null) {
      this.imageDescription = new HashMap<String, String>();
    }
    this.imageDescription.put(key, imageDescriptionItem);
    return this;
  }

   /**
   * Get imageDescription
   * @return imageDescription
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getImageDescription() {
    return imageDescription;
  }

  public void setImageDescription(Map<String, String> imageDescription) {
    this.imageDescription = imageDescription;
  }

  public Tiff imageLength(Integer imageLength) {
    this.imageLength = imageLength;
    return this;
  }

   /**
   * Get imageLength
   * @return imageLength
  **/
  @ApiModelProperty(value = "")
  public Integer getImageLength() {
    return imageLength;
  }

  public void setImageLength(Integer imageLength) {
    this.imageLength = imageLength;
  }

  public Tiff imageWidth(Integer imageWidth) {
    this.imageWidth = imageWidth;
    return this;
  }

   /**
   * Get imageWidth
   * @return imageWidth
  **/
  @ApiModelProperty(value = "")
  public Integer getImageWidth() {
    return imageWidth;
  }

  public void setImageWidth(Integer imageWidth) {
    this.imageWidth = imageWidth;
  }

  public Tiff make(String make) {
    this.make = make;
    return this;
  }

   /**
   * Get make
   * @return make
  **/
  @ApiModelProperty(value = "")
  public String getMake() {
    return make;
  }

  public void setMake(String make) {
    this.make = make;
  }

  public Tiff model(String model) {
    this.model = model;
    return this;
  }

   /**
   * Get model
   * @return model
  **/
  @ApiModelProperty(value = "")
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }

  public Tiff orientation(Orientation orientation) {
    this.orientation = orientation;
    return this;
  }

   /**
   * Get orientation
   * @return orientation
  **/
  @ApiModelProperty(value = "")
  public Orientation getOrientation() {
    return orientation;
  }

  public void setOrientation(Orientation orientation) {
    this.orientation = orientation;
  }

  public Tiff photometricInterpretation(PhotometricInterpretation photometricInterpretation) {
    this.photometricInterpretation = photometricInterpretation;
    return this;
  }

   /**
   * Get photometricInterpretation
   * @return photometricInterpretation
  **/
  @ApiModelProperty(value = "")
  public PhotometricInterpretation getPhotometricInterpretation() {
    return photometricInterpretation;
  }

  public void setPhotometricInterpretation(PhotometricInterpretation photometricInterpretation) {
    this.photometricInterpretation = photometricInterpretation;
  }

  public Tiff planarConfiguration(PlanarConfiguration planarConfiguration) {
    this.planarConfiguration = planarConfiguration;
    return this;
  }

   /**
   * Get planarConfiguration
   * @return planarConfiguration
  **/
  @ApiModelProperty(value = "")
  public PlanarConfiguration getPlanarConfiguration() {
    return planarConfiguration;
  }

  public void setPlanarConfiguration(PlanarConfiguration planarConfiguration) {
    this.planarConfiguration = planarConfiguration;
  }

  public Tiff primaryChromaticities(List<String> primaryChromaticities) {
    this.primaryChromaticities = primaryChromaticities;
    return this;
  }

  public Tiff addPrimaryChromaticitiesItem(String primaryChromaticitiesItem) {
    if (this.primaryChromaticities == null) {
      this.primaryChromaticities = new ArrayList<String>();
    }
    this.primaryChromaticities.add(primaryChromaticitiesItem);
    return this;
  }

   /**
   * Get primaryChromaticities
   * @return primaryChromaticities
  **/
  @ApiModelProperty(value = "")
  public List<String> getPrimaryChromaticities() {
    return primaryChromaticities;
  }

  public void setPrimaryChromaticities(List<String> primaryChromaticities) {
    this.primaryChromaticities = primaryChromaticities;
  }

  public Tiff referenceBlackWhite(List<String> referenceBlackWhite) {
    this.referenceBlackWhite = referenceBlackWhite;
    return this;
  }

  public Tiff addReferenceBlackWhiteItem(String referenceBlackWhiteItem) {
    if (this.referenceBlackWhite == null) {
      this.referenceBlackWhite = new ArrayList<String>();
    }
    this.referenceBlackWhite.add(referenceBlackWhiteItem);
    return this;
  }

   /**
   * Get referenceBlackWhite
   * @return referenceBlackWhite
  **/
  @ApiModelProperty(value = "")
  public List<String> getReferenceBlackWhite() {
    return referenceBlackWhite;
  }

  public void setReferenceBlackWhite(List<String> referenceBlackWhite) {
    this.referenceBlackWhite = referenceBlackWhite;
  }

  public Tiff resolutionUnit(ResolutionUnit resolutionUnit) {
    this.resolutionUnit = resolutionUnit;
    return this;
  }

   /**
   * Get resolutionUnit
   * @return resolutionUnit
  **/
  @ApiModelProperty(value = "")
  public ResolutionUnit getResolutionUnit() {
    return resolutionUnit;
  }

  public void setResolutionUnit(ResolutionUnit resolutionUnit) {
    this.resolutionUnit = resolutionUnit;
  }

  public Tiff samplesPerPixel(Integer samplesPerPixel) {
    this.samplesPerPixel = samplesPerPixel;
    return this;
  }

   /**
   * Get samplesPerPixel
   * @return samplesPerPixel
  **/
  @ApiModelProperty(value = "")
  public Integer getSamplesPerPixel() {
    return samplesPerPixel;
  }

  public void setSamplesPerPixel(Integer samplesPerPixel) {
    this.samplesPerPixel = samplesPerPixel;
  }

  public Tiff software(String software) {
    this.software = software;
    return this;
  }

   /**
   * Get software
   * @return software
  **/
  @ApiModelProperty(value = "")
  public String getSoftware() {
    return software;
  }

  public void setSoftware(String software) {
    this.software = software;
  }

  public Tiff transferFunction(List<Integer> transferFunction) {
    this.transferFunction = transferFunction;
    return this;
  }

  public Tiff addTransferFunctionItem(Integer transferFunctionItem) {
    if (this.transferFunction == null) {
      this.transferFunction = new ArrayList<Integer>();
    }
    this.transferFunction.add(transferFunctionItem);
    return this;
  }

   /**
   * Get transferFunction
   * @return transferFunction
  **/
  @ApiModelProperty(value = "")
  public List<Integer> getTransferFunction() {
    return transferFunction;
  }

  public void setTransferFunction(List<Integer> transferFunction) {
    this.transferFunction = transferFunction;
  }

  public Tiff whitePoint(List<String> whitePoint) {
    this.whitePoint = whitePoint;
    return this;
  }

  public Tiff addWhitePointItem(String whitePointItem) {
    if (this.whitePoint == null) {
      this.whitePoint = new ArrayList<String>();
    }
    this.whitePoint.add(whitePointItem);
    return this;
  }

   /**
   * Get whitePoint
   * @return whitePoint
  **/
  @ApiModelProperty(value = "")
  public List<String> getWhitePoint() {
    return whitePoint;
  }

  public void setWhitePoint(List<String> whitePoint) {
    this.whitePoint = whitePoint;
  }

  public Tiff xResolution(String xResolution) {
    this.xResolution = xResolution;
    return this;
  }

   /**
   * Get xResolution
   * @return xResolution
  **/
  @ApiModelProperty(value = "")
  public String getXResolution() {
    return xResolution;
  }

  public void setXResolution(String xResolution) {
    this.xResolution = xResolution;
  }

  public Tiff yResolution(String yResolution) {
    this.yResolution = yResolution;
    return this;
  }

   /**
   * Get yResolution
   * @return yResolution
  **/
  @ApiModelProperty(value = "")
  public String getYResolution() {
    return yResolution;
  }

  public void setYResolution(String yResolution) {
    this.yResolution = yResolution;
  }

  public Tiff yCbCrCoefficients(List<String> yCbCrCoefficients) {
    this.yCbCrCoefficients = yCbCrCoefficients;
    return this;
  }

  public Tiff addYCbCrCoefficientsItem(String yCbCrCoefficientsItem) {
    if (this.yCbCrCoefficients == null) {
      this.yCbCrCoefficients = new ArrayList<String>();
    }
    this.yCbCrCoefficients.add(yCbCrCoefficientsItem);
    return this;
  }

   /**
   * Get yCbCrCoefficients
   * @return yCbCrCoefficients
  **/
  @ApiModelProperty(value = "")
  public List<String> getYCbCrCoefficients() {
    return yCbCrCoefficients;
  }

  public void setYCbCrCoefficients(List<String> yCbCrCoefficients) {
    this.yCbCrCoefficients = yCbCrCoefficients;
  }

  public Tiff yCbCrPositioning(YCbCrPositioning yCbCrPositioning) {
    this.yCbCrPositioning = yCbCrPositioning;
    return this;
  }

   /**
   * Get yCbCrPositioning
   * @return yCbCrPositioning
  **/
  @ApiModelProperty(value = "")
  public YCbCrPositioning getYCbCrPositioning() {
    return yCbCrPositioning;
  }

  public void setYCbCrPositioning(YCbCrPositioning yCbCrPositioning) {
    this.yCbCrPositioning = yCbCrPositioning;
  }

  public Tiff yCbCrSubSampling(YCbCrSubSampling yCbCrSubSampling) {
    this.yCbCrSubSampling = yCbCrSubSampling;
    return this;
  }

   /**
   * Get yCbCrSubSampling
   * @return yCbCrSubSampling
  **/
  @ApiModelProperty(value = "")
  public YCbCrSubSampling getYCbCrSubSampling() {
    return yCbCrSubSampling;
  }

  public void setYCbCrSubSampling(YCbCrSubSampling yCbCrSubSampling) {
    this.yCbCrSubSampling = yCbCrSubSampling;
  }

  public Tiff nativeDigest(String nativeDigest) {
    this.nativeDigest = nativeDigest;
    return this;
  }

   /**
   * Get nativeDigest
   * @return nativeDigest
  **/
  @ApiModelProperty(value = "")
  public String getNativeDigest() {
    return nativeDigest;
  }

  public void setNativeDigest(String nativeDigest) {
    this.nativeDigest = nativeDigest;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tiff tiff = (Tiff) o;
    return Objects.equals(this.artist, tiff.artist) &&
        Objects.equals(this.bitsPerSample, tiff.bitsPerSample) &&
        Objects.equals(this.compression, tiff.compression) &&
        Objects.equals(this.copyright, tiff.copyright) &&
        Objects.equals(this.dateTime, tiff.dateTime) &&
        Objects.equals(this.imageDescription, tiff.imageDescription) &&
        Objects.equals(this.imageLength, tiff.imageLength) &&
        Objects.equals(this.imageWidth, tiff.imageWidth) &&
        Objects.equals(this.make, tiff.make) &&
        Objects.equals(this.model, tiff.model) &&
        Objects.equals(this.orientation, tiff.orientation) &&
        Objects.equals(this.photometricInterpretation, tiff.photometricInterpretation) &&
        Objects.equals(this.planarConfiguration, tiff.planarConfiguration) &&
        Objects.equals(this.primaryChromaticities, tiff.primaryChromaticities) &&
        Objects.equals(this.referenceBlackWhite, tiff.referenceBlackWhite) &&
        Objects.equals(this.resolutionUnit, tiff.resolutionUnit) &&
        Objects.equals(this.samplesPerPixel, tiff.samplesPerPixel) &&
        Objects.equals(this.software, tiff.software) &&
        Objects.equals(this.transferFunction, tiff.transferFunction) &&
        Objects.equals(this.whitePoint, tiff.whitePoint) &&
        Objects.equals(this.xResolution, tiff.xResolution) &&
        Objects.equals(this.yResolution, tiff.yResolution) &&
        Objects.equals(this.yCbCrCoefficients, tiff.yCbCrCoefficients) &&
        Objects.equals(this.yCbCrPositioning, tiff.yCbCrPositioning) &&
        Objects.equals(this.yCbCrSubSampling, tiff.yCbCrSubSampling) &&
        Objects.equals(this.nativeDigest, tiff.nativeDigest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artist, bitsPerSample, compression, copyright, dateTime, imageDescription, imageLength, imageWidth, make, model, orientation, photometricInterpretation, planarConfiguration, primaryChromaticities, referenceBlackWhite, resolutionUnit, samplesPerPixel, software, transferFunction, whitePoint, xResolution, yResolution, yCbCrCoefficients, yCbCrPositioning, yCbCrSubSampling, nativeDigest);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tiff {\n");
    
    sb.append("    artist: ").append(toIndentedString(artist)).append("\n");
    sb.append("    bitsPerSample: ").append(toIndentedString(bitsPerSample)).append("\n");
    sb.append("    compression: ").append(toIndentedString(compression)).append("\n");
    sb.append("    copyright: ").append(toIndentedString(copyright)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    imageDescription: ").append(toIndentedString(imageDescription)).append("\n");
    sb.append("    imageLength: ").append(toIndentedString(imageLength)).append("\n");
    sb.append("    imageWidth: ").append(toIndentedString(imageWidth)).append("\n");
    sb.append("    make: ").append(toIndentedString(make)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    photometricInterpretation: ").append(toIndentedString(photometricInterpretation)).append("\n");
    sb.append("    planarConfiguration: ").append(toIndentedString(planarConfiguration)).append("\n");
    sb.append("    primaryChromaticities: ").append(toIndentedString(primaryChromaticities)).append("\n");
    sb.append("    referenceBlackWhite: ").append(toIndentedString(referenceBlackWhite)).append("\n");
    sb.append("    resolutionUnit: ").append(toIndentedString(resolutionUnit)).append("\n");
    sb.append("    samplesPerPixel: ").append(toIndentedString(samplesPerPixel)).append("\n");
    sb.append("    software: ").append(toIndentedString(software)).append("\n");
    sb.append("    transferFunction: ").append(toIndentedString(transferFunction)).append("\n");
    sb.append("    whitePoint: ").append(toIndentedString(whitePoint)).append("\n");
    sb.append("    xResolution: ").append(toIndentedString(xResolution)).append("\n");
    sb.append("    yResolution: ").append(toIndentedString(yResolution)).append("\n");
    sb.append("    yCbCrCoefficients: ").append(toIndentedString(yCbCrCoefficients)).append("\n");
    sb.append("    yCbCrPositioning: ").append(toIndentedString(yCbCrPositioning)).append("\n");
    sb.append("    yCbCrSubSampling: ").append(toIndentedString(yCbCrSubSampling)).append("\n");
    sb.append("    nativeDigest: ").append(toIndentedString(nativeDigest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

