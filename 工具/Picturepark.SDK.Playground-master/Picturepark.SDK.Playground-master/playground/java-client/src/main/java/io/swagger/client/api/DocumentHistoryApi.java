/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DocumentHistory;
import io.swagger.client.model.DocumentHistoryDifference;
import io.swagger.client.model.DocumentHistorySearchRequest;
import io.swagger.client.model.DocumentHistorySearchResult;
import io.swagger.client.model.PictureparkException;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentHistoryApi {
    private ApiClient apiClient;

    public DocumentHistoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentHistoryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for documentHistoryGet
     * @param id The id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentHistoryGetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/History/{Id}"
            .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentHistoryGetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentHistoryGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = documentHistoryGetCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a document history
     * 
     * @param id The id (required)
     * @return DocumentHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentHistory documentHistoryGet(String id) throws ApiException {
        ApiResponse<DocumentHistory> resp = documentHistoryGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets a document history
     * 
     * @param id The id (required)
     * @return ApiResponse&lt;DocumentHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentHistory> documentHistoryGetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = documentHistoryGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<DocumentHistory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a document history (asynchronously)
     * 
     * @param id The id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentHistoryGetAsync(String id, final ApiCallback<DocumentHistory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentHistoryGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentHistory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentHistoryGetDifference
     * @param id The id (required)
     * @param oldVersion The old version (required)
     * @param newVersion The new version (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentHistoryGetDifferenceCall(String id, Long oldVersion, Long newVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/History/{Id}/Difference/{OldVersion}/{NewVersion}"
            .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "OldVersion" + "\\}", apiClient.escapeString(oldVersion.toString()))
            .replaceAll("\\{" + "NewVersion" + "\\}", apiClient.escapeString(newVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentHistoryGetDifferenceValidateBeforeCall(String id, Long oldVersion, Long newVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentHistoryGetDifference(Async)");
        }
        
        // verify the required parameter 'oldVersion' is set
        if (oldVersion == null) {
            throw new ApiException("Missing the required parameter 'oldVersion' when calling documentHistoryGetDifference(Async)");
        }
        
        // verify the required parameter 'newVersion' is set
        if (newVersion == null) {
            throw new ApiException("Missing the required parameter 'newVersion' when calling documentHistoryGetDifference(Async)");
        }
        
        
        com.squareup.okhttp.Call call = documentHistoryGetDifferenceCall(id, oldVersion, newVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the difference between tho document history
     * 
     * @param id The id (required)
     * @param oldVersion The old version (required)
     * @param newVersion The new version (required)
     * @return DocumentHistoryDifference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentHistoryDifference documentHistoryGetDifference(String id, Long oldVersion, Long newVersion) throws ApiException {
        ApiResponse<DocumentHistoryDifference> resp = documentHistoryGetDifferenceWithHttpInfo(id, oldVersion, newVersion);
        return resp.getData();
    }

    /**
     * Get the difference between tho document history
     * 
     * @param id The id (required)
     * @param oldVersion The old version (required)
     * @param newVersion The new version (required)
     * @return ApiResponse&lt;DocumentHistoryDifference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentHistoryDifference> documentHistoryGetDifferenceWithHttpInfo(String id, Long oldVersion, Long newVersion) throws ApiException {
        com.squareup.okhttp.Call call = documentHistoryGetDifferenceValidateBeforeCall(id, oldVersion, newVersion, null, null);
        Type localVarReturnType = new TypeToken<DocumentHistoryDifference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the difference between tho document history (asynchronously)
     * 
     * @param id The id (required)
     * @param oldVersion The old version (required)
     * @param newVersion The new version (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentHistoryGetDifferenceAsync(String id, Long oldVersion, Long newVersion, final ApiCallback<DocumentHistoryDifference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentHistoryGetDifferenceValidateBeforeCall(id, oldVersion, newVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentHistoryDifference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentHistoryGetDifferenceLatest
     * @param id The id (required)
     * @param oldVersion The old version (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentHistoryGetDifferenceLatestCall(String id, Long oldVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/History/{Id}/Difference/{OldVersion}"
            .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "OldVersion" + "\\}", apiClient.escapeString(oldVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentHistoryGetDifferenceLatestValidateBeforeCall(String id, Long oldVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentHistoryGetDifferenceLatest(Async)");
        }
        
        // verify the required parameter 'oldVersion' is set
        if (oldVersion == null) {
            throw new ApiException("Missing the required parameter 'oldVersion' when calling documentHistoryGetDifferenceLatest(Async)");
        }
        
        
        com.squareup.okhttp.Call call = documentHistoryGetDifferenceLatestCall(id, oldVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get latest difference of document history
     * 
     * @param id The id (required)
     * @param oldVersion The old version (required)
     * @return DocumentHistoryDifference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentHistoryDifference documentHistoryGetDifferenceLatest(String id, Long oldVersion) throws ApiException {
        ApiResponse<DocumentHistoryDifference> resp = documentHistoryGetDifferenceLatestWithHttpInfo(id, oldVersion);
        return resp.getData();
    }

    /**
     * Get latest difference of document history
     * 
     * @param id The id (required)
     * @param oldVersion The old version (required)
     * @return ApiResponse&lt;DocumentHistoryDifference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentHistoryDifference> documentHistoryGetDifferenceLatestWithHttpInfo(String id, Long oldVersion) throws ApiException {
        com.squareup.okhttp.Call call = documentHistoryGetDifferenceLatestValidateBeforeCall(id, oldVersion, null, null);
        Type localVarReturnType = new TypeToken<DocumentHistoryDifference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get latest difference of document history (asynchronously)
     * 
     * @param id The id (required)
     * @param oldVersion The old version (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentHistoryGetDifferenceLatestAsync(String id, Long oldVersion, final ApiCallback<DocumentHistoryDifference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentHistoryGetDifferenceLatestValidateBeforeCall(id, oldVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentHistoryDifference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentHistoryGetVersion
     * @param id The id (required)
     * @param version The version (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentHistoryGetVersionCall(String id, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/History/{Id}/{Version}"
            .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "Version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentHistoryGetVersionValidateBeforeCall(String id, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentHistoryGetVersion(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling documentHistoryGetVersion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = documentHistoryGetVersionCall(id, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get document history version
     * 
     * @param id The id (required)
     * @param version The version (required)
     * @return DocumentHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentHistory documentHistoryGetVersion(String id, String version) throws ApiException {
        ApiResponse<DocumentHistory> resp = documentHistoryGetVersionWithHttpInfo(id, version);
        return resp.getData();
    }

    /**
     * Get document history version
     * 
     * @param id The id (required)
     * @param version The version (required)
     * @return ApiResponse&lt;DocumentHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentHistory> documentHistoryGetVersionWithHttpInfo(String id, String version) throws ApiException {
        com.squareup.okhttp.Call call = documentHistoryGetVersionValidateBeforeCall(id, version, null, null);
        Type localVarReturnType = new TypeToken<DocumentHistory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get document history version (asynchronously)
     * 
     * @param id The id (required)
     * @param version The version (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentHistoryGetVersionAsync(String id, String version, final ApiCallback<DocumentHistory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentHistoryGetVersionValidateBeforeCall(id, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentHistory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentHistorySearch
     * @param documentHistorySearchRequest The document history search request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentHistorySearchCall(DocumentHistorySearchRequest documentHistorySearchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = documentHistorySearchRequest;
        
        // create path and map variables
        String localVarPath = "/V1/History/Search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentHistorySearchValidateBeforeCall(DocumentHistorySearchRequest documentHistorySearchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'documentHistorySearchRequest' is set
        if (documentHistorySearchRequest == null) {
            throw new ApiException("Missing the required parameter 'documentHistorySearchRequest' when calling documentHistorySearch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = documentHistorySearchCall(documentHistorySearchRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search for document history
     * 
     * @param documentHistorySearchRequest The document history search request (required)
     * @return DocumentHistorySearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentHistorySearchResult documentHistorySearch(DocumentHistorySearchRequest documentHistorySearchRequest) throws ApiException {
        ApiResponse<DocumentHistorySearchResult> resp = documentHistorySearchWithHttpInfo(documentHistorySearchRequest);
        return resp.getData();
    }

    /**
     * Search for document history
     * 
     * @param documentHistorySearchRequest The document history search request (required)
     * @return ApiResponse&lt;DocumentHistorySearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentHistorySearchResult> documentHistorySearchWithHttpInfo(DocumentHistorySearchRequest documentHistorySearchRequest) throws ApiException {
        com.squareup.okhttp.Call call = documentHistorySearchValidateBeforeCall(documentHistorySearchRequest, null, null);
        Type localVarReturnType = new TypeToken<DocumentHistorySearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search for document history (asynchronously)
     * 
     * @param documentHistorySearchRequest The document history search request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentHistorySearchAsync(DocumentHistorySearchRequest documentHistorySearchRequest, final ApiCallback<DocumentHistorySearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentHistorySearchValidateBeforeCall(documentHistorySearchRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentHistorySearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
