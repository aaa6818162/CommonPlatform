/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Blacklist;
import io.swagger.client.model.CreateTransferRequest;
import java.io.File;
import io.swagger.client.model.FileTransfer2ContentCreateRequest;
import io.swagger.client.model.FileTransferDeleteRequest;
import io.swagger.client.model.FileTransferDetail;
import io.swagger.client.model.FileTransferPartial2ContentCreateRequest;
import io.swagger.client.model.FileTransferSearchRequest;
import io.swagger.client.model.FileTransferSearchResult;
import io.swagger.client.model.PictureparkException;
import io.swagger.client.model.Transfer;
import io.swagger.client.model.TransferDetail;
import io.swagger.client.model.TransferSearchRequest;
import io.swagger.client.model.TransferSearchResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransferApi {
    private ApiClient apiClient;

    public TransferApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransferApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for transferCancelTransfer
     * @param transferId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferCancelTransferCall(String transferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Transfers/{TransferId}/Cancel"
            .replaceAll("\\{" + "TransferId" + "\\}", apiClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferCancelTransferValidateBeforeCall(String transferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transferId' is set
        if (transferId == null) {
            throw new ApiException("Missing the required parameter 'transferId' when calling transferCancelTransfer(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transferCancelTransferCall(transferId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancels an active transfer. Valid states: TODO
     * 
     * @param transferId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void transferCancelTransfer(String transferId) throws ApiException {
        transferCancelTransferWithHttpInfo(transferId);
    }

    /**
     * Cancels an active transfer. Valid states: TODO
     * 
     * @param transferId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> transferCancelTransferWithHttpInfo(String transferId) throws ApiException {
        com.squareup.okhttp.Call call = transferCancelTransferValidateBeforeCall(transferId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Cancels an active transfer. Valid states: TODO (asynchronously)
     * 
     * @param transferId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferCancelTransferAsync(String transferId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferCancelTransferValidateBeforeCall(transferId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for transferCreate
     * @param request The create transfer request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferCreateCall(CreateTransferRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/V1/Transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferCreateValidateBeforeCall(CreateTransferRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling transferCreate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transferCreateCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Transfer
     * 
     * @param request The create transfer request (required)
     * @return Transfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Transfer transferCreate(CreateTransferRequest request) throws ApiException {
        ApiResponse<Transfer> resp = transferCreateWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Create Transfer
     * 
     * @param request The create transfer request (required)
     * @return ApiResponse&lt;Transfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Transfer> transferCreateWithHttpInfo(CreateTransferRequest request) throws ApiException {
        com.squareup.okhttp.Call call = transferCreateValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Transfer (asynchronously)
     * 
     * @param request The create transfer request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferCreateAsync(CreateTransferRequest request, final ApiCallback<Transfer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferCreateValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferDelete
     * @param transferId The tranfer id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferDeleteCall(String transferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Transfers/{TransferId}"
            .replaceAll("\\{" + "TransferId" + "\\}", apiClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferDeleteValidateBeforeCall(String transferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transferId' is set
        if (transferId == null) {
            throw new ApiException("Missing the required parameter 'transferId' when calling transferDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transferDeleteCall(transferId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Transfer
     * 
     * @param transferId The tranfer id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void transferDelete(String transferId) throws ApiException {
        transferDeleteWithHttpInfo(transferId);
    }

    /**
     * Delete Transfer
     * 
     * @param transferId The tranfer id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> transferDeleteWithHttpInfo(String transferId) throws ApiException {
        com.squareup.okhttp.Call call = transferDeleteValidateBeforeCall(transferId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Transfer (asynchronously)
     * 
     * @param transferId The tranfer id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferDeleteAsync(String transferId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferDeleteValidateBeforeCall(transferId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for transferDeleteFiles
     * @param request The filetransfer delete request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferDeleteFilesCall(FileTransferDeleteRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/V1/Transfers/Files/Delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferDeleteFilesValidateBeforeCall(FileTransferDeleteRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling transferDeleteFiles(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transferDeleteFilesCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Files
     * 
     * @param request The filetransfer delete request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void transferDeleteFiles(FileTransferDeleteRequest request) throws ApiException {
        transferDeleteFilesWithHttpInfo(request);
    }

    /**
     * Delete Files
     * 
     * @param request The filetransfer delete request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> transferDeleteFilesWithHttpInfo(FileTransferDeleteRequest request) throws ApiException {
        com.squareup.okhttp.Call call = transferDeleteFilesValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Files (asynchronously)
     * 
     * @param request The filetransfer delete request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferDeleteFilesAsync(FileTransferDeleteRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferDeleteFilesValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for transferGet
     * @param transferId The tranfer id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferGetCall(String transferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Transfers/{TransferId}"
            .replaceAll("\\{" + "TransferId" + "\\}", apiClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferGetValidateBeforeCall(String transferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transferId' is set
        if (transferId == null) {
            throw new ApiException("Missing the required parameter 'transferId' when calling transferGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transferGetCall(transferId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Transferdetail
     * 
     * @param transferId The tranfer id (required)
     * @return TransferDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransferDetail transferGet(String transferId) throws ApiException {
        ApiResponse<TransferDetail> resp = transferGetWithHttpInfo(transferId);
        return resp.getData();
    }

    /**
     * Get Transferdetail
     * 
     * @param transferId The tranfer id (required)
     * @return ApiResponse&lt;TransferDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransferDetail> transferGetWithHttpInfo(String transferId) throws ApiException {
        com.squareup.okhttp.Call call = transferGetValidateBeforeCall(transferId, null, null);
        Type localVarReturnType = new TypeToken<TransferDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Transferdetail (asynchronously)
     * 
     * @param transferId The tranfer id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferGetAsync(String transferId, final ApiCallback<TransferDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferGetValidateBeforeCall(transferId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransferDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferGetBlacklist
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferGetBlacklistCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Transfers/Files/Blacklist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferGetBlacklistValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = transferGetBlacklistCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Blacklist
     * 
     * @return Blacklist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Blacklist transferGetBlacklist() throws ApiException {
        ApiResponse<Blacklist> resp = transferGetBlacklistWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Blacklist
     * 
     * @return ApiResponse&lt;Blacklist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Blacklist> transferGetBlacklistWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = transferGetBlacklistValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Blacklist>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Blacklist (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferGetBlacklistAsync(final ApiCallback<Blacklist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferGetBlacklistValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Blacklist>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferGetFile
     * @param fileTransferId The filetransfer id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferGetFileCall(String fileTransferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Transfers/Files/{FileTransferId}"
            .replaceAll("\\{" + "FileTransferId" + "\\}", apiClient.escapeString(fileTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferGetFileValidateBeforeCall(String fileTransferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fileTransferId' is set
        if (fileTransferId == null) {
            throw new ApiException("Missing the required parameter 'fileTransferId' when calling transferGetFile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transferGetFileCall(fileTransferId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get File
     * 
     * @param fileTransferId The filetransfer id (required)
     * @return FileTransferDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileTransferDetail transferGetFile(String fileTransferId) throws ApiException {
        ApiResponse<FileTransferDetail> resp = transferGetFileWithHttpInfo(fileTransferId);
        return resp.getData();
    }

    /**
     * Get File
     * 
     * @param fileTransferId The filetransfer id (required)
     * @return ApiResponse&lt;FileTransferDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileTransferDetail> transferGetFileWithHttpInfo(String fileTransferId) throws ApiException {
        com.squareup.okhttp.Call call = transferGetFileValidateBeforeCall(fileTransferId, null, null);
        Type localVarReturnType = new TypeToken<FileTransferDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get File (asynchronously)
     * 
     * @param fileTransferId The filetransfer id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferGetFileAsync(String fileTransferId, final ApiCallback<FileTransferDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferGetFileValidateBeforeCall(fileTransferId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileTransferDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferImportTransfer
     * @param transferId The tranfer id (required)
     * @param request The filetransfer to content create request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferImportTransferCall(String transferId, FileTransfer2ContentCreateRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/V1/Transfers/{TransferId}/Import"
            .replaceAll("\\{" + "TransferId" + "\\}", apiClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferImportTransferValidateBeforeCall(String transferId, FileTransfer2ContentCreateRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transferId' is set
        if (transferId == null) {
            throw new ApiException("Missing the required parameter 'transferId' when calling transferImportTransfer(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling transferImportTransfer(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transferImportTransferCall(transferId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Transfer
     * 
     * @param transferId The tranfer id (required)
     * @param request The filetransfer to content create request (required)
     * @return Transfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Transfer transferImportTransfer(String transferId, FileTransfer2ContentCreateRequest request) throws ApiException {
        ApiResponse<Transfer> resp = transferImportTransferWithHttpInfo(transferId, request);
        return resp.getData();
    }

    /**
     * Delete Transfer
     * 
     * @param transferId The tranfer id (required)
     * @param request The filetransfer to content create request (required)
     * @return ApiResponse&lt;Transfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Transfer> transferImportTransferWithHttpInfo(String transferId, FileTransfer2ContentCreateRequest request) throws ApiException {
        com.squareup.okhttp.Call call = transferImportTransferValidateBeforeCall(transferId, request, null, null);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Transfer (asynchronously)
     * 
     * @param transferId The tranfer id (required)
     * @param request The filetransfer to content create request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferImportTransferAsync(String transferId, FileTransfer2ContentCreateRequest request, final ApiCallback<Transfer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferImportTransferValidateBeforeCall(transferId, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferPartialImport
     * @param transferId The transfer id (required)
     * @param request The filetransfer partial to content create request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferPartialImportCall(String transferId, FileTransferPartial2ContentCreateRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/V1/Transfers/{TransferId}/PartialImport"
            .replaceAll("\\{" + "TransferId" + "\\}", apiClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferPartialImportValidateBeforeCall(String transferId, FileTransferPartial2ContentCreateRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transferId' is set
        if (transferId == null) {
            throw new ApiException("Missing the required parameter 'transferId' when calling transferPartialImport(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling transferPartialImport(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transferPartialImportCall(transferId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a partial import
     * 
     * @param transferId The transfer id (required)
     * @param request The filetransfer partial to content create request (required)
     * @return Transfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Transfer transferPartialImport(String transferId, FileTransferPartial2ContentCreateRequest request) throws ApiException {
        ApiResponse<Transfer> resp = transferPartialImportWithHttpInfo(transferId, request);
        return resp.getData();
    }

    /**
     * Create a partial import
     * 
     * @param transferId The transfer id (required)
     * @param request The filetransfer partial to content create request (required)
     * @return ApiResponse&lt;Transfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Transfer> transferPartialImportWithHttpInfo(String transferId, FileTransferPartial2ContentCreateRequest request) throws ApiException {
        com.squareup.okhttp.Call call = transferPartialImportValidateBeforeCall(transferId, request, null, null);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a partial import (asynchronously)
     * 
     * @param transferId The transfer id (required)
     * @param request The filetransfer partial to content create request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferPartialImportAsync(String transferId, FileTransferPartial2ContentCreateRequest request, final ApiCallback<Transfer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferPartialImportValidateBeforeCall(transferId, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferSearch
     * @param request The transfer search request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferSearchCall(TransferSearchRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/V1/Transfers/Search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferSearchValidateBeforeCall(TransferSearchRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling transferSearch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transferSearchCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search 
     * 
     * @param request The transfer search request (required)
     * @return TransferSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransferSearchResult transferSearch(TransferSearchRequest request) throws ApiException {
        ApiResponse<TransferSearchResult> resp = transferSearchWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Search 
     * 
     * @param request The transfer search request (required)
     * @return ApiResponse&lt;TransferSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransferSearchResult> transferSearchWithHttpInfo(TransferSearchRequest request) throws ApiException {
        com.squareup.okhttp.Call call = transferSearchValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TransferSearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search  (asynchronously)
     * 
     * @param request The transfer search request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferSearchAsync(TransferSearchRequest request, final ApiCallback<TransferSearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferSearchValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransferSearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferSearchFiles
     * @param request The file transfer search request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferSearchFilesCall(FileTransferSearchRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/V1/Transfers/Files/Search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferSearchFilesValidateBeforeCall(FileTransferSearchRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling transferSearchFiles(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transferSearchFilesCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search for files
     * 
     * @param request The file transfer search request (required)
     * @return FileTransferSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileTransferSearchResult transferSearchFiles(FileTransferSearchRequest request) throws ApiException {
        ApiResponse<FileTransferSearchResult> resp = transferSearchFilesWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Search for files
     * 
     * @param request The file transfer search request (required)
     * @return ApiResponse&lt;FileTransferSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileTransferSearchResult> transferSearchFilesWithHttpInfo(FileTransferSearchRequest request) throws ApiException {
        com.squareup.okhttp.Call call = transferSearchFilesValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<FileTransferSearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search for files (asynchronously)
     * 
     * @param request The file transfer search request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferSearchFilesAsync(FileTransferSearchRequest request, final ApiCallback<FileTransferSearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferSearchFilesValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileTransferSearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferUploadFile
     * @param transferId  (required)
     * @param identifier  (required)
     * @param formFile Gets or sets the form file. (optional)
     * @param relativePath Relative path of the uploading file (optional)
     * @param chunkNumber Current chunk number. starts with 1 (optional)
     * @param currentChunkSize Size in bytes of the current chunk (optional)
     * @param totalSize Total size in bytes of the uploading file (optional)
     * @param totalChunks Total chunks of the uploading file (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferUploadFileCall(String transferId, String identifier, File formFile, String relativePath, Long chunkNumber, Long currentChunkSize, Long totalSize, Long totalChunks, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Transfers/{TransferId}/Files/{Identifier}/Upload"
            .replaceAll("\\{" + "TransferId" + "\\}", apiClient.escapeString(transferId.toString()))
            .replaceAll("\\{" + "Identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (relativePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "relativePath", relativePath));
        if (chunkNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "chunkNumber", chunkNumber));
        if (currentChunkSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "currentChunkSize", currentChunkSize));
        if (totalSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalSize", totalSize));
        if (totalChunks != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalChunks", totalChunks));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (formFile != null)
        localVarFormParams.put("formFile", formFile);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferUploadFileValidateBeforeCall(String transferId, String identifier, File formFile, String relativePath, Long chunkNumber, Long currentChunkSize, Long totalSize, Long totalChunks, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transferId' is set
        if (transferId == null) {
            throw new ApiException("Missing the required parameter 'transferId' when calling transferUploadFile(Async)");
        }
        
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling transferUploadFile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transferUploadFileCall(transferId, identifier, formFile, relativePath, chunkNumber, currentChunkSize, totalSize, totalChunks, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param transferId  (required)
     * @param identifier  (required)
     * @param formFile Gets or sets the form file. (optional)
     * @param relativePath Relative path of the uploading file (optional)
     * @param chunkNumber Current chunk number. starts with 1 (optional)
     * @param currentChunkSize Size in bytes of the current chunk (optional)
     * @param totalSize Total size in bytes of the uploading file (optional)
     * @param totalChunks Total chunks of the uploading file (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void transferUploadFile(String transferId, String identifier, File formFile, String relativePath, Long chunkNumber, Long currentChunkSize, Long totalSize, Long totalChunks) throws ApiException {
        transferUploadFileWithHttpInfo(transferId, identifier, formFile, relativePath, chunkNumber, currentChunkSize, totalSize, totalChunks);
    }

    /**
     * 
     * 
     * @param transferId  (required)
     * @param identifier  (required)
     * @param formFile Gets or sets the form file. (optional)
     * @param relativePath Relative path of the uploading file (optional)
     * @param chunkNumber Current chunk number. starts with 1 (optional)
     * @param currentChunkSize Size in bytes of the current chunk (optional)
     * @param totalSize Total size in bytes of the uploading file (optional)
     * @param totalChunks Total chunks of the uploading file (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> transferUploadFileWithHttpInfo(String transferId, String identifier, File formFile, String relativePath, Long chunkNumber, Long currentChunkSize, Long totalSize, Long totalChunks) throws ApiException {
        com.squareup.okhttp.Call call = transferUploadFileValidateBeforeCall(transferId, identifier, formFile, relativePath, chunkNumber, currentChunkSize, totalSize, totalChunks, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param transferId  (required)
     * @param identifier  (required)
     * @param formFile Gets or sets the form file. (optional)
     * @param relativePath Relative path of the uploading file (optional)
     * @param chunkNumber Current chunk number. starts with 1 (optional)
     * @param currentChunkSize Size in bytes of the current chunk (optional)
     * @param totalSize Total size in bytes of the uploading file (optional)
     * @param totalChunks Total chunks of the uploading file (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferUploadFileAsync(String transferId, String identifier, File formFile, String relativePath, Long chunkNumber, Long currentChunkSize, Long totalSize, Long totalChunks, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferUploadFileValidateBeforeCall(transferId, identifier, formFile, relativePath, chunkNumber, currentChunkSize, totalSize, totalChunks, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
