/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ContentPermissionSetDetail;
import io.swagger.client.model.PermissionSetSearchRequest;
import io.swagger.client.model.PermissionSetSearchResult;
import io.swagger.client.model.PictureparkException;
import io.swagger.client.model.SchemaPermissionSetDetail;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PermissionApi {
    private ApiClient apiClient;

    public PermissionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PermissionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for permissionGetContentPermissions
     * @param permissionSetId The content permission set id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call permissionGetContentPermissionsCall(String permissionSetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Permission/ContentPermissionSets/{PermissionSetId}"
            .replaceAll("\\{" + "PermissionSetId" + "\\}", apiClient.escapeString(permissionSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call permissionGetContentPermissionsValidateBeforeCall(String permissionSetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'permissionSetId' is set
        if (permissionSetId == null) {
            throw new ApiException("Missing the required parameter 'permissionSetId' when calling permissionGetContentPermissions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = permissionGetContentPermissionsCall(permissionSetId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Content Permission Single
     * Gets the content permission set detail information by the content permission set id.
     * @param permissionSetId The content permission set id. (required)
     * @return ContentPermissionSetDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentPermissionSetDetail permissionGetContentPermissions(String permissionSetId) throws ApiException {
        ApiResponse<ContentPermissionSetDetail> resp = permissionGetContentPermissionsWithHttpInfo(permissionSetId);
        return resp.getData();
    }

    /**
     * Get Content Permission Single
     * Gets the content permission set detail information by the content permission set id.
     * @param permissionSetId The content permission set id. (required)
     * @return ApiResponse&lt;ContentPermissionSetDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentPermissionSetDetail> permissionGetContentPermissionsWithHttpInfo(String permissionSetId) throws ApiException {
        com.squareup.okhttp.Call call = permissionGetContentPermissionsValidateBeforeCall(permissionSetId, null, null);
        Type localVarReturnType = new TypeToken<ContentPermissionSetDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Content Permission Single (asynchronously)
     * Gets the content permission set detail information by the content permission set id.
     * @param permissionSetId The content permission set id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call permissionGetContentPermissionsAsync(String permissionSetId, final ApiCallback<ContentPermissionSetDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = permissionGetContentPermissionsValidateBeforeCall(permissionSetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentPermissionSetDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for permissionGetSchemaPermissions
     * @param permissionSetId The schema permission set id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call permissionGetSchemaPermissionsCall(String permissionSetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Permission/SchemaPermissionSets/{PermissionSetId}"
            .replaceAll("\\{" + "PermissionSetId" + "\\}", apiClient.escapeString(permissionSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call permissionGetSchemaPermissionsValidateBeforeCall(String permissionSetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'permissionSetId' is set
        if (permissionSetId == null) {
            throw new ApiException("Missing the required parameter 'permissionSetId' when calling permissionGetSchemaPermissions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = permissionGetSchemaPermissionsCall(permissionSetId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Schema Permission Single
     * Gets the schema permission set detail information by the schema permission set id.
     * @param permissionSetId The schema permission set id. (required)
     * @return SchemaPermissionSetDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemaPermissionSetDetail permissionGetSchemaPermissions(String permissionSetId) throws ApiException {
        ApiResponse<SchemaPermissionSetDetail> resp = permissionGetSchemaPermissionsWithHttpInfo(permissionSetId);
        return resp.getData();
    }

    /**
     * Get Schema Permission Single
     * Gets the schema permission set detail information by the schema permission set id.
     * @param permissionSetId The schema permission set id. (required)
     * @return ApiResponse&lt;SchemaPermissionSetDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemaPermissionSetDetail> permissionGetSchemaPermissionsWithHttpInfo(String permissionSetId) throws ApiException {
        com.squareup.okhttp.Call call = permissionGetSchemaPermissionsValidateBeforeCall(permissionSetId, null, null);
        Type localVarReturnType = new TypeToken<SchemaPermissionSetDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Schema Permission Single (asynchronously)
     * Gets the schema permission set detail information by the schema permission set id.
     * @param permissionSetId The schema permission set id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call permissionGetSchemaPermissionsAsync(String permissionSetId, final ApiCallback<SchemaPermissionSetDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = permissionGetSchemaPermissionsValidateBeforeCall(permissionSetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemaPermissionSetDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for permissionGetUserPermissions
     * @param permission The UserRight to validate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call permissionGetUserPermissionsCall(String permission, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Permission/UserPermissions/{Permission}"
            .replaceAll("\\{" + "Permission" + "\\}", apiClient.escapeString(permission.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call permissionGetUserPermissionsValidateBeforeCall(String permission, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'permission' is set
        if (permission == null) {
            throw new ApiException("Missing the required parameter 'permission' when calling permissionGetUserPermissions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = permissionGetUserPermissionsCall(permission, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get UserRight validation result
     * Validates if the User has a given UserRight
     * @param permission The UserRight to validate (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean permissionGetUserPermissions(String permission) throws ApiException {
        ApiResponse<Boolean> resp = permissionGetUserPermissionsWithHttpInfo(permission);
        return resp.getData();
    }

    /**
     * Get UserRight validation result
     * Validates if the User has a given UserRight
     * @param permission The UserRight to validate (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> permissionGetUserPermissionsWithHttpInfo(String permission) throws ApiException {
        com.squareup.okhttp.Call call = permissionGetUserPermissionsValidateBeforeCall(permission, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get UserRight validation result (asynchronously)
     * Validates if the User has a given UserRight
     * @param permission The UserRight to validate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call permissionGetUserPermissionsAsync(String permission, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = permissionGetUserPermissionsValidateBeforeCall(permission, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for permissionSearchContentPermissions
     * @param request The permission search request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call permissionSearchContentPermissionsCall(PermissionSetSearchRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/V1/Permission/ContentPermissionSets/Search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call permissionSearchContentPermissionsValidateBeforeCall(PermissionSetSearchRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling permissionSearchContentPermissions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = permissionSearchContentPermissionsCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search Content Permissions
     * Searches content permission sets as specified in the search request.
     * @param request The permission search request. (required)
     * @return PermissionSetSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PermissionSetSearchResult permissionSearchContentPermissions(PermissionSetSearchRequest request) throws ApiException {
        ApiResponse<PermissionSetSearchResult> resp = permissionSearchContentPermissionsWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Search Content Permissions
     * Searches content permission sets as specified in the search request.
     * @param request The permission search request. (required)
     * @return ApiResponse&lt;PermissionSetSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PermissionSetSearchResult> permissionSearchContentPermissionsWithHttpInfo(PermissionSetSearchRequest request) throws ApiException {
        com.squareup.okhttp.Call call = permissionSearchContentPermissionsValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<PermissionSetSearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search Content Permissions (asynchronously)
     * Searches content permission sets as specified in the search request.
     * @param request The permission search request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call permissionSearchContentPermissionsAsync(PermissionSetSearchRequest request, final ApiCallback<PermissionSetSearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = permissionSearchContentPermissionsValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PermissionSetSearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for permissionSearchSchemaPermissions
     * @param request The permission search request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call permissionSearchSchemaPermissionsCall(PermissionSetSearchRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/V1/Permission/SchemaPermissionSets/Search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call permissionSearchSchemaPermissionsValidateBeforeCall(PermissionSetSearchRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling permissionSearchSchemaPermissions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = permissionSearchSchemaPermissionsCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search Schema Permissions
     * Searches schema permission sets as specified in the search request.
     * @param request The permission search request. (required)
     * @return PermissionSetSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PermissionSetSearchResult permissionSearchSchemaPermissions(PermissionSetSearchRequest request) throws ApiException {
        ApiResponse<PermissionSetSearchResult> resp = permissionSearchSchemaPermissionsWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Search Schema Permissions
     * Searches schema permission sets as specified in the search request.
     * @param request The permission search request. (required)
     * @return ApiResponse&lt;PermissionSetSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PermissionSetSearchResult> permissionSearchSchemaPermissionsWithHttpInfo(PermissionSetSearchRequest request) throws ApiException {
        com.squareup.okhttp.Call call = permissionSearchSchemaPermissionsValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<PermissionSetSearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search Schema Permissions (asynchronously)
     * Searches schema permission sets as specified in the search request.
     * @param request The permission search request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call permissionSearchSchemaPermissionsAsync(PermissionSetSearchRequest request, final ApiCallback<PermissionSetSearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = permissionSearchSchemaPermissionsValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PermissionSetSearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
