/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.FilterBase;
import io.swagger.client.model.TargetContext;
import io.swagger.client.model.TranslatedStringDictionary;
import java.io.IOException;

/**
 * RelationType
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-04T14:36:42.044Z")
public class RelationType {
  @SerializedName("id")
  private String id = null;

  @SerializedName("names")
  private TranslatedStringDictionary names = null;

  @SerializedName("targetContext")
  private TargetContext targetContext = null;

  @SerializedName("schemaId")
  private String schemaId = null;

  @SerializedName("filter")
  private FilterBase filter = null;

  public RelationType id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public RelationType names(TranslatedStringDictionary names) {
    this.names = names;
    return this;
  }

   /**
   * Get names
   * @return names
  **/
  @ApiModelProperty(value = "")
  public TranslatedStringDictionary getNames() {
    return names;
  }

  public void setNames(TranslatedStringDictionary names) {
    this.names = names;
  }

  public RelationType targetContext(TargetContext targetContext) {
    this.targetContext = targetContext;
    return this;
  }

   /**
   * Get targetContext
   * @return targetContext
  **/
  @ApiModelProperty(required = true, value = "")
  public TargetContext getTargetContext() {
    return targetContext;
  }

  public void setTargetContext(TargetContext targetContext) {
    this.targetContext = targetContext;
  }

  public RelationType schemaId(String schemaId) {
    this.schemaId = schemaId;
    return this;
  }

   /**
   * Get schemaId
   * @return schemaId
  **/
  @ApiModelProperty(value = "")
  public String getSchemaId() {
    return schemaId;
  }

  public void setSchemaId(String schemaId) {
    this.schemaId = schemaId;
  }

  public RelationType filter(FilterBase filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @ApiModelProperty(value = "")
  public FilterBase getFilter() {
    return filter;
  }

  public void setFilter(FilterBase filter) {
    this.filter = filter;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelationType relationType = (RelationType) o;
    return Objects.equals(this.id, relationType.id) &&
        Objects.equals(this.names, relationType.names) &&
        Objects.equals(this.targetContext, relationType.targetContext) &&
        Objects.equals(this.schemaId, relationType.schemaId) &&
        Objects.equals(this.filter, relationType.filter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, names, targetContext, schemaId, filter);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelationType {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    targetContext: ").append(toIndentedString(targetContext)).append("\n");
    sb.append("    schemaId: ").append(toIndentedString(schemaId)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

