/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.AggregatorBase;
import io.swagger.client.model.EntityType;
import io.swagger.client.model.SortInfo;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Channel
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-04T14:36:42.044Z")
public class Channel {
  @SerializedName("id")
  private String id = null;

  @SerializedName("sortOrder")
  private Integer sortOrder = null;

  @SerializedName("searchIndexId")
  private String searchIndexId = null;

  @SerializedName("entityType")
  private EntityType entityType = null;

  @SerializedName("schemaIds")
  private List<String> schemaIds = null;

  @SerializedName("sort")
  private List<SortInfo> sort = null;

  @SerializedName("aggregations")
  private List<AggregatorBase> aggregations = null;

  @SerializedName("extendedSimpleSearchFields")
  private List<String> extendedSimpleSearchFields = null;

  public Channel id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Channel sortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

   /**
   * Get sortOrder
   * @return sortOrder
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
  }

  public Channel searchIndexId(String searchIndexId) {
    this.searchIndexId = searchIndexId;
    return this;
  }

   /**
   * The search index id.
   * @return searchIndexId
  **/
  @ApiModelProperty(value = "The search index id.")
  public String getSearchIndexId() {
    return searchIndexId;
  }

  public void setSearchIndexId(String searchIndexId) {
    this.searchIndexId = searchIndexId;
  }

  public Channel entityType(EntityType entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @ApiModelProperty(required = true, value = "")
  public EntityType getEntityType() {
    return entityType;
  }

  public void setEntityType(EntityType entityType) {
    this.entityType = entityType;
  }

  public Channel schemaIds(List<String> schemaIds) {
    this.schemaIds = schemaIds;
    return this;
  }

  public Channel addSchemaIdsItem(String schemaIdsItem) {
    if (this.schemaIds == null) {
      this.schemaIds = new ArrayList<String>();
    }
    this.schemaIds.add(schemaIdsItem);
    return this;
  }

   /**
   * An id list of schemas with schema type content whose content documents should be found by the simple search. The search by filters and aggregations are unaffected.
   * @return schemaIds
  **/
  @ApiModelProperty(value = "An id list of schemas with schema type content whose content documents should be found by the simple search. The search by filters and aggregations are unaffected.")
  public List<String> getSchemaIds() {
    return schemaIds;
  }

  public void setSchemaIds(List<String> schemaIds) {
    this.schemaIds = schemaIds;
  }

  public Channel sort(List<SortInfo> sort) {
    this.sort = sort;
    return this;
  }

  public Channel addSortItem(SortInfo sortItem) {
    if (this.sort == null) {
      this.sort = new ArrayList<SortInfo>();
    }
    this.sort.add(sortItem);
    return this;
  }

   /**
   * Get sort
   * @return sort
  **/
  @ApiModelProperty(value = "")
  public List<SortInfo> getSort() {
    return sort;
  }

  public void setSort(List<SortInfo> sort) {
    this.sort = sort;
  }

  public Channel aggregations(List<AggregatorBase> aggregations) {
    this.aggregations = aggregations;
    return this;
  }

  public Channel addAggregationsItem(AggregatorBase aggregationsItem) {
    if (this.aggregations == null) {
      this.aggregations = new ArrayList<AggregatorBase>();
    }
    this.aggregations.add(aggregationsItem);
    return this;
  }

   /**
   * An optional list of aggregators. These aggregations are added by default on each aggregation requests.
   * @return aggregations
  **/
  @ApiModelProperty(value = "An optional list of aggregators. These aggregations are added by default on each aggregation requests.")
  public List<AggregatorBase> getAggregations() {
    return aggregations;
  }

  public void setAggregations(List<AggregatorBase> aggregations) {
    this.aggregations = aggregations;
  }

  public Channel extendedSimpleSearchFields(List<String> extendedSimpleSearchFields) {
    this.extendedSimpleSearchFields = extendedSimpleSearchFields;
    return this;
  }

  public Channel addExtendedSimpleSearchFieldsItem(String extendedSimpleSearchFieldsItem) {
    if (this.extendedSimpleSearchFields == null) {
      this.extendedSimpleSearchFields = new ArrayList<String>();
    }
    this.extendedSimpleSearchFields.add(extendedSimpleSearchFieldsItem);
    return this;
  }

   /**
   * An Optional list of fields. These fields extend the list of simple search fields outside the bounds of any schema field configuration.
   * @return extendedSimpleSearchFields
  **/
  @ApiModelProperty(value = "An Optional list of fields. These fields extend the list of simple search fields outside the bounds of any schema field configuration.")
  public List<String> getExtendedSimpleSearchFields() {
    return extendedSimpleSearchFields;
  }

  public void setExtendedSimpleSearchFields(List<String> extendedSimpleSearchFields) {
    this.extendedSimpleSearchFields = extendedSimpleSearchFields;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Channel channel = (Channel) o;
    return Objects.equals(this.id, channel.id) &&
        Objects.equals(this.sortOrder, channel.sortOrder) &&
        Objects.equals(this.searchIndexId, channel.searchIndexId) &&
        Objects.equals(this.entityType, channel.entityType) &&
        Objects.equals(this.schemaIds, channel.schemaIds) &&
        Objects.equals(this.sort, channel.sort) &&
        Objects.equals(this.aggregations, channel.aggregations) &&
        Objects.equals(this.extendedSimpleSearchFields, channel.extendedSimpleSearchFields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, sortOrder, searchIndexId, entityType, schemaIds, sort, aggregations, extendedSimpleSearchFields);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Channel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    searchIndexId: ").append(toIndentedString(searchIndexId)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    schemaIds: ").append(toIndentedString(schemaIds)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    aggregations: ").append(toIndentedString(aggregations)).append("\n");
    sb.append("    extendedSimpleSearchFields: ").append(toIndentedString(extendedSimpleSearchFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

