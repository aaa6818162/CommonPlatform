/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BusinessProcess;
import io.swagger.client.model.ExistsResponse;
import io.swagger.client.model.PictureparkException;
import io.swagger.client.model.SchemaCreateRequest;
import io.swagger.client.model.SchemaDetail;
import io.swagger.client.model.SchemaSearchRequest;
import io.swagger.client.model.SchemaSearchResult;
import io.swagger.client.model.SchemaUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SchemaApi {
    private ApiClient apiClient;

    public SchemaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SchemaApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for schemaCreate
     * @param schema The schema create request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call schemaCreateCall(SchemaCreateRequest schema, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = schema;
        
        // create path and map variables
        String localVarPath = "/V1/Schemas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call schemaCreateValidateBeforeCall(SchemaCreateRequest schema, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling schemaCreate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = schemaCreateCall(schema, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Single
     * The creation of a single schema is executed asynchronous. To keep track of the creation progress a business process is returned.
     * @param schema The schema create request. (required)
     * @return BusinessProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessProcess schemaCreate(SchemaCreateRequest schema) throws ApiException {
        ApiResponse<BusinessProcess> resp = schemaCreateWithHttpInfo(schema);
        return resp.getData();
    }

    /**
     * Create Single
     * The creation of a single schema is executed asynchronous. To keep track of the creation progress a business process is returned.
     * @param schema The schema create request. (required)
     * @return ApiResponse&lt;BusinessProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessProcess> schemaCreateWithHttpInfo(SchemaCreateRequest schema) throws ApiException {
        com.squareup.okhttp.Call call = schemaCreateValidateBeforeCall(schema, null, null);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Single (asynchronously)
     * The creation of a single schema is executed asynchronous. To keep track of the creation progress a business process is returned.
     * @param schema The schema create request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call schemaCreateAsync(SchemaCreateRequest schema, final ApiCallback<BusinessProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = schemaCreateValidateBeforeCall(schema, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for schemaDelete
     * @param schemaId The schema id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call schemaDeleteCall(String schemaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Schemas/{SchemaId}"
            .replaceAll("\\{" + "SchemaId" + "\\}", apiClient.escapeString(schemaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call schemaDeleteValidateBeforeCall(String schemaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'schemaId' is set
        if (schemaId == null) {
            throw new ApiException("Missing the required parameter 'schemaId' when calling schemaDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = schemaDeleteCall(schemaId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Single
     * The deletion of a single schema is executed asynchronous. To keep track of the deletion progress a business process is returned.
     * @param schemaId The schema id. (required)
     * @return BusinessProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessProcess schemaDelete(String schemaId) throws ApiException {
        ApiResponse<BusinessProcess> resp = schemaDeleteWithHttpInfo(schemaId);
        return resp.getData();
    }

    /**
     * Delete Single
     * The deletion of a single schema is executed asynchronous. To keep track of the deletion progress a business process is returned.
     * @param schemaId The schema id. (required)
     * @return ApiResponse&lt;BusinessProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessProcess> schemaDeleteWithHttpInfo(String schemaId) throws ApiException {
        com.squareup.okhttp.Call call = schemaDeleteValidateBeforeCall(schemaId, null, null);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Single (asynchronously)
     * The deletion of a single schema is executed asynchronous. To keep track of the deletion progress a business process is returned.
     * @param schemaId The schema id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call schemaDeleteAsync(String schemaId, final ApiCallback<BusinessProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = schemaDeleteValidateBeforeCall(schemaId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for schemaExists
     * @param schemaId The schema id. (required)
     * @param fieldId The optional field id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call schemaExistsCall(String schemaId, String fieldId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Schemas/{SchemaId}/Exists"
            .replaceAll("\\{" + "SchemaId" + "\\}", apiClient.escapeString(schemaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fieldId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldId", fieldId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call schemaExistsValidateBeforeCall(String schemaId, String fieldId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'schemaId' is set
        if (schemaId == null) {
            throw new ApiException("Missing the required parameter 'schemaId' when calling schemaExists(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling schemaExists(Async)");
        }
        
        
        com.squareup.okhttp.Call call = schemaExistsCall(schemaId, fieldId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Exists
     * Checks if the schema or optionally the schema&#39;s field already exists.
     * @param schemaId The schema id. (required)
     * @param fieldId The optional field id. (required)
     * @return ExistsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExistsResponse schemaExists(String schemaId, String fieldId) throws ApiException {
        ApiResponse<ExistsResponse> resp = schemaExistsWithHttpInfo(schemaId, fieldId);
        return resp.getData();
    }

    /**
     * Exists
     * Checks if the schema or optionally the schema&#39;s field already exists.
     * @param schemaId The schema id. (required)
     * @param fieldId The optional field id. (required)
     * @return ApiResponse&lt;ExistsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExistsResponse> schemaExistsWithHttpInfo(String schemaId, String fieldId) throws ApiException {
        com.squareup.okhttp.Call call = schemaExistsValidateBeforeCall(schemaId, fieldId, null, null);
        Type localVarReturnType = new TypeToken<ExistsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Exists (asynchronously)
     * Checks if the schema or optionally the schema&#39;s field already exists.
     * @param schemaId The schema id. (required)
     * @param fieldId The optional field id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call schemaExistsAsync(String schemaId, String fieldId, final ApiCallback<ExistsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = schemaExistsValidateBeforeCall(schemaId, fieldId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExistsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for schemaGet
     * @param schemaId The schema id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call schemaGetCall(String schemaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Schemas/{SchemaId}"
            .replaceAll("\\{" + "SchemaId" + "\\}", apiClient.escapeString(schemaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call schemaGetValidateBeforeCall(String schemaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'schemaId' is set
        if (schemaId == null) {
            throw new ApiException("Missing the required parameter 'schemaId' when calling schemaGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = schemaGetCall(schemaId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Single
     * Gets the schema detail information by the schema id.
     * @param schemaId The schema id. (required)
     * @return SchemaDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemaDetail schemaGet(String schemaId) throws ApiException {
        ApiResponse<SchemaDetail> resp = schemaGetWithHttpInfo(schemaId);
        return resp.getData();
    }

    /**
     * Get Single
     * Gets the schema detail information by the schema id.
     * @param schemaId The schema id. (required)
     * @return ApiResponse&lt;SchemaDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemaDetail> schemaGetWithHttpInfo(String schemaId) throws ApiException {
        com.squareup.okhttp.Call call = schemaGetValidateBeforeCall(schemaId, null, null);
        Type localVarReturnType = new TypeToken<SchemaDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Single (asynchronously)
     * Gets the schema detail information by the schema id.
     * @param schemaId The schema id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call schemaGetAsync(String schemaId, final ApiCallback<SchemaDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = schemaGetValidateBeforeCall(schemaId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemaDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for schemaGetAll
     * @param ids Comma separated list of schema ids (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call schemaGetAllCall(List<String> ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Schemas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "ids", ids));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call schemaGetAllValidateBeforeCall(List<String> ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = schemaGetAllCall(ids, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Many
     * Gets the schema detail informations by given schema ids.
     * @param ids Comma separated list of schema ids (optional)
     * @return List&lt;SchemaDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SchemaDetail> schemaGetAll(List<String> ids) throws ApiException {
        ApiResponse<List<SchemaDetail>> resp = schemaGetAllWithHttpInfo(ids);
        return resp.getData();
    }

    /**
     * Get Many
     * Gets the schema detail informations by given schema ids.
     * @param ids Comma separated list of schema ids (optional)
     * @return ApiResponse&lt;List&lt;SchemaDetail&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SchemaDetail>> schemaGetAllWithHttpInfo(List<String> ids) throws ApiException {
        com.squareup.okhttp.Call call = schemaGetAllValidateBeforeCall(ids, null, null);
        Type localVarReturnType = new TypeToken<List<SchemaDetail>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Many (asynchronously)
     * Gets the schema detail informations by given schema ids.
     * @param ids Comma separated list of schema ids (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call schemaGetAllAsync(List<String> ids, final ApiCallback<List<SchemaDetail>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = schemaGetAllValidateBeforeCall(ids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SchemaDetail>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for schemaSearch
     * @param schemaSearchRequest The schema search request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call schemaSearchCall(SchemaSearchRequest schemaSearchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = schemaSearchRequest;
        
        // create path and map variables
        String localVarPath = "/V1/Schemas/Search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call schemaSearchValidateBeforeCall(SchemaSearchRequest schemaSearchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'schemaSearchRequest' is set
        if (schemaSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'schemaSearchRequest' when calling schemaSearch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = schemaSearchCall(schemaSearchRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search
     * Searches schemas as specified in the search request.
     * @param schemaSearchRequest The schema search request. (required)
     * @return SchemaSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemaSearchResult schemaSearch(SchemaSearchRequest schemaSearchRequest) throws ApiException {
        ApiResponse<SchemaSearchResult> resp = schemaSearchWithHttpInfo(schemaSearchRequest);
        return resp.getData();
    }

    /**
     * Search
     * Searches schemas as specified in the search request.
     * @param schemaSearchRequest The schema search request. (required)
     * @return ApiResponse&lt;SchemaSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemaSearchResult> schemaSearchWithHttpInfo(SchemaSearchRequest schemaSearchRequest) throws ApiException {
        com.squareup.okhttp.Call call = schemaSearchValidateBeforeCall(schemaSearchRequest, null, null);
        Type localVarReturnType = new TypeToken<SchemaSearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search (asynchronously)
     * Searches schemas as specified in the search request.
     * @param schemaSearchRequest The schema search request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call schemaSearchAsync(SchemaSearchRequest schemaSearchRequest, final ApiCallback<SchemaSearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = schemaSearchValidateBeforeCall(schemaSearchRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemaSearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for schemaUpdate
     * @param schemaId The schema id. (required)
     * @param schema The schema update request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call schemaUpdateCall(String schemaId, SchemaUpdateRequest schema, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = schema;
        
        // create path and map variables
        String localVarPath = "/V1/Schemas/{SchemaId}"
            .replaceAll("\\{" + "SchemaId" + "\\}", apiClient.escapeString(schemaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call schemaUpdateValidateBeforeCall(String schemaId, SchemaUpdateRequest schema, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'schemaId' is set
        if (schemaId == null) {
            throw new ApiException("Missing the required parameter 'schemaId' when calling schemaUpdate(Async)");
        }
        
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling schemaUpdate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = schemaUpdateCall(schemaId, schema, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Single
     * The update of a single schema is executed asynchronous. To keep track of the update progress a business process is returned.
     * @param schemaId The schema id. (required)
     * @param schema The schema update request. (required)
     * @return BusinessProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessProcess schemaUpdate(String schemaId, SchemaUpdateRequest schema) throws ApiException {
        ApiResponse<BusinessProcess> resp = schemaUpdateWithHttpInfo(schemaId, schema);
        return resp.getData();
    }

    /**
     * Update Single
     * The update of a single schema is executed asynchronous. To keep track of the update progress a business process is returned.
     * @param schemaId The schema id. (required)
     * @param schema The schema update request. (required)
     * @return ApiResponse&lt;BusinessProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessProcess> schemaUpdateWithHttpInfo(String schemaId, SchemaUpdateRequest schema) throws ApiException {
        com.squareup.okhttp.Call call = schemaUpdateValidateBeforeCall(schemaId, schema, null, null);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Single (asynchronously)
     * The update of a single schema is executed asynchronous. To keep track of the update progress a business process is returned.
     * @param schemaId The schema id. (required)
     * @param schema The schema update request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call schemaUpdateAsync(String schemaId, SchemaUpdateRequest schema, final ApiCallback<BusinessProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = schemaUpdateValidateBeforeCall(schemaId, schema, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
