/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BusinessProcess;
import io.swagger.client.model.ContentAggregationRequest;
import io.swagger.client.model.ContentBatchDownloadItem;
import io.swagger.client.model.ContentBatchDownloadRequest;
import io.swagger.client.model.ContentDeactivationRequest;
import io.swagger.client.model.ContentDetail;
import io.swagger.client.model.ContentFileUpdateRequest;
import io.swagger.client.model.ContentNotFoundException;
import io.swagger.client.model.ContentOwnershipTransferRequest;
import io.swagger.client.model.ContentReactivationRequest;
import io.swagger.client.model.ContentSearchRequest;
import io.swagger.client.model.ContentSearchResult;
import io.swagger.client.model.ContentsMetadataUpdateRequest;
import io.swagger.client.model.ContentsOwnershipTransferRequest;
import io.swagger.client.model.CreateContentRequest;
import java.io.File;
import io.swagger.client.model.FilterContentsMetadataUpdateRequest;
import io.swagger.client.model.ObjectAggregationResult;
import io.swagger.client.model.PictureparkException;
import io.swagger.client.model.UpdateContentMetadataRequest;
import io.swagger.client.model.UpdateContentPermissionsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContentApi {
    private ApiClient apiClient;

    public ContentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for contentAggregate
     * @param contentAggregationRequest The aggregation request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentAggregateCall(ContentAggregationRequest contentAggregationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = contentAggregationRequest;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/Aggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentAggregateValidateBeforeCall(ContentAggregationRequest contentAggregationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentAggregationRequest' is set
        if (contentAggregationRequest == null) {
            throw new ApiException("Missing the required parameter 'contentAggregationRequest' when calling contentAggregate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentAggregateCall(contentAggregationRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Aggregate
     * Aggregates content as specified in the aggregation request.
     * @param contentAggregationRequest The aggregation request. (required)
     * @return ObjectAggregationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectAggregationResult contentAggregate(ContentAggregationRequest contentAggregationRequest) throws ApiException {
        ApiResponse<ObjectAggregationResult> resp = contentAggregateWithHttpInfo(contentAggregationRequest);
        return resp.getData();
    }

    /**
     * Aggregate
     * Aggregates content as specified in the aggregation request.
     * @param contentAggregationRequest The aggregation request. (required)
     * @return ApiResponse&lt;ObjectAggregationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectAggregationResult> contentAggregateWithHttpInfo(ContentAggregationRequest contentAggregationRequest) throws ApiException {
        com.squareup.okhttp.Call call = contentAggregateValidateBeforeCall(contentAggregationRequest, null, null);
        Type localVarReturnType = new TypeToken<ObjectAggregationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Aggregate (asynchronously)
     * Aggregates content as specified in the aggregation request.
     * @param contentAggregationRequest The aggregation request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentAggregateAsync(ContentAggregationRequest contentAggregationRequest, final ApiCallback<ObjectAggregationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentAggregateValidateBeforeCall(contentAggregationRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectAggregationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentAggregateByChannel
     * @param channelId The channel id (required)
     * @param contentAggregationRequest The content aggregation request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentAggregateByChannelCall(String channelId, ContentAggregationRequest contentAggregationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = contentAggregationRequest;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/{ChannelId}/Aggregate"
            .replaceAll("\\{" + "ChannelId" + "\\}", apiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentAggregateByChannelValidateBeforeCall(String channelId, ContentAggregationRequest contentAggregationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling contentAggregateByChannel(Async)");
        }
        
        // verify the required parameter 'contentAggregationRequest' is set
        if (contentAggregationRequest == null) {
            throw new ApiException("Missing the required parameter 'contentAggregationRequest' when calling contentAggregateByChannel(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentAggregateByChannelCall(channelId, contentAggregationRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Aggregate by Channel
     * Aggregates content as specified in the aggregation request and limits the aggregation results to the specified channel.
     * @param channelId The channel id (required)
     * @param contentAggregationRequest The content aggregation request. (required)
     * @return ObjectAggregationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectAggregationResult contentAggregateByChannel(String channelId, ContentAggregationRequest contentAggregationRequest) throws ApiException {
        ApiResponse<ObjectAggregationResult> resp = contentAggregateByChannelWithHttpInfo(channelId, contentAggregationRequest);
        return resp.getData();
    }

    /**
     * Aggregate by Channel
     * Aggregates content as specified in the aggregation request and limits the aggregation results to the specified channel.
     * @param channelId The channel id (required)
     * @param contentAggregationRequest The content aggregation request. (required)
     * @return ApiResponse&lt;ObjectAggregationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectAggregationResult> contentAggregateByChannelWithHttpInfo(String channelId, ContentAggregationRequest contentAggregationRequest) throws ApiException {
        com.squareup.okhttp.Call call = contentAggregateByChannelValidateBeforeCall(channelId, contentAggregationRequest, null, null);
        Type localVarReturnType = new TypeToken<ObjectAggregationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Aggregate by Channel (asynchronously)
     * Aggregates content as specified in the aggregation request and limits the aggregation results to the specified channel.
     * @param channelId The channel id (required)
     * @param contentAggregationRequest The content aggregation request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentAggregateByChannelAsync(String channelId, ContentAggregationRequest contentAggregationRequest, final ApiCallback<ObjectAggregationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentAggregateByChannelValidateBeforeCall(channelId, contentAggregationRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectAggregationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentCreateContent
     * @param createRequest The content create request. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentCreateContentCall(CreateContentRequest createRequest, Boolean resolve, Integer timeout, List<String> patterns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createRequest;
        
        // create path and map variables
        String localVarPath = "/V1/Contents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (resolve != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resolve", resolve));
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeout", timeout));
        if (patterns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "patterns", patterns));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentCreateContentValidateBeforeCall(CreateContentRequest createRequest, Boolean resolve, Integer timeout, List<String> patterns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createRequest' is set
        if (createRequest == null) {
            throw new ApiException("Missing the required parameter 'createRequest' when calling contentCreateContent(Async)");
        }
        
        // verify the required parameter 'resolve' is set
        if (resolve == null) {
            throw new ApiException("Missing the required parameter 'resolve' when calling contentCreateContent(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentCreateContentCall(createRequest, resolve, timeout, patterns, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Single
     * The creation of content is executed asynchronous. However, for the specified timeout completion of the creation process is awaited. If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     * @param createRequest The content create request. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @return ContentDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentDetail contentCreateContent(CreateContentRequest createRequest, Boolean resolve, Integer timeout, List<String> patterns) throws ApiException {
        ApiResponse<ContentDetail> resp = contentCreateContentWithHttpInfo(createRequest, resolve, timeout, patterns);
        return resp.getData();
    }

    /**
     * Create Single
     * The creation of content is executed asynchronous. However, for the specified timeout completion of the creation process is awaited. If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     * @param createRequest The content create request. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @return ApiResponse&lt;ContentDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentDetail> contentCreateContentWithHttpInfo(CreateContentRequest createRequest, Boolean resolve, Integer timeout, List<String> patterns) throws ApiException {
        com.squareup.okhttp.Call call = contentCreateContentValidateBeforeCall(createRequest, resolve, timeout, patterns, null, null);
        Type localVarReturnType = new TypeToken<ContentDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Single (asynchronously)
     * The creation of content is executed asynchronous. However, for the specified timeout completion of the creation process is awaited. If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     * @param createRequest The content create request. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentCreateContentAsync(CreateContentRequest createRequest, Boolean resolve, Integer timeout, List<String> patterns, final ApiCallback<ContentDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentCreateContentValidateBeforeCall(createRequest, resolve, timeout, patterns, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentCreateDownloadLink
     * @param request The content batch download request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentCreateDownloadLinkCall(ContentBatchDownloadRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/CreateBatchContentDownload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentCreateDownloadLinkValidateBeforeCall(ContentBatchDownloadRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling contentCreateDownloadLink(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentCreateDownloadLinkCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a content batch download
     * 
     * @param request The content batch download request (required)
     * @return ContentBatchDownloadItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentBatchDownloadItem contentCreateDownloadLink(ContentBatchDownloadRequest request) throws ApiException {
        ApiResponse<ContentBatchDownloadItem> resp = contentCreateDownloadLinkWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Creates a content batch download
     * 
     * @param request The content batch download request (required)
     * @return ApiResponse&lt;ContentBatchDownloadItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentBatchDownloadItem> contentCreateDownloadLinkWithHttpInfo(ContentBatchDownloadRequest request) throws ApiException {
        com.squareup.okhttp.Call call = contentCreateDownloadLinkValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<ContentBatchDownloadItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a content batch download (asynchronously)
     * 
     * @param request The content batch download request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentCreateDownloadLinkAsync(ContentBatchDownloadRequest request, final ApiCallback<ContentBatchDownloadItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentCreateDownloadLinkValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentBatchDownloadItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentDeactivate
     * @param contentId the id of the content to deactivate (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentDeactivateCall(String contentId, Integer timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/{ContentId}/Deactivate"
            .replaceAll("\\{" + "ContentId" + "\\}", apiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeout", timeout));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentDeactivateValidateBeforeCall(String contentId, Integer timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling contentDeactivate(Async)");
        }
        
        // verify the required parameter 'timeout' is set
        if (timeout == null) {
            throw new ApiException("Missing the required parameter 'timeout' when calling contentDeactivate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentDeactivateCall(contentId, timeout, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deactivates a content
     * 
     * @param contentId the id of the content to deactivate (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void contentDeactivate(String contentId, Integer timeout) throws ApiException {
        contentDeactivateWithHttpInfo(contentId, timeout);
    }

    /**
     * Deactivates a content
     * 
     * @param contentId the id of the content to deactivate (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> contentDeactivateWithHttpInfo(String contentId, Integer timeout) throws ApiException {
        com.squareup.okhttp.Call call = contentDeactivateValidateBeforeCall(contentId, timeout, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deactivates a content (asynchronously)
     * 
     * @param contentId the id of the content to deactivate (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentDeactivateAsync(String contentId, Integer timeout, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentDeactivateValidateBeforeCall(contentId, timeout, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for contentDeactivateMany
     * @param deactivationRequest The deactivation request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentDeactivateManyCall(ContentDeactivationRequest deactivationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deactivationRequest;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/Many/Deactivate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentDeactivateManyValidateBeforeCall(ContentDeactivationRequest deactivationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deactivationRequest' is set
        if (deactivationRequest == null) {
            throw new ApiException("Missing the required parameter 'deactivationRequest' when calling contentDeactivateMany(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentDeactivateManyCall(deactivationRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Dactivate Many - Content
     * 
     * @param deactivationRequest The deactivation request (required)
     * @return BusinessProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessProcess contentDeactivateMany(ContentDeactivationRequest deactivationRequest) throws ApiException {
        ApiResponse<BusinessProcess> resp = contentDeactivateManyWithHttpInfo(deactivationRequest);
        return resp.getData();
    }

    /**
     * Dactivate Many - Content
     * 
     * @param deactivationRequest The deactivation request (required)
     * @return ApiResponse&lt;BusinessProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessProcess> contentDeactivateManyWithHttpInfo(ContentDeactivationRequest deactivationRequest) throws ApiException {
        com.squareup.okhttp.Call call = contentDeactivateManyValidateBeforeCall(deactivationRequest, null, null);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Dactivate Many - Content (asynchronously)
     * 
     * @param deactivationRequest The deactivation request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentDeactivateManyAsync(ContentDeactivationRequest deactivationRequest, final ApiCallback<BusinessProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentDeactivateManyValidateBeforeCall(deactivationRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentDownload
     * @param contentId The content id (required)
     * @param outputFormatId The output format id (required)
     * @param range the range (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentDownloadCall(String contentId, String outputFormatId, String range, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/Downloads/{ContentId}/{OutputFormatId}"
            .replaceAll("\\{" + "ContentId" + "\\}", apiClient.escapeString(contentId.toString()))
            .replaceAll("\\{" + "OutputFormatId" + "\\}", apiClient.escapeString(outputFormatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (range != null)
        localVarHeaderParams.put("Range", apiClient.parameterToString(range));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentDownloadValidateBeforeCall(String contentId, String outputFormatId, String range, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling contentDownload(Async)");
        }
        
        // verify the required parameter 'outputFormatId' is set
        if (outputFormatId == null) {
            throw new ApiException("Missing the required parameter 'outputFormatId' when calling contentDownload(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentDownloadCall(contentId, outputFormatId, range, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Downloads content in a specific outputformat
     * 
     * @param contentId The content id (required)
     * @param outputFormatId The output format id (required)
     * @param range the range (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File contentDownload(String contentId, String outputFormatId, String range) throws ApiException {
        ApiResponse<File> resp = contentDownloadWithHttpInfo(contentId, outputFormatId, range);
        return resp.getData();
    }

    /**
     * Downloads content in a specific outputformat
     * 
     * @param contentId The content id (required)
     * @param outputFormatId The output format id (required)
     * @param range the range (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> contentDownloadWithHttpInfo(String contentId, String outputFormatId, String range) throws ApiException {
        com.squareup.okhttp.Call call = contentDownloadValidateBeforeCall(contentId, outputFormatId, range, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Downloads content in a specific outputformat (asynchronously)
     * 
     * @param contentId The content id (required)
     * @param outputFormatId The output format id (required)
     * @param range the range (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentDownloadAsync(String contentId, String outputFormatId, String range, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentDownloadValidateBeforeCall(contentId, outputFormatId, range, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentDownloadResized
     * @param contentId The Content id (required)
     * @param outputFormatId The output format id (required)
     * @param width The content width (required)
     * @param height The content height (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentDownloadResizedCall(String contentId, String outputFormatId, Integer width, Integer height, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/Downloads/{ContentId}/{OutputFormatId}/{Width}/{Height}"
            .replaceAll("\\{" + "ContentId" + "\\}", apiClient.escapeString(contentId.toString()))
            .replaceAll("\\{" + "OutputFormatId" + "\\}", apiClient.escapeString(outputFormatId.toString()))
            .replaceAll("\\{" + "Width" + "\\}", apiClient.escapeString(width.toString()))
            .replaceAll("\\{" + "Height" + "\\}", apiClient.escapeString(height.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentDownloadResizedValidateBeforeCall(String contentId, String outputFormatId, Integer width, Integer height, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling contentDownloadResized(Async)");
        }
        
        // verify the required parameter 'outputFormatId' is set
        if (outputFormatId == null) {
            throw new ApiException("Missing the required parameter 'outputFormatId' when calling contentDownloadResized(Async)");
        }
        
        // verify the required parameter 'width' is set
        if (width == null) {
            throw new ApiException("Missing the required parameter 'width' when calling contentDownloadResized(Async)");
        }
        
        // verify the required parameter 'height' is set
        if (height == null) {
            throw new ApiException("Missing the required parameter 'height' when calling contentDownloadResized(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentDownloadResizedCall(contentId, outputFormatId, width, height, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Download resized content
     * Provides a endpoint to get reseized content
     * @param contentId The Content id (required)
     * @param outputFormatId The output format id (required)
     * @param width The content width (required)
     * @param height The content height (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File contentDownloadResized(String contentId, String outputFormatId, Integer width, Integer height) throws ApiException {
        ApiResponse<File> resp = contentDownloadResizedWithHttpInfo(contentId, outputFormatId, width, height);
        return resp.getData();
    }

    /**
     * Download resized content
     * Provides a endpoint to get reseized content
     * @param contentId The Content id (required)
     * @param outputFormatId The output format id (required)
     * @param width The content width (required)
     * @param height The content height (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> contentDownloadResizedWithHttpInfo(String contentId, String outputFormatId, Integer width, Integer height) throws ApiException {
        com.squareup.okhttp.Call call = contentDownloadResizedValidateBeforeCall(contentId, outputFormatId, width, height, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Download resized content (asynchronously)
     * Provides a endpoint to get reseized content
     * @param contentId The Content id (required)
     * @param outputFormatId The output format id (required)
     * @param width The content width (required)
     * @param height The content height (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentDownloadResizedAsync(String contentId, String outputFormatId, Integer width, Integer height, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentDownloadResizedValidateBeforeCall(contentId, outputFormatId, width, height, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentDownloadThumbnail
     * @param contentId The Content id (required)
     * @param size Thumbnail size. Either small, medium or large (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentDownloadThumbnailCall(String contentId, String size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/Thumbnails/{ContentId}/{Size}"
            .replaceAll("\\{" + "ContentId" + "\\}", apiClient.escapeString(contentId.toString()))
            .replaceAll("\\{" + "Size" + "\\}", apiClient.escapeString(size.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentDownloadThumbnailValidateBeforeCall(String contentId, String size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling contentDownloadThumbnail(Async)");
        }
        
        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling contentDownloadThumbnail(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentDownloadThumbnailCall(contentId, size, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Thumbnail
     * Provides a lightweight endpoint to get content thumbnails
     * @param contentId The Content id (required)
     * @param size Thumbnail size. Either small, medium or large (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File contentDownloadThumbnail(String contentId, String size) throws ApiException {
        ApiResponse<File> resp = contentDownloadThumbnailWithHttpInfo(contentId, size);
        return resp.getData();
    }

    /**
     * Get Thumbnail
     * Provides a lightweight endpoint to get content thumbnails
     * @param contentId The Content id (required)
     * @param size Thumbnail size. Either small, medium or large (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> contentDownloadThumbnailWithHttpInfo(String contentId, String size) throws ApiException {
        com.squareup.okhttp.Call call = contentDownloadThumbnailValidateBeforeCall(contentId, size, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Thumbnail (asynchronously)
     * Provides a lightweight endpoint to get content thumbnails
     * @param contentId The Content id (required)
     * @param size Thumbnail size. Either small, medium or large (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentDownloadThumbnailAsync(String contentId, String size, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentDownloadThumbnailValidateBeforeCall(contentId, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentGet
     * @param contentId The content id. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentGetCall(String contentId, Boolean resolve, List<String> patterns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/{ContentId}"
            .replaceAll("\\{" + "ContentId" + "\\}", apiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (resolve != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resolve", resolve));
        if (patterns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "patterns", patterns));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentGetValidateBeforeCall(String contentId, Boolean resolve, List<String> patterns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling contentGet(Async)");
        }
        
        // verify the required parameter 'resolve' is set
        if (resolve == null) {
            throw new ApiException("Missing the required parameter 'resolve' when calling contentGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentGetCall(contentId, resolve, patterns, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Single
     * Gets a content document by id.
     * @param contentId The content id. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @return ContentDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentDetail contentGet(String contentId, Boolean resolve, List<String> patterns) throws ApiException {
        ApiResponse<ContentDetail> resp = contentGetWithHttpInfo(contentId, resolve, patterns);
        return resp.getData();
    }

    /**
     * Get Single
     * Gets a content document by id.
     * @param contentId The content id. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @return ApiResponse&lt;ContentDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentDetail> contentGetWithHttpInfo(String contentId, Boolean resolve, List<String> patterns) throws ApiException {
        com.squareup.okhttp.Call call = contentGetValidateBeforeCall(contentId, resolve, patterns, null, null);
        Type localVarReturnType = new TypeToken<ContentDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Single (asynchronously)
     * Gets a content document by id.
     * @param contentId The content id. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentGetAsync(String contentId, Boolean resolve, List<String> patterns, final ApiCallback<ContentDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentGetValidateBeforeCall(contentId, resolve, patterns, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentGetMany
     * @param ids Comma-separated list of contentIds (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentGetManyCall(List<String> ids, Boolean resolve, List<String> patterns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/Many";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "ids", ids));
        if (resolve != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resolve", resolve));
        if (patterns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "patterns", patterns));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentGetManyValidateBeforeCall(List<String> ids, Boolean resolve, List<String> patterns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling contentGetMany(Async)");
        }
        
        // verify the required parameter 'resolve' is set
        if (resolve == null) {
            throw new ApiException("Missing the required parameter 'resolve' when calling contentGetMany(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentGetManyCall(ids, resolve, patterns, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Many
     * Gets multiple content documents by ids.
     * @param ids Comma-separated list of contentIds (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @return List&lt;ContentDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContentDetail> contentGetMany(List<String> ids, Boolean resolve, List<String> patterns) throws ApiException {
        ApiResponse<List<ContentDetail>> resp = contentGetManyWithHttpInfo(ids, resolve, patterns);
        return resp.getData();
    }

    /**
     * Get Many
     * Gets multiple content documents by ids.
     * @param ids Comma-separated list of contentIds (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @return ApiResponse&lt;List&lt;ContentDetail&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContentDetail>> contentGetManyWithHttpInfo(List<String> ids, Boolean resolve, List<String> patterns) throws ApiException {
        com.squareup.okhttp.Call call = contentGetManyValidateBeforeCall(ids, resolve, patterns, null, null);
        Type localVarReturnType = new TypeToken<List<ContentDetail>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Many (asynchronously)
     * Gets multiple content documents by ids.
     * @param ids Comma-separated list of contentIds (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentGetManyAsync(List<String> ids, Boolean resolve, List<String> patterns, final ApiCallback<List<ContentDetail>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentGetManyValidateBeforeCall(ids, resolve, patterns, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ContentDetail>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentReactivate
     * @param contentId The content id. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentReactivateCall(String contentId, Boolean resolve, Integer timeout, List<String> patterns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/{ContentId}/Reactivate"
            .replaceAll("\\{" + "ContentId" + "\\}", apiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (resolve != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resolve", resolve));
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeout", timeout));
        if (patterns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "patterns", patterns));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentReactivateValidateBeforeCall(String contentId, Boolean resolve, Integer timeout, List<String> patterns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling contentReactivate(Async)");
        }
        
        // verify the required parameter 'resolve' is set
        if (resolve == null) {
            throw new ApiException("Missing the required parameter 'resolve' when calling contentReactivate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentReactivateCall(contentId, resolve, timeout, patterns, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Reactivate - Content
     * The reactivation of content is executed asynchronous. However, for the specified timeout completion of the reactivation process is awaited. If the reactivation process is not completed by reaching the specified timeout, the reactivation process continues, but null is returned.
     * @param contentId The content id. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @return ContentDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentDetail contentReactivate(String contentId, Boolean resolve, Integer timeout, List<String> patterns) throws ApiException {
        ApiResponse<ContentDetail> resp = contentReactivateWithHttpInfo(contentId, resolve, timeout, patterns);
        return resp.getData();
    }

    /**
     * Reactivate - Content
     * The reactivation of content is executed asynchronous. However, for the specified timeout completion of the reactivation process is awaited. If the reactivation process is not completed by reaching the specified timeout, the reactivation process continues, but null is returned.
     * @param contentId The content id. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @return ApiResponse&lt;ContentDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentDetail> contentReactivateWithHttpInfo(String contentId, Boolean resolve, Integer timeout, List<String> patterns) throws ApiException {
        com.squareup.okhttp.Call call = contentReactivateValidateBeforeCall(contentId, resolve, timeout, patterns, null, null);
        Type localVarReturnType = new TypeToken<ContentDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Reactivate - Content (asynchronously)
     * The reactivation of content is executed asynchronous. However, for the specified timeout completion of the reactivation process is awaited. If the reactivation process is not completed by reaching the specified timeout, the reactivation process continues, but null is returned.
     * @param contentId The content id. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentReactivateAsync(String contentId, Boolean resolve, Integer timeout, List<String> patterns, final ApiCallback<ContentDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentReactivateValidateBeforeCall(contentId, resolve, timeout, patterns, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentReactivateMany
     * @param reactivationRequest The content reactivation request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentReactivateManyCall(ContentReactivationRequest reactivationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reactivationRequest;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/Many/Reactivate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentReactivateManyValidateBeforeCall(ContentReactivationRequest reactivationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reactivationRequest' is set
        if (reactivationRequest == null) {
            throw new ApiException("Missing the required parameter 'reactivationRequest' when calling contentReactivateMany(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentReactivateManyCall(reactivationRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Reactivate Many - Content
     * The reactivation multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     * @param reactivationRequest The content reactivation request. (required)
     * @return BusinessProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessProcess contentReactivateMany(ContentReactivationRequest reactivationRequest) throws ApiException {
        ApiResponse<BusinessProcess> resp = contentReactivateManyWithHttpInfo(reactivationRequest);
        return resp.getData();
    }

    /**
     * Reactivate Many - Content
     * The reactivation multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     * @param reactivationRequest The content reactivation request. (required)
     * @return ApiResponse&lt;BusinessProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessProcess> contentReactivateManyWithHttpInfo(ContentReactivationRequest reactivationRequest) throws ApiException {
        com.squareup.okhttp.Call call = contentReactivateManyValidateBeforeCall(reactivationRequest, null, null);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Reactivate Many - Content (asynchronously)
     * The reactivation multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     * @param reactivationRequest The content reactivation request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentReactivateManyAsync(ContentReactivationRequest reactivationRequest, final ApiCallback<BusinessProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentReactivateManyValidateBeforeCall(reactivationRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentSearch
     * @param contentSearchRequest The content search request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentSearchCall(ContentSearchRequest contentSearchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = contentSearchRequest;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/Search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentSearchValidateBeforeCall(ContentSearchRequest contentSearchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentSearchRequest' is set
        if (contentSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'contentSearchRequest' when calling contentSearch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentSearchCall(contentSearchRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search
     * Searches contents as specified in the search request.
     * @param contentSearchRequest The content search request. (required)
     * @return ContentSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentSearchResult contentSearch(ContentSearchRequest contentSearchRequest) throws ApiException {
        ApiResponse<ContentSearchResult> resp = contentSearchWithHttpInfo(contentSearchRequest);
        return resp.getData();
    }

    /**
     * Search
     * Searches contents as specified in the search request.
     * @param contentSearchRequest The content search request. (required)
     * @return ApiResponse&lt;ContentSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentSearchResult> contentSearchWithHttpInfo(ContentSearchRequest contentSearchRequest) throws ApiException {
        com.squareup.okhttp.Call call = contentSearchValidateBeforeCall(contentSearchRequest, null, null);
        Type localVarReturnType = new TypeToken<ContentSearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search (asynchronously)
     * Searches contents as specified in the search request.
     * @param contentSearchRequest The content search request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentSearchAsync(ContentSearchRequest contentSearchRequest, final ApiCallback<ContentSearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentSearchValidateBeforeCall(contentSearchRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentSearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentSearchByChannel
     * @param channelId The channel id. (required)
     * @param contentSearchRequest The content search request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentSearchByChannelCall(String channelId, ContentSearchRequest contentSearchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = contentSearchRequest;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/{ChannelId}/Search"
            .replaceAll("\\{" + "ChannelId" + "\\}", apiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentSearchByChannelValidateBeforeCall(String channelId, ContentSearchRequest contentSearchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling contentSearchByChannel(Async)");
        }
        
        // verify the required parameter 'contentSearchRequest' is set
        if (contentSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'contentSearchRequest' when calling contentSearchByChannel(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentSearchByChannelCall(channelId, contentSearchRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search By Channel
     * Searches contents as specified in the search request and limits the search results to the specified channel.
     * @param channelId The channel id. (required)
     * @param contentSearchRequest The content search request. (required)
     * @return ContentSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentSearchResult contentSearchByChannel(String channelId, ContentSearchRequest contentSearchRequest) throws ApiException {
        ApiResponse<ContentSearchResult> resp = contentSearchByChannelWithHttpInfo(channelId, contentSearchRequest);
        return resp.getData();
    }

    /**
     * Search By Channel
     * Searches contents as specified in the search request and limits the search results to the specified channel.
     * @param channelId The channel id. (required)
     * @param contentSearchRequest The content search request. (required)
     * @return ApiResponse&lt;ContentSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentSearchResult> contentSearchByChannelWithHttpInfo(String channelId, ContentSearchRequest contentSearchRequest) throws ApiException {
        com.squareup.okhttp.Call call = contentSearchByChannelValidateBeforeCall(channelId, contentSearchRequest, null, null);
        Type localVarReturnType = new TypeToken<ContentSearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search By Channel (asynchronously)
     * Searches contents as specified in the search request and limits the search results to the specified channel.
     * @param channelId The channel id. (required)
     * @param contentSearchRequest The content search request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentSearchByChannelAsync(String channelId, ContentSearchRequest contentSearchRequest, final ApiCallback<ContentSearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentSearchByChannelValidateBeforeCall(channelId, contentSearchRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentSearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentTransferOwnershipMany
     * @param contentsOwnershipTransferRequest The content ownership transfer request request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentTransferOwnershipManyCall(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = contentsOwnershipTransferRequest;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/Many/Ownership/Transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentTransferOwnershipManyValidateBeforeCall(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentsOwnershipTransferRequest' is set
        if (contentsOwnershipTransferRequest == null) {
            throw new ApiException("Missing the required parameter 'contentsOwnershipTransferRequest' when calling contentTransferOwnershipMany(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentTransferOwnershipManyCall(contentsOwnershipTransferRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Process many ownership trasnfer request
     * 
     * @param contentsOwnershipTransferRequest The content ownership transfer request request. (required)
     * @return BusinessProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessProcess contentTransferOwnershipMany(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest) throws ApiException {
        ApiResponse<BusinessProcess> resp = contentTransferOwnershipManyWithHttpInfo(contentsOwnershipTransferRequest);
        return resp.getData();
    }

    /**
     * Process many ownership trasnfer request
     * 
     * @param contentsOwnershipTransferRequest The content ownership transfer request request. (required)
     * @return ApiResponse&lt;BusinessProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessProcess> contentTransferOwnershipManyWithHttpInfo(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest) throws ApiException {
        com.squareup.okhttp.Call call = contentTransferOwnershipManyValidateBeforeCall(contentsOwnershipTransferRequest, null, null);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Process many ownership trasnfer request (asynchronously)
     * 
     * @param contentsOwnershipTransferRequest The content ownership transfer request request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentTransferOwnershipManyAsync(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest, final ApiCallback<BusinessProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentTransferOwnershipManyValidateBeforeCall(contentsOwnershipTransferRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentUpdateFile
     * @param contentId The id of the content to replace (required)
     * @param updateRequest Update request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentUpdateFileCall(String contentId, ContentFileUpdateRequest updateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateRequest;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/{ContentId}/File"
            .replaceAll("\\{" + "ContentId" + "\\}", apiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentUpdateFileValidateBeforeCall(String contentId, ContentFileUpdateRequest updateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling contentUpdateFile(Async)");
        }
        
        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling contentUpdateFile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentUpdateFileCall(contentId, updateRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Single - File
     * Update binary file of existing content. The file must already be uploaded before calling this endpoint.
     * @param contentId The id of the content to replace (required)
     * @param updateRequest Update request (required)
     * @return BusinessProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessProcess contentUpdateFile(String contentId, ContentFileUpdateRequest updateRequest) throws ApiException {
        ApiResponse<BusinessProcess> resp = contentUpdateFileWithHttpInfo(contentId, updateRequest);
        return resp.getData();
    }

    /**
     * Update Single - File
     * Update binary file of existing content. The file must already be uploaded before calling this endpoint.
     * @param contentId The id of the content to replace (required)
     * @param updateRequest Update request (required)
     * @return ApiResponse&lt;BusinessProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessProcess> contentUpdateFileWithHttpInfo(String contentId, ContentFileUpdateRequest updateRequest) throws ApiException {
        com.squareup.okhttp.Call call = contentUpdateFileValidateBeforeCall(contentId, updateRequest, null, null);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Single - File (asynchronously)
     * Update binary file of existing content. The file must already be uploaded before calling this endpoint.
     * @param contentId The id of the content to replace (required)
     * @param updateRequest Update request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentUpdateFileAsync(String contentId, ContentFileUpdateRequest updateRequest, final ApiCallback<BusinessProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentUpdateFileValidateBeforeCall(contentId, updateRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentUpdateMetadata
     * @param contentId The content id. (required)
     * @param updateRequest The metadata update request. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentUpdateMetadataCall(String contentId, UpdateContentMetadataRequest updateRequest, Boolean resolve, Integer timeout, List<String> patterns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateRequest;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/{ContentId}"
            .replaceAll("\\{" + "ContentId" + "\\}", apiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (resolve != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resolve", resolve));
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeout", timeout));
        if (patterns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "patterns", patterns));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentUpdateMetadataValidateBeforeCall(String contentId, UpdateContentMetadataRequest updateRequest, Boolean resolve, Integer timeout, List<String> patterns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling contentUpdateMetadata(Async)");
        }
        
        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling contentUpdateMetadata(Async)");
        }
        
        // verify the required parameter 'resolve' is set
        if (resolve == null) {
            throw new ApiException("Missing the required parameter 'resolve' when calling contentUpdateMetadata(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentUpdateMetadataCall(contentId, updateRequest, resolve, timeout, patterns, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Single - Metadata
     * The update of content metadata is executed asynchronous. However, for the specified timeout completion of the update process is awaited. If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     * @param contentId The content id. (required)
     * @param updateRequest The metadata update request. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @return ContentDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentDetail contentUpdateMetadata(String contentId, UpdateContentMetadataRequest updateRequest, Boolean resolve, Integer timeout, List<String> patterns) throws ApiException {
        ApiResponse<ContentDetail> resp = contentUpdateMetadataWithHttpInfo(contentId, updateRequest, resolve, timeout, patterns);
        return resp.getData();
    }

    /**
     * Update Single - Metadata
     * The update of content metadata is executed asynchronous. However, for the specified timeout completion of the update process is awaited. If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     * @param contentId The content id. (required)
     * @param updateRequest The metadata update request. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @return ApiResponse&lt;ContentDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentDetail> contentUpdateMetadataWithHttpInfo(String contentId, UpdateContentMetadataRequest updateRequest, Boolean resolve, Integer timeout, List<String> patterns) throws ApiException {
        com.squareup.okhttp.Call call = contentUpdateMetadataValidateBeforeCall(contentId, updateRequest, resolve, timeout, patterns, null, null);
        Type localVarReturnType = new TypeToken<ContentDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Single - Metadata (asynchronously)
     * The update of content metadata is executed asynchronous. However, for the specified timeout completion of the update process is awaited. If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     * @param contentId The content id. (required)
     * @param updateRequest The metadata update request. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentUpdateMetadataAsync(String contentId, UpdateContentMetadataRequest updateRequest, Boolean resolve, Integer timeout, List<String> patterns, final ApiCallback<ContentDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentUpdateMetadataValidateBeforeCall(contentId, updateRequest, resolve, timeout, patterns, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentUpdateMetadataByFilter
     * @param updateRequest The metadata update request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentUpdateMetadataByFilterCall(FilterContentsMetadataUpdateRequest updateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateRequest;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/Many/Metadata/Filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentUpdateMetadataByFilterValidateBeforeCall(FilterContentsMetadataUpdateRequest updateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling contentUpdateMetadataByFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentUpdateMetadataByFilterCall(updateRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update by filter - Metadata
     * Update metadata of multiple contents. A filter must be provided to limit the update to specific contents.
     * @param updateRequest The metadata update request. (required)
     * @return BusinessProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessProcess contentUpdateMetadataByFilter(FilterContentsMetadataUpdateRequest updateRequest) throws ApiException {
        ApiResponse<BusinessProcess> resp = contentUpdateMetadataByFilterWithHttpInfo(updateRequest);
        return resp.getData();
    }

    /**
     * Update by filter - Metadata
     * Update metadata of multiple contents. A filter must be provided to limit the update to specific contents.
     * @param updateRequest The metadata update request. (required)
     * @return ApiResponse&lt;BusinessProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessProcess> contentUpdateMetadataByFilterWithHttpInfo(FilterContentsMetadataUpdateRequest updateRequest) throws ApiException {
        com.squareup.okhttp.Call call = contentUpdateMetadataByFilterValidateBeforeCall(updateRequest, null, null);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update by filter - Metadata (asynchronously)
     * Update metadata of multiple contents. A filter must be provided to limit the update to specific contents.
     * @param updateRequest The metadata update request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentUpdateMetadataByFilterAsync(FilterContentsMetadataUpdateRequest updateRequest, final ApiCallback<BusinessProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentUpdateMetadataByFilterValidateBeforeCall(updateRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentUpdateMetadataMany
     * @param updateRequest The metadata update request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentUpdateMetadataManyCall(ContentsMetadataUpdateRequest updateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateRequest;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/Many/Metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentUpdateMetadataManyValidateBeforeCall(ContentsMetadataUpdateRequest updateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling contentUpdateMetadataMany(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentUpdateMetadataManyCall(updateRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Many - Metadata
     * The metadata update of multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     * @param updateRequest The metadata update request. (required)
     * @return BusinessProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessProcess contentUpdateMetadataMany(ContentsMetadataUpdateRequest updateRequest) throws ApiException {
        ApiResponse<BusinessProcess> resp = contentUpdateMetadataManyWithHttpInfo(updateRequest);
        return resp.getData();
    }

    /**
     * Update Many - Metadata
     * The metadata update of multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     * @param updateRequest The metadata update request. (required)
     * @return ApiResponse&lt;BusinessProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessProcess> contentUpdateMetadataManyWithHttpInfo(ContentsMetadataUpdateRequest updateRequest) throws ApiException {
        com.squareup.okhttp.Call call = contentUpdateMetadataManyValidateBeforeCall(updateRequest, null, null);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Many - Metadata (asynchronously)
     * The metadata update of multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     * @param updateRequest The metadata update request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentUpdateMetadataManyAsync(ContentsMetadataUpdateRequest updateRequest, final ApiCallback<BusinessProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentUpdateMetadataManyValidateBeforeCall(updateRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentUpdatePermissions
     * @param contentId The content id. (required)
     * @param updateRequest The content permission update request. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentUpdatePermissionsCall(String contentId, UpdateContentPermissionsRequest updateRequest, Boolean resolve, Integer timeout, List<String> patterns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateRequest;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/{ContentId}/Permissions"
            .replaceAll("\\{" + "ContentId" + "\\}", apiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (resolve != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resolve", resolve));
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeout", timeout));
        if (patterns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "patterns", patterns));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentUpdatePermissionsValidateBeforeCall(String contentId, UpdateContentPermissionsRequest updateRequest, Boolean resolve, Integer timeout, List<String> patterns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling contentUpdatePermissions(Async)");
        }
        
        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling contentUpdatePermissions(Async)");
        }
        
        // verify the required parameter 'resolve' is set
        if (resolve == null) {
            throw new ApiException("Missing the required parameter 'resolve' when calling contentUpdatePermissions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentUpdatePermissionsCall(contentId, updateRequest, resolve, timeout, patterns, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Single - Permissions
     * The update of content permissions is executed asynchronous. However, for the specified timeout completion of the update process is awaited. If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     * @param contentId The content id. (required)
     * @param updateRequest The content permission update request. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @return ContentDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentDetail contentUpdatePermissions(String contentId, UpdateContentPermissionsRequest updateRequest, Boolean resolve, Integer timeout, List<String> patterns) throws ApiException {
        ApiResponse<ContentDetail> resp = contentUpdatePermissionsWithHttpInfo(contentId, updateRequest, resolve, timeout, patterns);
        return resp.getData();
    }

    /**
     * Update Single - Permissions
     * The update of content permissions is executed asynchronous. However, for the specified timeout completion of the update process is awaited. If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     * @param contentId The content id. (required)
     * @param updateRequest The content permission update request. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @return ApiResponse&lt;ContentDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentDetail> contentUpdatePermissionsWithHttpInfo(String contentId, UpdateContentPermissionsRequest updateRequest, Boolean resolve, Integer timeout, List<String> patterns) throws ApiException {
        com.squareup.okhttp.Call call = contentUpdatePermissionsValidateBeforeCall(contentId, updateRequest, resolve, timeout, patterns, null, null);
        Type localVarReturnType = new TypeToken<ContentDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Single - Permissions (asynchronously)
     * The update of content permissions is executed asynchronous. However, for the specified timeout completion of the update process is awaited. If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     * @param contentId The content id. (required)
     * @param updateRequest The content permission update request. (required)
     * @param resolve Resolves the data of referenced list items into the contents&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentUpdatePermissionsAsync(String contentId, UpdateContentPermissionsRequest updateRequest, Boolean resolve, Integer timeout, List<String> patterns, final ApiCallback<ContentDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentUpdatePermissionsValidateBeforeCall(contentId, updateRequest, resolve, timeout, patterns, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentUpdatePermissionsMany
     * @param updateRequest The permissions update request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentUpdatePermissionsManyCall(List<UpdateContentPermissionsRequest> updateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateRequest;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/Many/Permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentUpdatePermissionsManyValidateBeforeCall(List<UpdateContentPermissionsRequest> updateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling contentUpdatePermissionsMany(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentUpdatePermissionsManyCall(updateRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Many - Permissions
     * The permission update of multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     * @param updateRequest The permissions update request. (required)
     * @return BusinessProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessProcess contentUpdatePermissionsMany(List<UpdateContentPermissionsRequest> updateRequest) throws ApiException {
        ApiResponse<BusinessProcess> resp = contentUpdatePermissionsManyWithHttpInfo(updateRequest);
        return resp.getData();
    }

    /**
     * Update Many - Permissions
     * The permission update of multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     * @param updateRequest The permissions update request. (required)
     * @return ApiResponse&lt;BusinessProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessProcess> contentUpdatePermissionsManyWithHttpInfo(List<UpdateContentPermissionsRequest> updateRequest) throws ApiException {
        com.squareup.okhttp.Call call = contentUpdatePermissionsManyValidateBeforeCall(updateRequest, null, null);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Many - Permissions (asynchronously)
     * The permission update of multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     * @param updateRequest The permissions update request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentUpdatePermissionsManyAsync(List<UpdateContentPermissionsRequest> updateRequest, final ApiCallback<BusinessProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentUpdatePermissionsManyValidateBeforeCall(updateRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentUpdateTransferOwnership
     * @param contentId The content id. (required)
     * @param updateRequest The content ownership transfer request update request. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentUpdateTransferOwnershipCall(String contentId, ContentOwnershipTransferRequest updateRequest, Integer timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateRequest;
        
        // create path and map variables
        String localVarPath = "/V1/Contents/{ContentId}/Ownership/Transfer"
            .replaceAll("\\{" + "ContentId" + "\\}", apiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeout", timeout));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentUpdateTransferOwnershipValidateBeforeCall(String contentId, ContentOwnershipTransferRequest updateRequest, Integer timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling contentUpdateTransferOwnership(Async)");
        }
        
        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling contentUpdateTransferOwnership(Async)");
        }
        
        
        com.squareup.okhttp.Call call = contentUpdateTransferOwnershipCall(contentId, updateRequest, timeout, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Single - OwnershipTransfer
     * The update of content transfer is executed asynchronous. However, for the specified timeout completion of the update process is awaited. If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     * @param contentId The content id. (required)
     * @param updateRequest The content ownership transfer request update request. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @return ContentDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentDetail contentUpdateTransferOwnership(String contentId, ContentOwnershipTransferRequest updateRequest, Integer timeout) throws ApiException {
        ApiResponse<ContentDetail> resp = contentUpdateTransferOwnershipWithHttpInfo(contentId, updateRequest, timeout);
        return resp.getData();
    }

    /**
     * Update Single - OwnershipTransfer
     * The update of content transfer is executed asynchronous. However, for the specified timeout completion of the update process is awaited. If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     * @param contentId The content id. (required)
     * @param updateRequest The content ownership transfer request update request. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @return ApiResponse&lt;ContentDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentDetail> contentUpdateTransferOwnershipWithHttpInfo(String contentId, ContentOwnershipTransferRequest updateRequest, Integer timeout) throws ApiException {
        com.squareup.okhttp.Call call = contentUpdateTransferOwnershipValidateBeforeCall(contentId, updateRequest, timeout, null, null);
        Type localVarReturnType = new TypeToken<ContentDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Single - OwnershipTransfer (asynchronously)
     * The update of content transfer is executed asynchronous. However, for the specified timeout completion of the update process is awaited. If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     * @param contentId The content id. (required)
     * @param updateRequest The content ownership transfer request update request. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentUpdateTransferOwnershipAsync(String contentId, ContentOwnershipTransferRequest updateRequest, Integer timeout, final ApiCallback<ContentDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentUpdateTransferOwnershipValidateBeforeCall(contentId, updateRequest, timeout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
