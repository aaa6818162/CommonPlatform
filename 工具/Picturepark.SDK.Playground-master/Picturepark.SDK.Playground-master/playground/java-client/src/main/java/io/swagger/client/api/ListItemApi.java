/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BusinessProcess;
import io.swagger.client.model.BusinessProcessWaitResult;
import io.swagger.client.model.ListItemAggregationRequest;
import io.swagger.client.model.ListItemCreateRequest;
import io.swagger.client.model.ListItemDetail;
import io.swagger.client.model.ListItemFieldsFilterUpdateRequest;
import io.swagger.client.model.ListItemFieldsUpdateRequest;
import io.swagger.client.model.ListItemSearchRequest;
import io.swagger.client.model.ListItemSearchResult;
import io.swagger.client.model.ListItemUpdateRequest;
import io.swagger.client.model.ObjectAggregationResult;
import io.swagger.client.model.PictureparkException;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ListItemApi {
    private ApiClient apiClient;

    public ListItemApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ListItemApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for listItemAggregate
     * @param listItemAggregationRequest The list item aggregation request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listItemAggregateCall(ListItemAggregationRequest listItemAggregationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = listItemAggregationRequest;
        
        // create path and map variables
        String localVarPath = "/V1/ListItems/Aggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listItemAggregateValidateBeforeCall(ListItemAggregationRequest listItemAggregationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'listItemAggregationRequest' is set
        if (listItemAggregationRequest == null) {
            throw new ApiException("Missing the required parameter 'listItemAggregationRequest' when calling listItemAggregate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = listItemAggregateCall(listItemAggregationRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Aggregate
     * Aggregates list items as specified in the aggregation request.
     * @param listItemAggregationRequest The list item aggregation request. (required)
     * @return ObjectAggregationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectAggregationResult listItemAggregate(ListItemAggregationRequest listItemAggregationRequest) throws ApiException {
        ApiResponse<ObjectAggregationResult> resp = listItemAggregateWithHttpInfo(listItemAggregationRequest);
        return resp.getData();
    }

    /**
     * Aggregate
     * Aggregates list items as specified in the aggregation request.
     * @param listItemAggregationRequest The list item aggregation request. (required)
     * @return ApiResponse&lt;ObjectAggregationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectAggregationResult> listItemAggregateWithHttpInfo(ListItemAggregationRequest listItemAggregationRequest) throws ApiException {
        com.squareup.okhttp.Call call = listItemAggregateValidateBeforeCall(listItemAggregationRequest, null, null);
        Type localVarReturnType = new TypeToken<ObjectAggregationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Aggregate (asynchronously)
     * Aggregates list items as specified in the aggregation request.
     * @param listItemAggregationRequest The list item aggregation request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listItemAggregateAsync(ListItemAggregationRequest listItemAggregationRequest, final ApiCallback<ObjectAggregationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listItemAggregateValidateBeforeCall(listItemAggregationRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectAggregationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listItemCreate
     * @param listItem List item create request. (required)
     * @param resolve Resolves the data of referenced list items into the list item&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listItemCreateCall(ListItemCreateRequest listItem, Boolean resolve, Integer timeout, List<String> patterns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = listItem;
        
        // create path and map variables
        String localVarPath = "/V1/ListItems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (resolve != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resolve", resolve));
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeout", timeout));
        if (patterns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "patterns", patterns));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listItemCreateValidateBeforeCall(ListItemCreateRequest listItem, Boolean resolve, Integer timeout, List<String> patterns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'listItem' is set
        if (listItem == null) {
            throw new ApiException("Missing the required parameter 'listItem' when calling listItemCreate(Async)");
        }
        
        // verify the required parameter 'resolve' is set
        if (resolve == null) {
            throw new ApiException("Missing the required parameter 'resolve' when calling listItemCreate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = listItemCreateCall(listItem, resolve, timeout, patterns, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Single
     * The creation of a single list item is executed asynchronous. However, for the specified timeout completion of the creation process is awaited. If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     * @param listItem List item create request. (required)
     * @param resolve Resolves the data of referenced list items into the list item&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @return ListItemDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListItemDetail listItemCreate(ListItemCreateRequest listItem, Boolean resolve, Integer timeout, List<String> patterns) throws ApiException {
        ApiResponse<ListItemDetail> resp = listItemCreateWithHttpInfo(listItem, resolve, timeout, patterns);
        return resp.getData();
    }

    /**
     * Create Single
     * The creation of a single list item is executed asynchronous. However, for the specified timeout completion of the creation process is awaited. If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     * @param listItem List item create request. (required)
     * @param resolve Resolves the data of referenced list items into the list item&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @return ApiResponse&lt;ListItemDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListItemDetail> listItemCreateWithHttpInfo(ListItemCreateRequest listItem, Boolean resolve, Integer timeout, List<String> patterns) throws ApiException {
        com.squareup.okhttp.Call call = listItemCreateValidateBeforeCall(listItem, resolve, timeout, patterns, null, null);
        Type localVarReturnType = new TypeToken<ListItemDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Single (asynchronously)
     * The creation of a single list item is executed asynchronous. However, for the specified timeout completion of the creation process is awaited. If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     * @param listItem List item create request. (required)
     * @param resolve Resolves the data of referenced list items into the list item&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listItemCreateAsync(ListItemCreateRequest listItem, Boolean resolve, Integer timeout, List<String> patterns, final ApiCallback<ListItemDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listItemCreateValidateBeforeCall(listItem, resolve, timeout, patterns, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListItemDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listItemCreateMany
     * @param objects A list of ListItemCreateRequests. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listItemCreateManyCall(List<ListItemCreateRequest> objects, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = objects;
        
        // create path and map variables
        String localVarPath = "/V1/ListItems/Many";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listItemCreateManyValidateBeforeCall(List<ListItemCreateRequest> objects, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'objects' is set
        if (objects == null) {
            throw new ApiException("Missing the required parameter 'objects' when calling listItemCreateMany(Async)");
        }
        
        
        com.squareup.okhttp.Call call = listItemCreateManyCall(objects, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Many
     * The creation of multiple list items is executed asynchronous. To keep track of the creation progress a business process is returned.
     * @param objects A list of ListItemCreateRequests. (required)
     * @return BusinessProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessProcess listItemCreateMany(List<ListItemCreateRequest> objects) throws ApiException {
        ApiResponse<BusinessProcess> resp = listItemCreateManyWithHttpInfo(objects);
        return resp.getData();
    }

    /**
     * Create Many
     * The creation of multiple list items is executed asynchronous. To keep track of the creation progress a business process is returned.
     * @param objects A list of ListItemCreateRequests. (required)
     * @return ApiResponse&lt;BusinessProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessProcess> listItemCreateManyWithHttpInfo(List<ListItemCreateRequest> objects) throws ApiException {
        com.squareup.okhttp.Call call = listItemCreateManyValidateBeforeCall(objects, null, null);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Many (asynchronously)
     * The creation of multiple list items is executed asynchronous. To keep track of the creation progress a business process is returned.
     * @param objects A list of ListItemCreateRequests. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listItemCreateManyAsync(List<ListItemCreateRequest> objects, final ApiCallback<BusinessProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listItemCreateManyValidateBeforeCall(objects, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listItemDeleteMany
     * @param ids The list item id list. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listItemDeleteManyCall(List<String> ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/ListItems/Many";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "ids", ids));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listItemDeleteManyValidateBeforeCall(List<String> ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listItemDeleteManyCall(ids, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Many
     * The deletion of multiple list items is executed asynchronous. To keep track of the deletion progress a business process is returned.
     * @param ids The list item id list. (optional)
     * @return BusinessProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessProcess listItemDeleteMany(List<String> ids) throws ApiException {
        ApiResponse<BusinessProcess> resp = listItemDeleteManyWithHttpInfo(ids);
        return resp.getData();
    }

    /**
     * Delete Many
     * The deletion of multiple list items is executed asynchronous. To keep track of the deletion progress a business process is returned.
     * @param ids The list item id list. (optional)
     * @return ApiResponse&lt;BusinessProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessProcess> listItemDeleteManyWithHttpInfo(List<String> ids) throws ApiException {
        com.squareup.okhttp.Call call = listItemDeleteManyValidateBeforeCall(ids, null, null);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Many (asynchronously)
     * The deletion of multiple list items is executed asynchronous. To keep track of the deletion progress a business process is returned.
     * @param ids The list item id list. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listItemDeleteManyAsync(List<String> ids, final ApiCallback<BusinessProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listItemDeleteManyValidateBeforeCall(ids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listItemGet
     * @param listItemId The list item id. (required)
     * @param resolve Resolves the data of referenced list items into the list item&#39;s content. (required)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listItemGetCall(String listItemId, Boolean resolve, List<String> patterns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/ListItems/{ListItemId}"
            .replaceAll("\\{" + "ListItemId" + "\\}", apiClient.escapeString(listItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (resolve != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resolve", resolve));
        if (patterns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "patterns", patterns));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listItemGetValidateBeforeCall(String listItemId, Boolean resolve, List<String> patterns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'listItemId' is set
        if (listItemId == null) {
            throw new ApiException("Missing the required parameter 'listItemId' when calling listItemGet(Async)");
        }
        
        // verify the required parameter 'resolve' is set
        if (resolve == null) {
            throw new ApiException("Missing the required parameter 'resolve' when calling listItemGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = listItemGetCall(listItemId, resolve, patterns, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Single
     * 
     * @param listItemId The list item id. (required)
     * @param resolve Resolves the data of referenced list items into the list item&#39;s content. (required)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @return ListItemDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListItemDetail listItemGet(String listItemId, Boolean resolve, List<String> patterns) throws ApiException {
        ApiResponse<ListItemDetail> resp = listItemGetWithHttpInfo(listItemId, resolve, patterns);
        return resp.getData();
    }

    /**
     * Get Single
     * 
     * @param listItemId The list item id. (required)
     * @param resolve Resolves the data of referenced list items into the list item&#39;s content. (required)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @return ApiResponse&lt;ListItemDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListItemDetail> listItemGetWithHttpInfo(String listItemId, Boolean resolve, List<String> patterns) throws ApiException {
        com.squareup.okhttp.Call call = listItemGetValidateBeforeCall(listItemId, resolve, patterns, null, null);
        Type localVarReturnType = new TypeToken<ListItemDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Single (asynchronously)
     * 
     * @param listItemId The list item id. (required)
     * @param resolve Resolves the data of referenced list items into the list item&#39;s content. (required)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listItemGetAsync(String listItemId, Boolean resolve, List<String> patterns, final ApiCallback<ListItemDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listItemGetValidateBeforeCall(listItemId, resolve, patterns, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListItemDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listItemImport
     * @param contentId The content id. (required)
     * @param fileTransferId The file transfer id. (required)
     * @param includeObjects Imports list items defined in the json import file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listItemImportCall(String contentId, String fileTransferId, Boolean includeObjects, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/ListItems/Import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (contentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "contentId", contentId));
        if (fileTransferId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fileTransferId", fileTransferId));
        if (includeObjects != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeObjects", includeObjects));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listItemImportValidateBeforeCall(String contentId, String fileTransferId, Boolean includeObjects, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling listItemImport(Async)");
        }
        
        // verify the required parameter 'fileTransferId' is set
        if (fileTransferId == null) {
            throw new ApiException("Missing the required parameter 'fileTransferId' when calling listItemImport(Async)");
        }
        
        // verify the required parameter 'includeObjects' is set
        if (includeObjects == null) {
            throw new ApiException("Missing the required parameter 'includeObjects' when calling listItemImport(Async)");
        }
        
        
        com.squareup.okhttp.Call call = listItemImportCall(contentId, fileTransferId, includeObjects, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Import
     * Imports all schemas and optionally list items as specified in the json file. Duplicate schemas or list items in the target system will be omitted. 
     * @param contentId The content id. (required)
     * @param fileTransferId The file transfer id. (required)
     * @param includeObjects Imports list items defined in the json import file. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void listItemImport(String contentId, String fileTransferId, Boolean includeObjects) throws ApiException {
        listItemImportWithHttpInfo(contentId, fileTransferId, includeObjects);
    }

    /**
     * Import
     * Imports all schemas and optionally list items as specified in the json file. Duplicate schemas or list items in the target system will be omitted. 
     * @param contentId The content id. (required)
     * @param fileTransferId The file transfer id. (required)
     * @param includeObjects Imports list items defined in the json import file. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> listItemImportWithHttpInfo(String contentId, String fileTransferId, Boolean includeObjects) throws ApiException {
        com.squareup.okhttp.Call call = listItemImportValidateBeforeCall(contentId, fileTransferId, includeObjects, null, null);
        return apiClient.execute(call);
    }

    /**
     * Import (asynchronously)
     * Imports all schemas and optionally list items as specified in the json file. Duplicate schemas or list items in the target system will be omitted. 
     * @param contentId The content id. (required)
     * @param fileTransferId The file transfer id. (required)
     * @param includeObjects Imports list items defined in the json import file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listItemImportAsync(String contentId, String fileTransferId, Boolean includeObjects, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listItemImportValidateBeforeCall(contentId, fileTransferId, includeObjects, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listItemSearch
     * @param listItemSearchRequest The list item search request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listItemSearchCall(ListItemSearchRequest listItemSearchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = listItemSearchRequest;
        
        // create path and map variables
        String localVarPath = "/V1/ListItems/Search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listItemSearchValidateBeforeCall(ListItemSearchRequest listItemSearchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'listItemSearchRequest' is set
        if (listItemSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'listItemSearchRequest' when calling listItemSearch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = listItemSearchCall(listItemSearchRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search
     * Searches list items as specified in the search request.
     * @param listItemSearchRequest The list item search request. (required)
     * @return ListItemSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListItemSearchResult listItemSearch(ListItemSearchRequest listItemSearchRequest) throws ApiException {
        ApiResponse<ListItemSearchResult> resp = listItemSearchWithHttpInfo(listItemSearchRequest);
        return resp.getData();
    }

    /**
     * Search
     * Searches list items as specified in the search request.
     * @param listItemSearchRequest The list item search request. (required)
     * @return ApiResponse&lt;ListItemSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListItemSearchResult> listItemSearchWithHttpInfo(ListItemSearchRequest listItemSearchRequest) throws ApiException {
        com.squareup.okhttp.Call call = listItemSearchValidateBeforeCall(listItemSearchRequest, null, null);
        Type localVarReturnType = new TypeToken<ListItemSearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search (asynchronously)
     * Searches list items as specified in the search request.
     * @param listItemSearchRequest The list item search request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listItemSearchAsync(ListItemSearchRequest listItemSearchRequest, final ApiCallback<ListItemSearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listItemSearchValidateBeforeCall(listItemSearchRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListItemSearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listItemUpdate
     * @param listItemId The list item id. (required)
     * @param updateRequest The list item update request. (required)
     * @param resolve Resolves the data of referenced list items into the list item&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listItemUpdateCall(String listItemId, ListItemUpdateRequest updateRequest, Boolean resolve, Integer timeout, List<String> patterns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateRequest;
        
        // create path and map variables
        String localVarPath = "/V1/ListItems/{ListItemId}"
            .replaceAll("\\{" + "ListItemId" + "\\}", apiClient.escapeString(listItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (resolve != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resolve", resolve));
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeout", timeout));
        if (patterns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "patterns", patterns));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listItemUpdateValidateBeforeCall(String listItemId, ListItemUpdateRequest updateRequest, Boolean resolve, Integer timeout, List<String> patterns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'listItemId' is set
        if (listItemId == null) {
            throw new ApiException("Missing the required parameter 'listItemId' when calling listItemUpdate(Async)");
        }
        
        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling listItemUpdate(Async)");
        }
        
        // verify the required parameter 'resolve' is set
        if (resolve == null) {
            throw new ApiException("Missing the required parameter 'resolve' when calling listItemUpdate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = listItemUpdateCall(listItemId, updateRequest, resolve, timeout, patterns, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Single
     * 
     * @param listItemId The list item id. (required)
     * @param updateRequest The list item update request. (required)
     * @param resolve Resolves the data of referenced list items into the list item&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @return ListItemDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListItemDetail listItemUpdate(String listItemId, ListItemUpdateRequest updateRequest, Boolean resolve, Integer timeout, List<String> patterns) throws ApiException {
        ApiResponse<ListItemDetail> resp = listItemUpdateWithHttpInfo(listItemId, updateRequest, resolve, timeout, patterns);
        return resp.getData();
    }

    /**
     * Update Single
     * 
     * @param listItemId The list item id. (required)
     * @param updateRequest The list item update request. (required)
     * @param resolve Resolves the data of referenced list items into the list item&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @return ApiResponse&lt;ListItemDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListItemDetail> listItemUpdateWithHttpInfo(String listItemId, ListItemUpdateRequest updateRequest, Boolean resolve, Integer timeout, List<String> patterns) throws ApiException {
        com.squareup.okhttp.Call call = listItemUpdateValidateBeforeCall(listItemId, updateRequest, resolve, timeout, patterns, null, null);
        Type localVarReturnType = new TypeToken<ListItemDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Single (asynchronously)
     * 
     * @param listItemId The list item id. (required)
     * @param updateRequest The list item update request. (required)
     * @param resolve Resolves the data of referenced list items into the list item&#39;s content. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (optional)
     * @param patterns Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listItemUpdateAsync(String listItemId, ListItemUpdateRequest updateRequest, Boolean resolve, Integer timeout, List<String> patterns, final ApiCallback<ListItemDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listItemUpdateValidateBeforeCall(listItemId, updateRequest, resolve, timeout, patterns, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListItemDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listItemUpdateFields
     * @param updateRequest The metadata update request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listItemUpdateFieldsCall(ListItemFieldsUpdateRequest updateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateRequest;
        
        // create path and map variables
        String localVarPath = "/V1/ListItems/Many/Fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listItemUpdateFieldsValidateBeforeCall(ListItemFieldsUpdateRequest updateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling listItemUpdateFields(Async)");
        }
        
        
        com.squareup.okhttp.Call call = listItemUpdateFieldsCall(updateRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update - Fields
     * Update fields of multiple list items. A list of listItemIds must be provided to limit the update to specific list items.
     * @param updateRequest The metadata update request. (required)
     * @return BusinessProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessProcess listItemUpdateFields(ListItemFieldsUpdateRequest updateRequest) throws ApiException {
        ApiResponse<BusinessProcess> resp = listItemUpdateFieldsWithHttpInfo(updateRequest);
        return resp.getData();
    }

    /**
     * Update - Fields
     * Update fields of multiple list items. A list of listItemIds must be provided to limit the update to specific list items.
     * @param updateRequest The metadata update request. (required)
     * @return ApiResponse&lt;BusinessProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessProcess> listItemUpdateFieldsWithHttpInfo(ListItemFieldsUpdateRequest updateRequest) throws ApiException {
        com.squareup.okhttp.Call call = listItemUpdateFieldsValidateBeforeCall(updateRequest, null, null);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update - Fields (asynchronously)
     * Update fields of multiple list items. A list of listItemIds must be provided to limit the update to specific list items.
     * @param updateRequest The metadata update request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listItemUpdateFieldsAsync(ListItemFieldsUpdateRequest updateRequest, final ApiCallback<BusinessProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listItemUpdateFieldsValidateBeforeCall(updateRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listItemUpdateFieldsByFilter
     * @param updateRequest The metadata update request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listItemUpdateFieldsByFilterCall(ListItemFieldsFilterUpdateRequest updateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateRequest;
        
        // create path and map variables
        String localVarPath = "/V1/ListItems/Many/Fields/Filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listItemUpdateFieldsByFilterValidateBeforeCall(ListItemFieldsFilterUpdateRequest updateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling listItemUpdateFieldsByFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = listItemUpdateFieldsByFilterCall(updateRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update by filter - Fields
     * Update fields of multiple list items. A filter must be provided to limit the update to specific list items.
     * @param updateRequest The metadata update request. (required)
     * @return BusinessProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessProcess listItemUpdateFieldsByFilter(ListItemFieldsFilterUpdateRequest updateRequest) throws ApiException {
        ApiResponse<BusinessProcess> resp = listItemUpdateFieldsByFilterWithHttpInfo(updateRequest);
        return resp.getData();
    }

    /**
     * Update by filter - Fields
     * Update fields of multiple list items. A filter must be provided to limit the update to specific list items.
     * @param updateRequest The metadata update request. (required)
     * @return ApiResponse&lt;BusinessProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessProcess> listItemUpdateFieldsByFilterWithHttpInfo(ListItemFieldsFilterUpdateRequest updateRequest) throws ApiException {
        com.squareup.okhttp.Call call = listItemUpdateFieldsByFilterValidateBeforeCall(updateRequest, null, null);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update by filter - Fields (asynchronously)
     * Update fields of multiple list items. A filter must be provided to limit the update to specific list items.
     * @param updateRequest The metadata update request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listItemUpdateFieldsByFilterAsync(ListItemFieldsFilterUpdateRequest updateRequest, final ApiCallback<BusinessProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listItemUpdateFieldsByFilterValidateBeforeCall(updateRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listItemUpdateMany
     * @param objects A list of ListItemUpdateRequests. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listItemUpdateManyCall(List<ListItemUpdateRequest> objects, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = objects;
        
        // create path and map variables
        String localVarPath = "/V1/ListItems/Many";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listItemUpdateManyValidateBeforeCall(List<ListItemUpdateRequest> objects, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'objects' is set
        if (objects == null) {
            throw new ApiException("Missing the required parameter 'objects' when calling listItemUpdateMany(Async)");
        }
        
        
        com.squareup.okhttp.Call call = listItemUpdateManyCall(objects, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Many
     * The update of multiple list items is executed asynchronous. To keep track of the update progress a business process is returned.
     * @param objects A list of ListItemUpdateRequests. (required)
     * @return BusinessProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessProcess listItemUpdateMany(List<ListItemUpdateRequest> objects) throws ApiException {
        ApiResponse<BusinessProcess> resp = listItemUpdateManyWithHttpInfo(objects);
        return resp.getData();
    }

    /**
     * Update Many
     * The update of multiple list items is executed asynchronous. To keep track of the update progress a business process is returned.
     * @param objects A list of ListItemUpdateRequests. (required)
     * @return ApiResponse&lt;BusinessProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessProcess> listItemUpdateManyWithHttpInfo(List<ListItemUpdateRequest> objects) throws ApiException {
        com.squareup.okhttp.Call call = listItemUpdateManyValidateBeforeCall(objects, null, null);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Many (asynchronously)
     * The update of multiple list items is executed asynchronous. To keep track of the update progress a business process is returned.
     * @param objects A list of ListItemUpdateRequests. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listItemUpdateManyAsync(List<ListItemUpdateRequest> objects, final ApiCallback<BusinessProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listItemUpdateManyValidateBeforeCall(objects, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listItemWaitForStates
     * @param processId The business process id. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (required)
     * @param states Comma-separated list of business process states to wait for. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listItemWaitForStatesCall(String processId, Integer timeout, List<String> states, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/V1/ListItems/{ProcessId}/Wait"
            .replaceAll("\\{" + "ProcessId" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (states != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "States", states));
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeout", timeout));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listItemWaitForStatesValidateBeforeCall(String processId, Integer timeout, List<String> states, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling listItemWaitForStates(Async)");
        }
        
        // verify the required parameter 'timeout' is set
        if (timeout == null) {
            throw new ApiException("Missing the required parameter 'timeout' when calling listItemWaitForStates(Async)");
        }
        
        
        com.squareup.okhttp.Call call = listItemWaitForStatesCall(processId, timeout, states, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Wait For States
     * Waits for any specified business process states to be hit. If the timeout is reached, the wait process will be stopped and the wait result returned.
     * @param processId The business process id. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (required)
     * @param states Comma-separated list of business process states to wait for. (optional)
     * @return BusinessProcessWaitResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessProcessWaitResult listItemWaitForStates(String processId, Integer timeout, List<String> states) throws ApiException {
        ApiResponse<BusinessProcessWaitResult> resp = listItemWaitForStatesWithHttpInfo(processId, timeout, states);
        return resp.getData();
    }

    /**
     * Wait For States
     * Waits for any specified business process states to be hit. If the timeout is reached, the wait process will be stopped and the wait result returned.
     * @param processId The business process id. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (required)
     * @param states Comma-separated list of business process states to wait for. (optional)
     * @return ApiResponse&lt;BusinessProcessWaitResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessProcessWaitResult> listItemWaitForStatesWithHttpInfo(String processId, Integer timeout, List<String> states) throws ApiException {
        com.squareup.okhttp.Call call = listItemWaitForStatesValidateBeforeCall(processId, timeout, states, null, null);
        Type localVarReturnType = new TypeToken<BusinessProcessWaitResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Wait For States (asynchronously)
     * Waits for any specified business process states to be hit. If the timeout is reached, the wait process will be stopped and the wait result returned.
     * @param processId The business process id. (required)
     * @param timeout Maximum time in milliseconds to wait for the business process completed state. (required)
     * @param states Comma-separated list of business process states to wait for. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listItemWaitForStatesAsync(String processId, Integer timeout, List<String> states, final ApiCallback<BusinessProcessWaitResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listItemWaitForStatesValidateBeforeCall(processId, timeout, states, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessProcessWaitResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
