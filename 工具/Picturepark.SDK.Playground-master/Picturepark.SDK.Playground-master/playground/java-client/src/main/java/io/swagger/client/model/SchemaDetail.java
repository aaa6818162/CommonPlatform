/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.AggregatorBase;
import io.swagger.client.model.DisplayPattern;
import io.swagger.client.model.FieldBase;
import io.swagger.client.model.SchemaType;
import io.swagger.client.model.SortInfo;
import io.swagger.client.model.StoreAudit;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SchemaDetail
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-04T14:36:42.044Z")
public class SchemaDetail {
  @SerializedName("id")
  private String id = null;

  @SerializedName("parentSchemaId")
  private String parentSchemaId = null;

  @SerializedName("types")
  private List<SchemaType> types = null;

  @SerializedName("layerSchemaIds")
  private List<String> layerSchemaIds = null;

  @SerializedName("displayPatterns")
  private List<DisplayPattern> displayPatterns = null;

  @SerializedName("fields")
  private List<FieldBase> fields = null;

  @SerializedName("sort")
  private List<SortInfo> sort = null;

  @SerializedName("aggregations")
  private List<AggregatorBase> aggregations = null;

  @SerializedName("sortOrder")
  private Integer sortOrder = null;

  @SerializedName("system")
  private Boolean system = null;

  @SerializedName("ownerTokenId")
  private String ownerTokenId = null;

  @SerializedName("public")
  private Boolean _public = null;

  @SerializedName("schemaPermissionSetIds")
  private List<String> schemaPermissionSetIds = null;

  @SerializedName("referencedInContentSchemaIds")
  private List<String> referencedInContentSchemaIds = null;

  @SerializedName("descendantSchemaIds")
  private List<String> descendantSchemaIds = null;

  @SerializedName("audit")
  private StoreAudit audit = null;

  public SchemaDetail id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The schema id.
   * @return id
  **/
  @ApiModelProperty(value = "The schema id.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public SchemaDetail parentSchemaId(String parentSchemaId) {
    this.parentSchemaId = parentSchemaId;
    return this;
  }

   /**
   * The parent schema id.
   * @return parentSchemaId
  **/
  @ApiModelProperty(value = "The parent schema id.")
  public String getParentSchemaId() {
    return parentSchemaId;
  }

  public void setParentSchemaId(String parentSchemaId) {
    this.parentSchemaId = parentSchemaId;
  }

  public SchemaDetail types(List<SchemaType> types) {
    this.types = types;
    return this;
  }

  public SchemaDetail addTypesItem(SchemaType typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<SchemaType>();
    }
    this.types.add(typesItem);
    return this;
  }

   /**
   * Types control schema usage.
   * @return types
  **/
  @ApiModelProperty(value = "Types control schema usage.")
  public List<SchemaType> getTypes() {
    return types;
  }

  public void setTypes(List<SchemaType> types) {
    this.types = types;
  }

  public SchemaDetail layerSchemaIds(List<String> layerSchemaIds) {
    this.layerSchemaIds = layerSchemaIds;
    return this;
  }

  public SchemaDetail addLayerSchemaIdsItem(String layerSchemaIdsItem) {
    if (this.layerSchemaIds == null) {
      this.layerSchemaIds = new ArrayList<String>();
    }
    this.layerSchemaIds.add(layerSchemaIdsItem);
    return this;
  }

   /**
   * An optional id list of schemas with type layer.
   * @return layerSchemaIds
  **/
  @ApiModelProperty(value = "An optional id list of schemas with type layer.")
  public List<String> getLayerSchemaIds() {
    return layerSchemaIds;
  }

  public void setLayerSchemaIds(List<String> layerSchemaIds) {
    this.layerSchemaIds = layerSchemaIds;
  }

  public SchemaDetail displayPatterns(List<DisplayPattern> displayPatterns) {
    this.displayPatterns = displayPatterns;
    return this;
  }

  public SchemaDetail addDisplayPatternsItem(DisplayPattern displayPatternsItem) {
    if (this.displayPatterns == null) {
      this.displayPatterns = new ArrayList<DisplayPattern>();
    }
    this.displayPatterns.add(displayPatternsItem);
    return this;
  }

   /**
   * Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.
   * @return displayPatterns
  **/
  @ApiModelProperty(value = "Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.")
  public List<DisplayPattern> getDisplayPatterns() {
    return displayPatterns;
  }

  public void setDisplayPatterns(List<DisplayPattern> displayPatterns) {
    this.displayPatterns = displayPatterns;
  }

  public SchemaDetail fields(List<FieldBase> fields) {
    this.fields = fields;
    return this;
  }

  public SchemaDetail addFieldsItem(FieldBase fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<FieldBase>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * The schema fields.
   * @return fields
  **/
  @ApiModelProperty(value = "The schema fields.")
  public List<FieldBase> getFields() {
    return fields;
  }

  public void setFields(List<FieldBase> fields) {
    this.fields = fields;
  }

  public SchemaDetail sort(List<SortInfo> sort) {
    this.sort = sort;
    return this;
  }

  public SchemaDetail addSortItem(SortInfo sortItem) {
    if (this.sort == null) {
      this.sort = new ArrayList<SortInfo>();
    }
    this.sort.add(sortItem);
    return this;
  }

   /**
   * Sorts content documents and/or list items.
   * @return sort
  **/
  @ApiModelProperty(value = "Sorts content documents and/or list items.")
  public List<SortInfo> getSort() {
    return sort;
  }

  public void setSort(List<SortInfo> sort) {
    this.sort = sort;
  }

  public SchemaDetail aggregations(List<AggregatorBase> aggregations) {
    this.aggregations = aggregations;
    return this;
  }

  public SchemaDetail addAggregationsItem(AggregatorBase aggregationsItem) {
    if (this.aggregations == null) {
      this.aggregations = new ArrayList<AggregatorBase>();
    }
    this.aggregations.add(aggregationsItem);
    return this;
  }

   /**
   * An optional list of aggregations to group content documents and list items.
   * @return aggregations
  **/
  @ApiModelProperty(value = "An optional list of aggregations to group content documents and list items.")
  public List<AggregatorBase> getAggregations() {
    return aggregations;
  }

  public void setAggregations(List<AggregatorBase> aggregations) {
    this.aggregations = aggregations;
  }

  public SchemaDetail sortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

   /**
   * A simple ordering property for schemas.
   * @return sortOrder
  **/
  @ApiModelProperty(required = true, value = "A simple ordering property for schemas.")
  public Integer getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
  }

  public SchemaDetail system(Boolean system) {
    this.system = system;
    return this;
  }

   /**
   * Is true when schema is system provided.
   * @return system
  **/
  @ApiModelProperty(required = true, value = "Is true when schema is system provided.")
  public Boolean getSystem() {
    return system;
  }

  public void setSystem(Boolean system) {
    this.system = system;
  }

  public SchemaDetail ownerTokenId(String ownerTokenId) {
    this.ownerTokenId = ownerTokenId;
    return this;
  }

   /**
   * The owner token id. Defines the schema owner.
   * @return ownerTokenId
  **/
  @ApiModelProperty(value = "The owner token id. Defines the schema owner.")
  public String getOwnerTokenId() {
    return ownerTokenId;
  }

  public void setOwnerTokenId(String ownerTokenId) {
    this.ownerTokenId = ownerTokenId;
  }

  public SchemaDetail _public(Boolean _public) {
    this._public = _public;
    return this;
  }

   /**
   * Opens list item document accessibility. If true the SchemaPermissionSetIds must be empty.
   * @return _public
  **/
  @ApiModelProperty(required = true, value = "Opens list item document accessibility. If true the SchemaPermissionSetIds must be empty.")
  public Boolean getPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }

  public SchemaDetail schemaPermissionSetIds(List<String> schemaPermissionSetIds) {
    this.schemaPermissionSetIds = schemaPermissionSetIds;
    return this;
  }

  public SchemaDetail addSchemaPermissionSetIdsItem(String schemaPermissionSetIdsItem) {
    if (this.schemaPermissionSetIds == null) {
      this.schemaPermissionSetIds = new ArrayList<String>();
    }
    this.schemaPermissionSetIds.add(schemaPermissionSetIdsItem);
    return this;
  }

   /**
   * An optional id list of schema permission sets which control list item permissions. When not empty Public must be false.
   * @return schemaPermissionSetIds
  **/
  @ApiModelProperty(value = "An optional id list of schema permission sets which control list item permissions. When not empty Public must be false.")
  public List<String> getSchemaPermissionSetIds() {
    return schemaPermissionSetIds;
  }

  public void setSchemaPermissionSetIds(List<String> schemaPermissionSetIds) {
    this.schemaPermissionSetIds = schemaPermissionSetIds;
  }

  public SchemaDetail referencedInContentSchemaIds(List<String> referencedInContentSchemaIds) {
    this.referencedInContentSchemaIds = referencedInContentSchemaIds;
    return this;
  }

  public SchemaDetail addReferencedInContentSchemaIdsItem(String referencedInContentSchemaIdsItem) {
    if (this.referencedInContentSchemaIds == null) {
      this.referencedInContentSchemaIds = new ArrayList<String>();
    }
    this.referencedInContentSchemaIds.add(referencedInContentSchemaIdsItem);
    return this;
  }

   /**
   * An optional id list of schemas with type content for a schema with type layer.
   * @return referencedInContentSchemaIds
  **/
  @ApiModelProperty(value = "An optional id list of schemas with type content for a schema with type layer.")
  public List<String> getReferencedInContentSchemaIds() {
    return referencedInContentSchemaIds;
  }

  public void setReferencedInContentSchemaIds(List<String> referencedInContentSchemaIds) {
    this.referencedInContentSchemaIds = referencedInContentSchemaIds;
  }

  public SchemaDetail descendantSchemaIds(List<String> descendantSchemaIds) {
    this.descendantSchemaIds = descendantSchemaIds;
    return this;
  }

  public SchemaDetail addDescendantSchemaIdsItem(String descendantSchemaIdsItem) {
    if (this.descendantSchemaIds == null) {
      this.descendantSchemaIds = new ArrayList<String>();
    }
    this.descendantSchemaIds.add(descendantSchemaIdsItem);
    return this;
  }

   /**
   * A complete id list of all descendant schemas.
   * @return descendantSchemaIds
  **/
  @ApiModelProperty(value = "A complete id list of all descendant schemas.")
  public List<String> getDescendantSchemaIds() {
    return descendantSchemaIds;
  }

  public void setDescendantSchemaIds(List<String> descendantSchemaIds) {
    this.descendantSchemaIds = descendantSchemaIds;
  }

  public SchemaDetail audit(StoreAudit audit) {
    this.audit = audit;
    return this;
  }

   /**
   * Get audit
   * @return audit
  **/
  @ApiModelProperty(value = "")
  public StoreAudit getAudit() {
    return audit;
  }

  public void setAudit(StoreAudit audit) {
    this.audit = audit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaDetail schemaDetail = (SchemaDetail) o;
    return Objects.equals(this.id, schemaDetail.id) &&
        Objects.equals(this.parentSchemaId, schemaDetail.parentSchemaId) &&
        Objects.equals(this.types, schemaDetail.types) &&
        Objects.equals(this.layerSchemaIds, schemaDetail.layerSchemaIds) &&
        Objects.equals(this.displayPatterns, schemaDetail.displayPatterns) &&
        Objects.equals(this.fields, schemaDetail.fields) &&
        Objects.equals(this.sort, schemaDetail.sort) &&
        Objects.equals(this.aggregations, schemaDetail.aggregations) &&
        Objects.equals(this.sortOrder, schemaDetail.sortOrder) &&
        Objects.equals(this.system, schemaDetail.system) &&
        Objects.equals(this.ownerTokenId, schemaDetail.ownerTokenId) &&
        Objects.equals(this._public, schemaDetail._public) &&
        Objects.equals(this.schemaPermissionSetIds, schemaDetail.schemaPermissionSetIds) &&
        Objects.equals(this.referencedInContentSchemaIds, schemaDetail.referencedInContentSchemaIds) &&
        Objects.equals(this.descendantSchemaIds, schemaDetail.descendantSchemaIds) &&
        Objects.equals(this.audit, schemaDetail.audit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, parentSchemaId, types, layerSchemaIds, displayPatterns, fields, sort, aggregations, sortOrder, system, ownerTokenId, _public, schemaPermissionSetIds, referencedInContentSchemaIds, descendantSchemaIds, audit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaDetail {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parentSchemaId: ").append(toIndentedString(parentSchemaId)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    layerSchemaIds: ").append(toIndentedString(layerSchemaIds)).append("\n");
    sb.append("    displayPatterns: ").append(toIndentedString(displayPatterns)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    aggregations: ").append(toIndentedString(aggregations)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    ownerTokenId: ").append(toIndentedString(ownerTokenId)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    schemaPermissionSetIds: ").append(toIndentedString(schemaPermissionSetIds)).append("\n");
    sb.append("    referencedInContentSchemaIds: ").append(toIndentedString(referencedInContentSchemaIds)).append("\n");
    sb.append("    descendantSchemaIds: ").append(toIndentedString(descendantSchemaIds)).append("\n");
    sb.append("    audit: ").append(toIndentedString(audit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

