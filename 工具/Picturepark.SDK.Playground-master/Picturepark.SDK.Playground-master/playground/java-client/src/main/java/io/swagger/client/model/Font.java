/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.FontType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Font
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-04T14:36:42.044Z")
public class Font {
  @SerializedName("childFontFiles")
  private List<String> childFontFiles = null;

  @SerializedName("composite")
  private Boolean composite = null;

  @SerializedName("fontFace")
  private String fontFace = null;

  @SerializedName("fontFamily")
  private String fontFamily = null;

  @SerializedName("fontFileName")
  private String fontFileName = null;

  @SerializedName("fontName")
  private String fontName = null;

  @SerializedName("fontType")
  private FontType fontType = null;

  @SerializedName("versionString")
  private String versionString = null;

  public Font childFontFiles(List<String> childFontFiles) {
    this.childFontFiles = childFontFiles;
    return this;
  }

  public Font addChildFontFilesItem(String childFontFilesItem) {
    if (this.childFontFiles == null) {
      this.childFontFiles = new ArrayList<String>();
    }
    this.childFontFiles.add(childFontFilesItem);
    return this;
  }

   /**
   * Get childFontFiles
   * @return childFontFiles
  **/
  @ApiModelProperty(value = "")
  public List<String> getChildFontFiles() {
    return childFontFiles;
  }

  public void setChildFontFiles(List<String> childFontFiles) {
    this.childFontFiles = childFontFiles;
  }

  public Font composite(Boolean composite) {
    this.composite = composite;
    return this;
  }

   /**
   * Get composite
   * @return composite
  **/
  @ApiModelProperty(value = "")
  public Boolean getComposite() {
    return composite;
  }

  public void setComposite(Boolean composite) {
    this.composite = composite;
  }

  public Font fontFace(String fontFace) {
    this.fontFace = fontFace;
    return this;
  }

   /**
   * Get fontFace
   * @return fontFace
  **/
  @ApiModelProperty(value = "")
  public String getFontFace() {
    return fontFace;
  }

  public void setFontFace(String fontFace) {
    this.fontFace = fontFace;
  }

  public Font fontFamily(String fontFamily) {
    this.fontFamily = fontFamily;
    return this;
  }

   /**
   * Get fontFamily
   * @return fontFamily
  **/
  @ApiModelProperty(value = "")
  public String getFontFamily() {
    return fontFamily;
  }

  public void setFontFamily(String fontFamily) {
    this.fontFamily = fontFamily;
  }

  public Font fontFileName(String fontFileName) {
    this.fontFileName = fontFileName;
    return this;
  }

   /**
   * Get fontFileName
   * @return fontFileName
  **/
  @ApiModelProperty(value = "")
  public String getFontFileName() {
    return fontFileName;
  }

  public void setFontFileName(String fontFileName) {
    this.fontFileName = fontFileName;
  }

  public Font fontName(String fontName) {
    this.fontName = fontName;
    return this;
  }

   /**
   * Get fontName
   * @return fontName
  **/
  @ApiModelProperty(value = "")
  public String getFontName() {
    return fontName;
  }

  public void setFontName(String fontName) {
    this.fontName = fontName;
  }

  public Font fontType(FontType fontType) {
    this.fontType = fontType;
    return this;
  }

   /**
   * Get fontType
   * @return fontType
  **/
  @ApiModelProperty(value = "")
  public FontType getFontType() {
    return fontType;
  }

  public void setFontType(FontType fontType) {
    this.fontType = fontType;
  }

  public Font versionString(String versionString) {
    this.versionString = versionString;
    return this;
  }

   /**
   * Get versionString
   * @return versionString
  **/
  @ApiModelProperty(value = "")
  public String getVersionString() {
    return versionString;
  }

  public void setVersionString(String versionString) {
    this.versionString = versionString;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Font font = (Font) o;
    return Objects.equals(this.childFontFiles, font.childFontFiles) &&
        Objects.equals(this.composite, font.composite) &&
        Objects.equals(this.fontFace, font.fontFace) &&
        Objects.equals(this.fontFamily, font.fontFamily) &&
        Objects.equals(this.fontFileName, font.fontFileName) &&
        Objects.equals(this.fontName, font.fontName) &&
        Objects.equals(this.fontType, font.fontType) &&
        Objects.equals(this.versionString, font.versionString);
  }

  @Override
  public int hashCode() {
    return Objects.hash(childFontFiles, composite, fontFace, fontFamily, fontFileName, fontName, fontType, versionString);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Font {\n");
    
    sb.append("    childFontFiles: ").append(toIndentedString(childFontFiles)).append("\n");
    sb.append("    composite: ").append(toIndentedString(composite)).append("\n");
    sb.append("    fontFace: ").append(toIndentedString(fontFace)).append("\n");
    sb.append("    fontFamily: ").append(toIndentedString(fontFamily)).append("\n");
    sb.append("    fontFileName: ").append(toIndentedString(fontFileName)).append("\n");
    sb.append("    fontName: ").append(toIndentedString(fontName)).append("\n");
    sb.append("    fontType: ").append(toIndentedString(fontType)).append("\n");
    sb.append("    versionString: ").append(toIndentedString(versionString)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

