/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Event;
import io.swagger.client.model.Reference;
import io.swagger.client.model.VersionInfo;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * XmpMM
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-04T14:36:42.044Z")
public class XmpMM {
  @SerializedName("derivedFrom")
  private Reference derivedFrom = null;

  @SerializedName("documentID")
  private String documentID = null;

  @SerializedName("history")
  private List<Event> history = null;

  @SerializedName("ingredients")
  private List<Reference> ingredients = null;

  @SerializedName("instanceID")
  private String instanceID = null;

  @SerializedName("managedFrom")
  private Reference managedFrom = null;

  @SerializedName("manager")
  private String manager = null;

  @SerializedName("manageTo")
  private String manageTo = null;

  @SerializedName("manageUI")
  private String manageUI = null;

  @SerializedName("managerVariant")
  private String managerVariant = null;

  @SerializedName("originalDocumentID")
  private String originalDocumentID = null;

  @SerializedName("renditionClass")
  private String renditionClass = null;

  @SerializedName("renditionParams")
  private String renditionParams = null;

  @SerializedName("versionID")
  private String versionID = null;

  @SerializedName("versions")
  private List<VersionInfo> versions = null;

  public XmpMM derivedFrom(Reference derivedFrom) {
    this.derivedFrom = derivedFrom;
    return this;
  }

   /**
   * Get derivedFrom
   * @return derivedFrom
  **/
  @ApiModelProperty(value = "")
  public Reference getDerivedFrom() {
    return derivedFrom;
  }

  public void setDerivedFrom(Reference derivedFrom) {
    this.derivedFrom = derivedFrom;
  }

  public XmpMM documentID(String documentID) {
    this.documentID = documentID;
    return this;
  }

   /**
   * Get documentID
   * @return documentID
  **/
  @ApiModelProperty(value = "")
  public String getDocumentID() {
    return documentID;
  }

  public void setDocumentID(String documentID) {
    this.documentID = documentID;
  }

  public XmpMM history(List<Event> history) {
    this.history = history;
    return this;
  }

  public XmpMM addHistoryItem(Event historyItem) {
    if (this.history == null) {
      this.history = new ArrayList<Event>();
    }
    this.history.add(historyItem);
    return this;
  }

   /**
   * Get history
   * @return history
  **/
  @ApiModelProperty(value = "")
  public List<Event> getHistory() {
    return history;
  }

  public void setHistory(List<Event> history) {
    this.history = history;
  }

  public XmpMM ingredients(List<Reference> ingredients) {
    this.ingredients = ingredients;
    return this;
  }

  public XmpMM addIngredientsItem(Reference ingredientsItem) {
    if (this.ingredients == null) {
      this.ingredients = new ArrayList<Reference>();
    }
    this.ingredients.add(ingredientsItem);
    return this;
  }

   /**
   * Get ingredients
   * @return ingredients
  **/
  @ApiModelProperty(value = "")
  public List<Reference> getIngredients() {
    return ingredients;
  }

  public void setIngredients(List<Reference> ingredients) {
    this.ingredients = ingredients;
  }

  public XmpMM instanceID(String instanceID) {
    this.instanceID = instanceID;
    return this;
  }

   /**
   * Get instanceID
   * @return instanceID
  **/
  @ApiModelProperty(value = "")
  public String getInstanceID() {
    return instanceID;
  }

  public void setInstanceID(String instanceID) {
    this.instanceID = instanceID;
  }

  public XmpMM managedFrom(Reference managedFrom) {
    this.managedFrom = managedFrom;
    return this;
  }

   /**
   * Get managedFrom
   * @return managedFrom
  **/
  @ApiModelProperty(value = "")
  public Reference getManagedFrom() {
    return managedFrom;
  }

  public void setManagedFrom(Reference managedFrom) {
    this.managedFrom = managedFrom;
  }

  public XmpMM manager(String manager) {
    this.manager = manager;
    return this;
  }

   /**
   * Get manager
   * @return manager
  **/
  @ApiModelProperty(value = "")
  public String getManager() {
    return manager;
  }

  public void setManager(String manager) {
    this.manager = manager;
  }

  public XmpMM manageTo(String manageTo) {
    this.manageTo = manageTo;
    return this;
  }

   /**
   * Get manageTo
   * @return manageTo
  **/
  @ApiModelProperty(value = "")
  public String getManageTo() {
    return manageTo;
  }

  public void setManageTo(String manageTo) {
    this.manageTo = manageTo;
  }

  public XmpMM manageUI(String manageUI) {
    this.manageUI = manageUI;
    return this;
  }

   /**
   * Get manageUI
   * @return manageUI
  **/
  @ApiModelProperty(value = "")
  public String getManageUI() {
    return manageUI;
  }

  public void setManageUI(String manageUI) {
    this.manageUI = manageUI;
  }

  public XmpMM managerVariant(String managerVariant) {
    this.managerVariant = managerVariant;
    return this;
  }

   /**
   * Get managerVariant
   * @return managerVariant
  **/
  @ApiModelProperty(value = "")
  public String getManagerVariant() {
    return managerVariant;
  }

  public void setManagerVariant(String managerVariant) {
    this.managerVariant = managerVariant;
  }

  public XmpMM originalDocumentID(String originalDocumentID) {
    this.originalDocumentID = originalDocumentID;
    return this;
  }

   /**
   * Get originalDocumentID
   * @return originalDocumentID
  **/
  @ApiModelProperty(value = "")
  public String getOriginalDocumentID() {
    return originalDocumentID;
  }

  public void setOriginalDocumentID(String originalDocumentID) {
    this.originalDocumentID = originalDocumentID;
  }

  public XmpMM renditionClass(String renditionClass) {
    this.renditionClass = renditionClass;
    return this;
  }

   /**
   * Get renditionClass
   * @return renditionClass
  **/
  @ApiModelProperty(value = "")
  public String getRenditionClass() {
    return renditionClass;
  }

  public void setRenditionClass(String renditionClass) {
    this.renditionClass = renditionClass;
  }

  public XmpMM renditionParams(String renditionParams) {
    this.renditionParams = renditionParams;
    return this;
  }

   /**
   * Get renditionParams
   * @return renditionParams
  **/
  @ApiModelProperty(value = "")
  public String getRenditionParams() {
    return renditionParams;
  }

  public void setRenditionParams(String renditionParams) {
    this.renditionParams = renditionParams;
  }

  public XmpMM versionID(String versionID) {
    this.versionID = versionID;
    return this;
  }

   /**
   * Get versionID
   * @return versionID
  **/
  @ApiModelProperty(value = "")
  public String getVersionID() {
    return versionID;
  }

  public void setVersionID(String versionID) {
    this.versionID = versionID;
  }

  public XmpMM versions(List<VersionInfo> versions) {
    this.versions = versions;
    return this;
  }

  public XmpMM addVersionsItem(VersionInfo versionsItem) {
    if (this.versions == null) {
      this.versions = new ArrayList<VersionInfo>();
    }
    this.versions.add(versionsItem);
    return this;
  }

   /**
   * Get versions
   * @return versions
  **/
  @ApiModelProperty(value = "")
  public List<VersionInfo> getVersions() {
    return versions;
  }

  public void setVersions(List<VersionInfo> versions) {
    this.versions = versions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    XmpMM xmpMM = (XmpMM) o;
    return Objects.equals(this.derivedFrom, xmpMM.derivedFrom) &&
        Objects.equals(this.documentID, xmpMM.documentID) &&
        Objects.equals(this.history, xmpMM.history) &&
        Objects.equals(this.ingredients, xmpMM.ingredients) &&
        Objects.equals(this.instanceID, xmpMM.instanceID) &&
        Objects.equals(this.managedFrom, xmpMM.managedFrom) &&
        Objects.equals(this.manager, xmpMM.manager) &&
        Objects.equals(this.manageTo, xmpMM.manageTo) &&
        Objects.equals(this.manageUI, xmpMM.manageUI) &&
        Objects.equals(this.managerVariant, xmpMM.managerVariant) &&
        Objects.equals(this.originalDocumentID, xmpMM.originalDocumentID) &&
        Objects.equals(this.renditionClass, xmpMM.renditionClass) &&
        Objects.equals(this.renditionParams, xmpMM.renditionParams) &&
        Objects.equals(this.versionID, xmpMM.versionID) &&
        Objects.equals(this.versions, xmpMM.versions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(derivedFrom, documentID, history, ingredients, instanceID, managedFrom, manager, manageTo, manageUI, managerVariant, originalDocumentID, renditionClass, renditionParams, versionID, versions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class XmpMM {\n");
    
    sb.append("    derivedFrom: ").append(toIndentedString(derivedFrom)).append("\n");
    sb.append("    documentID: ").append(toIndentedString(documentID)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("    ingredients: ").append(toIndentedString(ingredients)).append("\n");
    sb.append("    instanceID: ").append(toIndentedString(instanceID)).append("\n");
    sb.append("    managedFrom: ").append(toIndentedString(managedFrom)).append("\n");
    sb.append("    manager: ").append(toIndentedString(manager)).append("\n");
    sb.append("    manageTo: ").append(toIndentedString(manageTo)).append("\n");
    sb.append("    manageUI: ").append(toIndentedString(manageUI)).append("\n");
    sb.append("    managerVariant: ").append(toIndentedString(managerVariant)).append("\n");
    sb.append("    originalDocumentID: ").append(toIndentedString(originalDocumentID)).append("\n");
    sb.append("    renditionClass: ").append(toIndentedString(renditionClass)).append("\n");
    sb.append("    renditionParams: ").append(toIndentedString(renditionParams)).append("\n");
    sb.append("    versionID: ").append(toIndentedString(versionID)).append("\n");
    sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

