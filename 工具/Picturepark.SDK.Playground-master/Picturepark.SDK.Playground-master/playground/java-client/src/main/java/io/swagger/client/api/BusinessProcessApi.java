/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BusinessProcess;
import io.swagger.client.model.BusinessProcessSearchRequest;
import io.swagger.client.model.BusinessProcessSearchResult;
import io.swagger.client.model.BusinessProcessWaitResult;
import io.swagger.client.model.PictureparkException;
import io.swagger.client.model.SendMessageRequest;
import io.swagger.client.model.StartProcessRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BusinessProcessApi {
    private ApiClient apiClient;

    public BusinessProcessApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BusinessProcessApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for businessProcessMarkAsEnded
     * @param processId The process id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call businessProcessMarkAsEndedCall(String processId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/businessProcesses/processes/{processId}/markAsEnded"
            .replaceAll("\\{" + "processId" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call businessProcessMarkAsEndedValidateBeforeCall(String processId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling businessProcessMarkAsEnded(Async)");
        }
        
        
        com.squareup.okhttp.Call call = businessProcessMarkAsEndedCall(processId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Mark as ended
     * Mark a given process as ended
     * @param processId The process id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void businessProcessMarkAsEnded(String processId) throws ApiException {
        businessProcessMarkAsEndedWithHttpInfo(processId);
    }

    /**
     * Mark as ended
     * Mark a given process as ended
     * @param processId The process id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> businessProcessMarkAsEndedWithHttpInfo(String processId) throws ApiException {
        com.squareup.okhttp.Call call = businessProcessMarkAsEndedValidateBeforeCall(processId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Mark as ended (asynchronously)
     * Mark a given process as ended
     * @param processId The process id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call businessProcessMarkAsEndedAsync(String processId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = businessProcessMarkAsEndedValidateBeforeCall(processId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for businessProcessSearch
     * @param businessProcessSearchRequest The business process request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call businessProcessSearchCall(BusinessProcessSearchRequest businessProcessSearchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = businessProcessSearchRequest;
        
        // create path and map variables
        String localVarPath = "/v1/businessProcesses/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call businessProcessSearchValidateBeforeCall(BusinessProcessSearchRequest businessProcessSearchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessProcessSearchRequest' is set
        if (businessProcessSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'businessProcessSearchRequest' when calling businessProcessSearch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = businessProcessSearchCall(businessProcessSearchRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search
     * Search for business processes
     * @param businessProcessSearchRequest The business process request (required)
     * @return BusinessProcessSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessProcessSearchResult businessProcessSearch(BusinessProcessSearchRequest businessProcessSearchRequest) throws ApiException {
        ApiResponse<BusinessProcessSearchResult> resp = businessProcessSearchWithHttpInfo(businessProcessSearchRequest);
        return resp.getData();
    }

    /**
     * Search
     * Search for business processes
     * @param businessProcessSearchRequest The business process request (required)
     * @return ApiResponse&lt;BusinessProcessSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessProcessSearchResult> businessProcessSearchWithHttpInfo(BusinessProcessSearchRequest businessProcessSearchRequest) throws ApiException {
        com.squareup.okhttp.Call call = businessProcessSearchValidateBeforeCall(businessProcessSearchRequest, null, null);
        Type localVarReturnType = new TypeToken<BusinessProcessSearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search (asynchronously)
     * Search for business processes
     * @param businessProcessSearchRequest The business process request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call businessProcessSearchAsync(BusinessProcessSearchRequest businessProcessSearchRequest, final ApiCallback<BusinessProcessSearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = businessProcessSearchValidateBeforeCall(businessProcessSearchRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessProcessSearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for businessProcessSendMessage
     * @param processId The process id (required)
     * @param request The send message request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call businessProcessSendMessageCall(String processId, SendMessageRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v1/businessProcesses/processes/{processId}/message"
            .replaceAll("\\{" + "processId" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call businessProcessSendMessageValidateBeforeCall(String processId, SendMessageRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling businessProcessSendMessage(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling businessProcessSendMessage(Async)");
        }
        
        
        com.squareup.okhttp.Call call = businessProcessSendMessageCall(processId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send message
     * Send message to given process 
     * @param processId The process id (required)
     * @param request The send message request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void businessProcessSendMessage(String processId, SendMessageRequest request) throws ApiException {
        businessProcessSendMessageWithHttpInfo(processId, request);
    }

    /**
     * Send message
     * Send message to given process 
     * @param processId The process id (required)
     * @param request The send message request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> businessProcessSendMessageWithHttpInfo(String processId, SendMessageRequest request) throws ApiException {
        com.squareup.okhttp.Call call = businessProcessSendMessageValidateBeforeCall(processId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Send message (asynchronously)
     * Send message to given process 
     * @param processId The process id (required)
     * @param request The send message request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call businessProcessSendMessageAsync(String processId, SendMessageRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = businessProcessSendMessageValidateBeforeCall(processId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for businessProcessStart
     * @param processDefinitionId The process definition id (required)
     * @param request The start process request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call businessProcessStartCall(String processDefinitionId, StartProcessRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v1/businessProcesses/processDefinitions/{processDefinitionId}/start"
            .replaceAll("\\{" + "processDefinitionId" + "\\}", apiClient.escapeString(processDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call businessProcessStartValidateBeforeCall(String processDefinitionId, StartProcessRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processDefinitionId' is set
        if (processDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'processDefinitionId' when calling businessProcessStart(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling businessProcessStart(Async)");
        }
        
        
        com.squareup.okhttp.Call call = businessProcessStartCall(processDefinitionId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start
     * Starts a process with given definition 
     * @param processDefinitionId The process definition id (required)
     * @param request The start process request (required)
     * @return BusinessProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessProcess businessProcessStart(String processDefinitionId, StartProcessRequest request) throws ApiException {
        ApiResponse<BusinessProcess> resp = businessProcessStartWithHttpInfo(processDefinitionId, request);
        return resp.getData();
    }

    /**
     * Start
     * Starts a process with given definition 
     * @param processDefinitionId The process definition id (required)
     * @param request The start process request (required)
     * @return ApiResponse&lt;BusinessProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessProcess> businessProcessStartWithHttpInfo(String processDefinitionId, StartProcessRequest request) throws ApiException {
        com.squareup.okhttp.Call call = businessProcessStartValidateBeforeCall(processDefinitionId, request, null, null);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start (asynchronously)
     * Starts a process with given definition 
     * @param processDefinitionId The process definition id (required)
     * @param request The start process request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call businessProcessStartAsync(String processDefinitionId, StartProcessRequest request, final ApiCallback<BusinessProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = businessProcessStartValidateBeforeCall(processDefinitionId, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for businessProcessWaitForStates
     * @param processId The process id (required)
     * @param states The states to wait for (required)
     * @param timeout The timeout in ms (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call businessProcessWaitForStatesCall(String processId, String states, Integer timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/businessProcesses/{processId}/wait"
            .replaceAll("\\{" + "processId" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (states != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "states", states));
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "timeout", timeout));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call businessProcessWaitForStatesValidateBeforeCall(String processId, String states, Integer timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling businessProcessWaitForStates(Async)");
        }
        
        // verify the required parameter 'states' is set
        if (states == null) {
            throw new ApiException("Missing the required parameter 'states' when calling businessProcessWaitForStates(Async)");
        }
        
        // verify the required parameter 'timeout' is set
        if (timeout == null) {
            throw new ApiException("Missing the required parameter 'timeout' when calling businessProcessWaitForStates(Async)");
        }
        
        
        com.squareup.okhttp.Call call = businessProcessWaitForStatesCall(processId, states, timeout, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Wait for states
     * Wait for given process states.
     * @param processId The process id (required)
     * @param states The states to wait for (required)
     * @param timeout The timeout in ms (required)
     * @return BusinessProcessWaitResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessProcessWaitResult businessProcessWaitForStates(String processId, String states, Integer timeout) throws ApiException {
        ApiResponse<BusinessProcessWaitResult> resp = businessProcessWaitForStatesWithHttpInfo(processId, states, timeout);
        return resp.getData();
    }

    /**
     * Wait for states
     * Wait for given process states.
     * @param processId The process id (required)
     * @param states The states to wait for (required)
     * @param timeout The timeout in ms (required)
     * @return ApiResponse&lt;BusinessProcessWaitResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessProcessWaitResult> businessProcessWaitForStatesWithHttpInfo(String processId, String states, Integer timeout) throws ApiException {
        com.squareup.okhttp.Call call = businessProcessWaitForStatesValidateBeforeCall(processId, states, timeout, null, null);
        Type localVarReturnType = new TypeToken<BusinessProcessWaitResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Wait for states (asynchronously)
     * Wait for given process states.
     * @param processId The process id (required)
     * @param states The states to wait for (required)
     * @param timeout The timeout in ms (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call businessProcessWaitForStatesAsync(String processId, String states, Integer timeout, final ApiCallback<BusinessProcessWaitResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = businessProcessWaitForStatesValidateBeforeCall(processId, states, timeout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessProcessWaitResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
