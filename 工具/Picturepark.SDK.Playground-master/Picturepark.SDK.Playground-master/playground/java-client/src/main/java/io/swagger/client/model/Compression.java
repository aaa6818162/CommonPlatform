/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Corresponds to tiff.CompressionChoice
 */
@JsonAdapter(Compression.Adapter.class)
public enum Compression {
  
  UNCOMPRESSED("Uncompressed"),
  
  CCITT("CCITT"),
  
  T4("T4"),
  
  T6("T6"),
  
  LZW("LZW"),
  
  OJPEG("OJPEG"),
  
  JPEG("JPEG"),
  
  DEFLATE("Deflate"),
  
  T82("T82"),
  
  T43("T43"),
  
  NEXT("NeXT"),
  
  ARW("ARW"),
  
  RAW("RAW"),
  
  SRW("SRW"),
  
  GROUP3_1D("Group3_1D"),
  
  PACKBITS("PackBits"),
  
  THUNDERSCAN("ThunderScan"),
  
  KDC("KDC"),
  
  RASTERPADDING("RasterPadding"),
  
  LINEWORK("LineWork"),
  
  HIGHCONTINUOUS("HighContinuous"),
  
  BINARYLINEWORK("BinaryLineWork"),
  
  PIXARFILM("PixarFilm"),
  
  PIXARLOG("PixarLog"),
  
  DCS("DCS"),
  
  JBIG("JBIG"),
  
  JPEG2000("JPEG2000"),
  
  NEF("NEF"),
  
  JBIG2("JBIG2"),
  
  DCR("DCR"),
  
  PEF("PEF");

  private String value;

  Compression(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Compression fromValue(String text) {
    for (Compression b : Compression.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<Compression> {
    @Override
    public void write(final JsonWriter jsonWriter, final Compression enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Compression read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Compression.fromValue(String.valueOf(value));
    }
  }
}

