/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BusinessProcess;
import io.swagger.client.model.BusinessProcessWaitResult;
import io.swagger.client.model.ListItemAggregationRequest;
import io.swagger.client.model.ListItemCreateRequest;
import io.swagger.client.model.ListItemDetail;
import io.swagger.client.model.ListItemFieldsFilterUpdateRequest;
import io.swagger.client.model.ListItemFieldsUpdateRequest;
import io.swagger.client.model.ListItemSearchRequest;
import io.swagger.client.model.ListItemSearchResult;
import io.swagger.client.model.ListItemUpdateRequest;
import io.swagger.client.model.ObjectAggregationResult;
import io.swagger.client.model.PictureparkException;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ListItemApi
 */
@Ignore
public class ListItemApiTest {

    private final ListItemApi api = new ListItemApi();

    
    /**
     * Aggregate
     *
     * Aggregates list items as specified in the aggregation request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listItemAggregateTest() throws ApiException {
        ListItemAggregationRequest listItemAggregationRequest = null;
        ObjectAggregationResult response = api.listItemAggregate(listItemAggregationRequest);

        // TODO: test validations
    }
    
    /**
     * Create Single
     *
     * The creation of a single list item is executed asynchronous. However, for the specified timeout completion of the creation process is awaited. If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listItemCreateTest() throws ApiException {
        ListItemCreateRequest listItem = null;
        Boolean resolve = null;
        Integer timeout = null;
        List<String> patterns = null;
        ListItemDetail response = api.listItemCreate(listItem, resolve, timeout, patterns);

        // TODO: test validations
    }
    
    /**
     * Create Many
     *
     * The creation of multiple list items is executed asynchronous. To keep track of the creation progress a business process is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listItemCreateManyTest() throws ApiException {
        List<ListItemCreateRequest> objects = null;
        BusinessProcess response = api.listItemCreateMany(objects);

        // TODO: test validations
    }
    
    /**
     * Delete Many
     *
     * The deletion of multiple list items is executed asynchronous. To keep track of the deletion progress a business process is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listItemDeleteManyTest() throws ApiException {
        List<String> ids = null;
        BusinessProcess response = api.listItemDeleteMany(ids);

        // TODO: test validations
    }
    
    /**
     * Get Single
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listItemGetTest() throws ApiException {
        String listItemId = null;
        Boolean resolve = null;
        List<String> patterns = null;
        ListItemDetail response = api.listItemGet(listItemId, resolve, patterns);

        // TODO: test validations
    }
    
    /**
     * Import
     *
     * Imports all schemas and optionally list items as specified in the json file. Duplicate schemas or list items in the target system will be omitted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listItemImportTest() throws ApiException {
        String contentId = null;
        String fileTransferId = null;
        Boolean includeObjects = null;
        api.listItemImport(contentId, fileTransferId, includeObjects);

        // TODO: test validations
    }
    
    /**
     * Search
     *
     * Searches list items as specified in the search request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listItemSearchTest() throws ApiException {
        ListItemSearchRequest listItemSearchRequest = null;
        ListItemSearchResult response = api.listItemSearch(listItemSearchRequest);

        // TODO: test validations
    }
    
    /**
     * Update Single
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listItemUpdateTest() throws ApiException {
        String listItemId = null;
        ListItemUpdateRequest updateRequest = null;
        Boolean resolve = null;
        Integer timeout = null;
        List<String> patterns = null;
        ListItemDetail response = api.listItemUpdate(listItemId, updateRequest, resolve, timeout, patterns);

        // TODO: test validations
    }
    
    /**
     * Update - Fields
     *
     * Update fields of multiple list items. A list of listItemIds must be provided to limit the update to specific list items.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listItemUpdateFieldsTest() throws ApiException {
        ListItemFieldsUpdateRequest updateRequest = null;
        BusinessProcess response = api.listItemUpdateFields(updateRequest);

        // TODO: test validations
    }
    
    /**
     * Update by filter - Fields
     *
     * Update fields of multiple list items. A filter must be provided to limit the update to specific list items.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listItemUpdateFieldsByFilterTest() throws ApiException {
        ListItemFieldsFilterUpdateRequest updateRequest = null;
        BusinessProcess response = api.listItemUpdateFieldsByFilter(updateRequest);

        // TODO: test validations
    }
    
    /**
     * Update Many
     *
     * The update of multiple list items is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listItemUpdateManyTest() throws ApiException {
        List<ListItemUpdateRequest> objects = null;
        BusinessProcess response = api.listItemUpdateMany(objects);

        // TODO: test validations
    }
    
    /**
     * Wait For States
     *
     * Waits for any specified business process states to be hit. If the timeout is reached, the wait process will be stopped and the wait result returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listItemWaitForStatesTest() throws ApiException {
        String processId = null;
        Integer timeout = null;
        List<String> states = null;
        BusinessProcessWaitResult response = api.listItemWaitForStates(processId, timeout, states);

        // TODO: test validations
    }
    
}
