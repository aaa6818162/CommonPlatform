/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Blacklist;
import io.swagger.client.model.CreateTransferRequest;
import java.io.File;
import io.swagger.client.model.FileTransfer2ContentCreateRequest;
import io.swagger.client.model.FileTransferDeleteRequest;
import io.swagger.client.model.FileTransferDetail;
import io.swagger.client.model.FileTransferPartial2ContentCreateRequest;
import io.swagger.client.model.FileTransferSearchRequest;
import io.swagger.client.model.FileTransferSearchResult;
import io.swagger.client.model.PictureparkException;
import io.swagger.client.model.Transfer;
import io.swagger.client.model.TransferDetail;
import io.swagger.client.model.TransferSearchRequest;
import io.swagger.client.model.TransferSearchResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransferApi
 */
@Ignore
public class TransferApiTest {

    private final TransferApi api = new TransferApi();

    
    /**
     * Cancels an active transfer. Valid states: TODO
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transferCancelTransferTest() throws ApiException {
        String transferId = null;
        api.transferCancelTransfer(transferId);

        // TODO: test validations
    }
    
    /**
     * Create Transfer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transferCreateTest() throws ApiException {
        CreateTransferRequest request = null;
        Transfer response = api.transferCreate(request);

        // TODO: test validations
    }
    
    /**
     * Delete Transfer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transferDeleteTest() throws ApiException {
        String transferId = null;
        api.transferDelete(transferId);

        // TODO: test validations
    }
    
    /**
     * Delete Files
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transferDeleteFilesTest() throws ApiException {
        FileTransferDeleteRequest request = null;
        api.transferDeleteFiles(request);

        // TODO: test validations
    }
    
    /**
     * Get Transferdetail
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transferGetTest() throws ApiException {
        String transferId = null;
        TransferDetail response = api.transferGet(transferId);

        // TODO: test validations
    }
    
    /**
     * Get Blacklist
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transferGetBlacklistTest() throws ApiException {
        Blacklist response = api.transferGetBlacklist();

        // TODO: test validations
    }
    
    /**
     * Get File
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transferGetFileTest() throws ApiException {
        String fileTransferId = null;
        FileTransferDetail response = api.transferGetFile(fileTransferId);

        // TODO: test validations
    }
    
    /**
     * Delete Transfer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transferImportTransferTest() throws ApiException {
        String transferId = null;
        FileTransfer2ContentCreateRequest request = null;
        Transfer response = api.transferImportTransfer(transferId, request);

        // TODO: test validations
    }
    
    /**
     * Create a partial import
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transferPartialImportTest() throws ApiException {
        String transferId = null;
        FileTransferPartial2ContentCreateRequest request = null;
        Transfer response = api.transferPartialImport(transferId, request);

        // TODO: test validations
    }
    
    /**
     * Search 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transferSearchTest() throws ApiException {
        TransferSearchRequest request = null;
        TransferSearchResult response = api.transferSearch(request);

        // TODO: test validations
    }
    
    /**
     * Search for files
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transferSearchFilesTest() throws ApiException {
        FileTransferSearchRequest request = null;
        FileTransferSearchResult response = api.transferSearchFiles(request);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transferUploadFileTest() throws ApiException {
        String transferId = null;
        String identifier = null;
        File formFile = null;
        String relativePath = null;
        Long chunkNumber = null;
        Long currentChunkSize = null;
        Long totalSize = null;
        Long totalChunks = null;
        api.transferUploadFile(transferId, identifier, formFile, relativePath, chunkNumber, currentChunkSize, totalSize, totalChunks);

        // TODO: test validations
    }
    
}
