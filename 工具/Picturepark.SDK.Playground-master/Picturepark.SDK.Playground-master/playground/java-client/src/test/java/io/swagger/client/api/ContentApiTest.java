/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BusinessProcess;
import io.swagger.client.model.ContentAggregationRequest;
import io.swagger.client.model.ContentBatchDownloadItem;
import io.swagger.client.model.ContentBatchDownloadRequest;
import io.swagger.client.model.ContentDeactivationRequest;
import io.swagger.client.model.ContentDetail;
import io.swagger.client.model.ContentFileUpdateRequest;
import io.swagger.client.model.ContentNotFoundException;
import io.swagger.client.model.ContentOwnershipTransferRequest;
import io.swagger.client.model.ContentReactivationRequest;
import io.swagger.client.model.ContentSearchRequest;
import io.swagger.client.model.ContentSearchResult;
import io.swagger.client.model.ContentsMetadataUpdateRequest;
import io.swagger.client.model.ContentsOwnershipTransferRequest;
import io.swagger.client.model.CreateContentRequest;
import java.io.File;
import io.swagger.client.model.FilterContentsMetadataUpdateRequest;
import io.swagger.client.model.ObjectAggregationResult;
import io.swagger.client.model.PictureparkException;
import io.swagger.client.model.UpdateContentMetadataRequest;
import io.swagger.client.model.UpdateContentPermissionsRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContentApi
 */
@Ignore
public class ContentApiTest {

    private final ContentApi api = new ContentApi();

    
    /**
     * Aggregate
     *
     * Aggregates content as specified in the aggregation request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentAggregateTest() throws ApiException {
        ContentAggregationRequest contentAggregationRequest = null;
        ObjectAggregationResult response = api.contentAggregate(contentAggregationRequest);

        // TODO: test validations
    }
    
    /**
     * Aggregate by Channel
     *
     * Aggregates content as specified in the aggregation request and limits the aggregation results to the specified channel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentAggregateByChannelTest() throws ApiException {
        String channelId = null;
        ContentAggregationRequest contentAggregationRequest = null;
        ObjectAggregationResult response = api.contentAggregateByChannel(channelId, contentAggregationRequest);

        // TODO: test validations
    }
    
    /**
     * Create Single
     *
     * The creation of content is executed asynchronous. However, for the specified timeout completion of the creation process is awaited. If the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentCreateContentTest() throws ApiException {
        CreateContentRequest createRequest = null;
        Boolean resolve = null;
        Integer timeout = null;
        List<String> patterns = null;
        ContentDetail response = api.contentCreateContent(createRequest, resolve, timeout, patterns);

        // TODO: test validations
    }
    
    /**
     * Creates a content batch download
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentCreateDownloadLinkTest() throws ApiException {
        ContentBatchDownloadRequest request = null;
        ContentBatchDownloadItem response = api.contentCreateDownloadLink(request);

        // TODO: test validations
    }
    
    /**
     * Deactivates a content
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentDeactivateTest() throws ApiException {
        String contentId = null;
        Integer timeout = null;
        api.contentDeactivate(contentId, timeout);

        // TODO: test validations
    }
    
    /**
     * Dactivate Many - Content
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentDeactivateManyTest() throws ApiException {
        ContentDeactivationRequest deactivationRequest = null;
        BusinessProcess response = api.contentDeactivateMany(deactivationRequest);

        // TODO: test validations
    }
    
    /**
     * Downloads content in a specific outputformat
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentDownloadTest() throws ApiException {
        String contentId = null;
        String outputFormatId = null;
        String range = null;
        File response = api.contentDownload(contentId, outputFormatId, range);

        // TODO: test validations
    }
    
    /**
     * Download resized content
     *
     * Provides a endpoint to get reseized content
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentDownloadResizedTest() throws ApiException {
        String contentId = null;
        String outputFormatId = null;
        Integer width = null;
        Integer height = null;
        File response = api.contentDownloadResized(contentId, outputFormatId, width, height);

        // TODO: test validations
    }
    
    /**
     * Get Thumbnail
     *
     * Provides a lightweight endpoint to get content thumbnails
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentDownloadThumbnailTest() throws ApiException {
        String contentId = null;
        String size = null;
        File response = api.contentDownloadThumbnail(contentId, size);

        // TODO: test validations
    }
    
    /**
     * Get Single
     *
     * Gets a content document by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentGetTest() throws ApiException {
        String contentId = null;
        Boolean resolve = null;
        List<String> patterns = null;
        ContentDetail response = api.contentGet(contentId, resolve, patterns);

        // TODO: test validations
    }
    
    /**
     * Get Many
     *
     * Gets multiple content documents by ids.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentGetManyTest() throws ApiException {
        List<String> ids = null;
        Boolean resolve = null;
        List<String> patterns = null;
        List<ContentDetail> response = api.contentGetMany(ids, resolve, patterns);

        // TODO: test validations
    }
    
    /**
     * Reactivate - Content
     *
     * The reactivation of content is executed asynchronous. However, for the specified timeout completion of the reactivation process is awaited. If the reactivation process is not completed by reaching the specified timeout, the reactivation process continues, but null is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentReactivateTest() throws ApiException {
        String contentId = null;
        Boolean resolve = null;
        Integer timeout = null;
        List<String> patterns = null;
        ContentDetail response = api.contentReactivate(contentId, resolve, timeout, patterns);

        // TODO: test validations
    }
    
    /**
     * Reactivate Many - Content
     *
     * The reactivation multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentReactivateManyTest() throws ApiException {
        ContentReactivationRequest reactivationRequest = null;
        BusinessProcess response = api.contentReactivateMany(reactivationRequest);

        // TODO: test validations
    }
    
    /**
     * Search
     *
     * Searches contents as specified in the search request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentSearchTest() throws ApiException {
        ContentSearchRequest contentSearchRequest = null;
        ContentSearchResult response = api.contentSearch(contentSearchRequest);

        // TODO: test validations
    }
    
    /**
     * Search By Channel
     *
     * Searches contents as specified in the search request and limits the search results to the specified channel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentSearchByChannelTest() throws ApiException {
        String channelId = null;
        ContentSearchRequest contentSearchRequest = null;
        ContentSearchResult response = api.contentSearchByChannel(channelId, contentSearchRequest);

        // TODO: test validations
    }
    
    /**
     * Process many ownership trasnfer request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentTransferOwnershipManyTest() throws ApiException {
        ContentsOwnershipTransferRequest contentsOwnershipTransferRequest = null;
        BusinessProcess response = api.contentTransferOwnershipMany(contentsOwnershipTransferRequest);

        // TODO: test validations
    }
    
    /**
     * Update Single - File
     *
     * Update binary file of existing content. The file must already be uploaded before calling this endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentUpdateFileTest() throws ApiException {
        String contentId = null;
        ContentFileUpdateRequest updateRequest = null;
        BusinessProcess response = api.contentUpdateFile(contentId, updateRequest);

        // TODO: test validations
    }
    
    /**
     * Update Single - Metadata
     *
     * The update of content metadata is executed asynchronous. However, for the specified timeout completion of the update process is awaited. If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentUpdateMetadataTest() throws ApiException {
        String contentId = null;
        UpdateContentMetadataRequest updateRequest = null;
        Boolean resolve = null;
        Integer timeout = null;
        List<String> patterns = null;
        ContentDetail response = api.contentUpdateMetadata(contentId, updateRequest, resolve, timeout, patterns);

        // TODO: test validations
    }
    
    /**
     * Update by filter - Metadata
     *
     * Update metadata of multiple contents. A filter must be provided to limit the update to specific contents.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentUpdateMetadataByFilterTest() throws ApiException {
        FilterContentsMetadataUpdateRequest updateRequest = null;
        BusinessProcess response = api.contentUpdateMetadataByFilter(updateRequest);

        // TODO: test validations
    }
    
    /**
     * Update Many - Metadata
     *
     * The metadata update of multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentUpdateMetadataManyTest() throws ApiException {
        ContentsMetadataUpdateRequest updateRequest = null;
        BusinessProcess response = api.contentUpdateMetadataMany(updateRequest);

        // TODO: test validations
    }
    
    /**
     * Update Single - Permissions
     *
     * The update of content permissions is executed asynchronous. However, for the specified timeout completion of the update process is awaited. If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentUpdatePermissionsTest() throws ApiException {
        String contentId = null;
        UpdateContentPermissionsRequest updateRequest = null;
        Boolean resolve = null;
        Integer timeout = null;
        List<String> patterns = null;
        ContentDetail response = api.contentUpdatePermissions(contentId, updateRequest, resolve, timeout, patterns);

        // TODO: test validations
    }
    
    /**
     * Update Many - Permissions
     *
     * The permission update of multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentUpdatePermissionsManyTest() throws ApiException {
        List<UpdateContentPermissionsRequest> updateRequest = null;
        BusinessProcess response = api.contentUpdatePermissionsMany(updateRequest);

        // TODO: test validations
    }
    
    /**
     * Update Single - OwnershipTransfer
     *
     * The update of content transfer is executed asynchronous. However, for the specified timeout completion of the update process is awaited. If the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contentUpdateTransferOwnershipTest() throws ApiException {
        String contentId = null;
        ContentOwnershipTransferRequest updateRequest = null;
        Integer timeout = null;
        ContentDetail response = api.contentUpdateTransferOwnership(contentId, updateRequest, timeout);

        // TODO: test validations
    }
    
}
