<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.AutoRest</name>
    </assembly>
    <members>
        <member name="T:Cake.AutoRest.AutoRestAliases">
            <summary>
            Provides a wrapper around AutoRest functinoality for use in Cake scripts
            </summary>
        </member>
        <member name="M:Cake.AutoRest.AutoRestAliases.AutoRest(Cake.Core.ICakeContext)">
            <summary>
            Get an AutoRestRunner for controlling AutoRest
            </summary>
            <param name="ctx">The script context</param>
            <returns></returns>
            <example>
            <para>Run with all the defaults:</para>
            <code>
            <![CDATA[
            Task("Use-Defaults")
                .Does(() => {
                    AutoRest.Generate("./sample.json");
            });
            ]]></code>
            <para>Configure using AutoRestSettings object</para>
            <code>
            <![CDATA[
            Task("Settings-Object")
            .Does(() => {
            var settings = new AutoRestSettings {
                Namespace = "Cake",
                Generator = CodeGenerator.AzureCSharp,
                ClientName = "Cake.AutoRest",
                HeaderComment = "Generated by Cake.AutoRest",
                OutputDirectory = "./dist/client"
                };
                AutoRest.Generate("./sample.json", settings);
            });
            ]]></code>
            <para>Configure using fluent interface (equivalent to above)</para>
            <code>
            <![CDATA[
            Task("Fluent-Interface")
            .Does(() => {
                AutoRest.Generate("./sample.json", settings =>
                    settings.UseNamespace("Cake")
                        .UseClientName("Cake.AutoRest")
                        .AddHeaderComment("Generated by Cake.AutoRest")
                        .WithGenerator(CodeGenerator.AzureCSharp)
                        .OutputToDirectory("./dist/client"));
            });
            ]]>
            </code>
            </example>
            
        </member>
        <member name="T:Cake.AutoRest.AutoRestRunner">
            <summary>
            Wrapper around Azure AutoRest functionality to generate client libraries for RESTful API services
            </summary>
        </member>
        <member name="M:Cake.AutoRest.AutoRestRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.Tooling.IToolLocator,Cake.Core.Diagnostics.ICakeLog)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.AutoRest.AutoRestRunner"/> class
            </summary>
            <param name="fileSystem">The file system</param>
            <param name="environment">The environment</param>
            <param name="processRunner">Process runner</param>
            <param name="tools">Registered tools</param>
            <param name="log">Log</param>
        </member>
        <member name="M:Cake.AutoRest.AutoRestRunner.GetToolName">
            <summary>
            Gets the tool name
            </summary>
            <returns>Tool name</returns>
        </member>
        <member name="M:Cake.AutoRest.AutoRestRunner.GetToolExecutableNames">
            <summary>
            Gets the possible executable names for the tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cake.AutoRest.AutoRestRunner.Generate(Cake.Core.IO.FilePath,System.Action{Cake.AutoRest.AutoRestSettings})">
            <summary>
            Invokes AutoRest to create a client model for the provided API spec, optionally using the provided settings.
            </summary>
            <param name="inputFile">Local API specification file (e.g. swagger definition)</param>
            <param name="configure">Optional action to configure runner settings</param>
            <returns>The directory where the client was generated</returns>
            <example>
            <para>Run with all the defaults:</para>
            <code>
            <![CDATA[
            Task("Use-Defaults")
                .Does(() => {
                    AutoRest.Generate("./sample.json");
            });
            ]]></code>
            <para>Configure using fluent interface (equivalent to above)</para>
            <code>
            <![CDATA[
            Task("Fluent-Interface")
            .Does(() => {
                AutoRest.Generate("./sample.json", settings =>
                    settings.UseNamespace("Cake")
                        .UseClientName("Cake.AutoRest")
                        .AddHeaderComment("Generated by Cake.AutoRest")
                        .WithGenerator(CodeGenerator.AzureCSharp)
                        .OutputToDirectory("./dist/client"));
            });
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Cake.AutoRest.AutoRestRunner.Generate(Cake.Core.IO.FilePath,Cake.AutoRest.AutoRestSettings)">
            <summary>
            Invokes AutoRest to create a client model for the provided API spec, using the provided settings
            </summary>
            <param name="inputFile">Local API specification file (e.g. swagger definition)</param>
            <param name="settings">Settings to use when invoking AutoRest</param>
            <returns>The directory where the client was generated</returns>
            <example>
            <para>Configure using AutoRestSettings object</para>
            <code>
            <![CDATA[
            Task("Settings-Object")
            .Does(() => {
            var settings = new AutoRestSettings {
                Namespace = "Cake",
                Generator = CodeGenerator.AzureCSharp,
                ClientName = "Cake.AutoRest",
                HeaderComment = "Generated by Cake.AutoRest",
                OutputDirectory = "./dist/client"
                };
                AutoRest.Generate("./sample.json", settings);
            });
            ]]></code>
            </example>
        </member>
        <member name="T:Cake.AutoRest.AutoRestSettings">
            <summary>
            Settings to control the AutoRest generation process.
            </summary>
            <remarks>Supports either standard object syntax or a fluent interface using extension methods.</remarks>
        </member>
        <member name="M:Cake.AutoRest.AutoRestSettings.#ctor(Cake.Core.IO.FilePath)">
            <summary>
            Create a new instances of the <see cref="T:Cake.AutoRest.AutoRestSettings"/> class.
            </summary>
            <param name="inputFile">File containing a compatible API specification</param>
        </member>
        <member name="M:Cake.AutoRest.AutoRestSettings.#ctor">
            <summary>
            Create a new instances of the <see cref="T:Cake.AutoRest.AutoRestSettings"/> class.
            </summary>
        </member>
        <member name="P:Cake.AutoRest.AutoRestSettings.GeneratorSettings">
            <summary>
            Any generator-specific settings.
            </summary>
            <remarks>Currently only implemented by CSharpGeneratorSettings</remarks>
        </member>
        <member name="P:Cake.AutoRest.AutoRestSettings.Namespace">
            <summary>
            The namespace to use for generated code
            </summary>
        </member>
        <member name="P:Cake.AutoRest.AutoRestSettings.OutputDirectory">
            <summary>
            The location for generated files.
            </summary>
            <value>
            Directory path for generated code output. If not specified, uses "Generated" as the default
            </value>
        </member>
        <member name="P:Cake.AutoRest.AutoRestSettings.Generator">
            <summary>
            The code generator (see <see cref="T:Cake.AutoRest.CodeGenerator"/>) language.
            </summary>
            <value>
            If not specified, defaults to CSharp.
            </value>
        </member>
        <member name="P:Cake.AutoRest.AutoRestSettings.Modeler">
            <summary>
            The Modeler to use on the input.
            </summary>
            <value>If not specified, defaults to Swagger.</value>
        </member>
        <member name="P:Cake.AutoRest.AutoRestSettings.ClientName">
            <summary>
            Name to use for the generated client type. 
            </summary>
            <value>By default, uses the value of the 'Title' field from the Swagger input.</value>
        </member>
        <member name="P:Cake.AutoRest.AutoRestSettings.PayloadFlattenThreshold">
            <summary>
            The maximum number of properties in the request body to be represented as method arguments.
            </summary>
            <value>
            If the number of properties in the request body is less than or equal to this value, these properties will be represented as method arguments
            </value>
        </member>
        <member name="P:Cake.AutoRest.AutoRestSettings.HeaderComment">
            <summary>
            Text to include as a header comment in generated files.
            </summary>
            <value>Use NONE to suppress the default header.</value>
        </member>
        <member name="P:Cake.AutoRest.AutoRestSettings.AddCredentials">
            <summary>
            If true, the generated client includes a ServiceClientCredentials property and constructor parameter. Authentication behaviors are implemented by extending the ServiceClientCredentials type
            </summary>
        </member>
        <member name="P:Cake.AutoRest.AutoRestSettings.OutputFileName">
            <summary>
            If set, will cause generated code to be output to a single file.
            </summary>
            <remarks>
            Not supported by all code generators.
            </remarks>
        </member>
        <member name="P:Cake.AutoRest.AutoRestSettings.Verbose">
            <summary>
            If set, will output verbose diagnostic messages.
            </summary>
        </member>
        <member name="M:Cake.AutoRest.CoreExtensions.ToGeneratorName(Cake.AutoRest.CodeGenerator)">
            <summary>
            Wraps ToString() with additional special processing for Azure generators
            </summary>
            <param name="gen">The generator to get a name of</param>
            <returns>CLI-friendly name of the generator</returns>
            <remarks>This could probably be replaced by using the <see cref="T:System.ComponentModel.DescriptionAttribute"/> class</remarks>
        </member>
        <member name="T:Cake.AutoRest.AutoRestSettingsExtensions">
            <summary>
            Extension methods to enable fluent configuration of <see cref="T:Cake.AutoRest.AutoRestSettings"/>
            </summary>
        </member>
        <member name="M:Cake.AutoRest.AutoRestSettingsExtensions.UseNamespace(Cake.AutoRest.AutoRestSettings,System.String)">
            <summary>
            Sets the client namespace
            </summary>
            <param name="settings">The settings</param>
            <param name="ns">Desired client namespace</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.AutoRest.AutoRestSettingsExtensions.OutputToDirectory(Cake.AutoRest.AutoRestSettings,Cake.Core.IO.DirectoryPath)">
            <summary>
            Sets the output directory for generated code
            </summary>
            <param name="settings">Settings</param>
            <param name="path">Directory to output generated code</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.AutoRest.AutoRestSettingsExtensions.WithGenerator(Cake.AutoRest.AutoRestSettings,Cake.AutoRest.CodeGenerator,Cake.AutoRest.IGeneratorSettings)">
            <summary>
            Sets the Generator used by AutoRest
            </summary>
            <param name="settings">Settings</param>
            <param name="gen">Desired code generator (any <see cref="T:Cake.AutoRest.CodeGenerator"/> member)</param>
            <param name="genSettings">Optional generator-specific settings to use</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.AutoRest.AutoRestSettingsExtensions.WithModeler(Cake.AutoRest.AutoRestSettings,System.String)">
            <summary>
            Sets the modeler used by AutoRest
            </summary>
            <param name="settings">Settings</param>
            <param name="modeler">Desired code modeler name (defaults to 'swagger')</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.AutoRest.AutoRestSettingsExtensions.UseClientName(Cake.AutoRest.AutoRestSettings,System.String)">
            <summary>
            Sets the client name to use in generated code
            </summary>
            <param name="settings">Settings</param>
            <param name="clientName">Client name for generated client</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.AutoRest.AutoRestSettingsExtensions.UseFlattenThreshold(Cake.AutoRest.AutoRestSettings,System.Int32)">
            <summary>
            Sets the property flattening threshold (see <see cref="T:Cake.AutoRest.AutoRestSettings"/>)
            </summary>
            <param name="settings">Settings</param>
            <param name="threshold">Maximum number of properties to use method overloading for</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.AutoRest.AutoRestSettingsExtensions.AddHeaderComment(Cake.AutoRest.AutoRestSettings,System.String)">
            <summary>
            Sets the generated code header comment
            </summary>
            <param name="settings">Settings</param>
            <param name="comment">Header comment to put in generated code. Use 'NONE' to suppress</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.AutoRest.AutoRestSettingsExtensions.AddCredentials(Cake.AutoRest.AutoRestSettings,System.Boolean)">
            <summary>
            Enables the inclusion of a ServiceClientCredentials property and constructor parameter in generated code
            </summary>
            <param name="settings">Settings</param>
            <param name="useCredentials">Set to true to enable credentials (defaults to true)</param>
            <returns></returns>
        </member>
        <member name="M:Cake.AutoRest.AutoRestSettingsExtensions.OutputToFile(Cake.AutoRest.AutoRestSettings,Cake.Core.IO.FilePath)">
            <summary>
            Will cause generated code to be output to the specified single file. Not supported by all code generators.
            </summary>
            <param name="settings">Settings</param>
            <param name="path">Path to create the single-file client</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.AutoRest.AutoRestSettingsExtensions.WithVerboseOutput(Cake.AutoRest.AutoRestSettings)">
            <summary>
            Enables verbose/diagnostic messages
            </summary>
            <param name="settings">Settings</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="T:Cake.AutoRest.CSharpGeneratorSettings">
            <summary>
            CSharp generator-specific settings for use when generating C# clients
            </summary>
        </member>
        <member name="P:Cake.AutoRest.CSharpGeneratorSettings.Generator">
            <summary>
            The standard generator to use. Can still be overridden by <see cref="T:Cake.AutoRest.AutoRestSettings"/>
            </summary>
        </member>
        <member name="M:Cake.AutoRest.CSharpGeneratorSettings.GetArguments">
            <summary>
            Gets the arguments to use when invoking
            </summary>
            <returns>key/value pairs of arguments and values for set parameters</returns>
        </member>
        <member name="P:Cake.AutoRest.CSharpGeneratorSettings.InternalConstructors">
            <summary>
            Indicates whether ctor needs to be generated with internal protection level.
            </summary>
        </member>
        <member name="P:Cake.AutoRest.CSharpGeneratorSettings.UseDateTimeOffset">
            <summary>
             Indicates whether to use DateTimeOffset instead of DateTime to model date-time types.
            </summary>
        </member>
        <member name="P:Cake.AutoRest.CSharpGeneratorSettings.SyncMethodMode">
            <summary>
            Specifies mode for generating sync wrappers. 
            <para>Supported value are Essential - generates only one sync returning body or header (default), All - generates one sync method for each async method, and None - does not generate any sync methods</para>
            </summary>
        </member>
        <member name="T:Cake.AutoRest.IGeneratorSettings">
            <summary>
            Used to define generator-specific settings, as with the <see cref="T:Cake.AutoRest.CSharpGeneratorSettings"/> class
            </summary>
        </member>
        <member name="P:Cake.AutoRest.IGeneratorSettings.Generator">
            <summary>
            The standard generator to use with a given generator settings instance
            </summary>
        </member>
        <member name="M:Cake.AutoRest.IGeneratorSettings.GetArguments">
            <summary>
            Gets the arguments from the generator-specific settings
            </summary>
            <returns>The arguments in key/value pairs</returns>
        </member>
    </members>
</doc>
